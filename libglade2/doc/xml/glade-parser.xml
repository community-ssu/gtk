<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libglade-Libglade-SAX-Parser">
<refmeta>
<refentrytitle>Libglade SAX Parser</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGLADE Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Libglade SAX Parser</refname><refpurpose>Declarations and routines for accessing the SAX based parser.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;glade/glade-parser.h&gt;


struct      <link linkend="GladeInterface">GladeInterface</link>;
struct      <link linkend="GladeWidgetInfo">GladeWidgetInfo</link>;
struct      <link linkend="GladeChildInfo">GladeChildInfo</link>;
struct      <link linkend="GladeProperty">GladeProperty</link>;
struct      <link linkend="GladeSignalInfo">GladeSignalInfo</link>;
struct      <link linkend="GladeAccelInfo">GladeAccelInfo</link>;
struct      <link linkend="GladeAtkActionInfo">GladeAtkActionInfo</link>;
struct      <link linkend="GladeAtkRelationInfo">GladeAtkRelationInfo</link>;

<link linkend="GladeInterface">GladeInterface</link>* <link linkend="glade-parser-parse-file">glade_parser_parse_file</link>     (const <link linkend="gchar">gchar</link> *file,
                                             const <link linkend="gchar">gchar</link> *domain);
<link linkend="GladeInterface">GladeInterface</link>* <link linkend="glade-parser-parse-buffer">glade_parser_parse_buffer</link>   (const <link linkend="gchar">gchar</link> *buffer,
                                             <link linkend="gint">gint</link> len,
                                             const <link linkend="gchar">gchar</link> *domain);
<link linkend="void">void</link>        <link linkend="glade-interface-destroy">glade_interface_destroy</link>         (<link linkend="GladeInterface">GladeInterface</link> *interface);
<link linkend="void">void</link>        <link linkend="glade-interface-dump">glade_interface_dump</link>            (<link linkend="GladeInterface">GladeInterface</link> *interface,
                                             const <link linkend="gchar">gchar</link> *filename);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>
The structures described here are the output of libglade's XML parser.
These structures are really only useful for people who are extending
libglade to handle other widget sets, but it could also be useful for
other applications that need to read glade XML files.
</para>

<para>If you only wish to use libglade, you don't need to worry about
these functions and structures.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GladeInterface"/>struct GladeInterface</title>
<indexterm><primary>GladeInterface</primary></indexterm><programlisting>struct GladeInterface {

    gchar **requires;
    guint n_requires;

    GladeWidgetInfo **toplevels;
    guint n_toplevels;

    GHashTable *names;

    GHashTable *strings;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GladeWidgetInfo"/>struct GladeWidgetInfo</title>
<indexterm><primary>GladeWidgetInfo</primary></indexterm><programlisting>struct GladeWidgetInfo {

    GladeWidgetInfo *parent;

    gchar *classname;
    gchar *name;

    GladeProperty *properties;
    guint n_properties;

    GladeProperty *atk_props;
    guint n_atk_props;

    GladeSignalInfo *signals;
    guint n_signals;
	
    GladeAtkActionInfo *atk_actions;
    guint n_atk_actions;

    GladeAtkRelationInfo *relations;
    guint n_relations;

    GladeAccelInfo *accels;
    guint n_accels;

    GladeChildInfo *children;
    guint n_children;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GladeChildInfo"/>struct GladeChildInfo</title>
<indexterm><primary>GladeChildInfo</primary></indexterm><programlisting>struct GladeChildInfo {

    GladeProperty *properties;
    guint n_properties;

    GladeWidgetInfo *child;
    gchar *internal_child;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GladeProperty"/>struct GladeProperty</title>
<indexterm><primary>GladeProperty</primary></indexterm><programlisting>struct GladeProperty {

    gchar *name;
    gchar *value;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GladeSignalInfo"/>struct GladeSignalInfo</title>
<indexterm><primary>GladeSignalInfo</primary></indexterm><programlisting>struct GladeSignalInfo {

    gchar *name;
    gchar *handler;
    gchar *object; /* NULL if this isn't a connect_object signal */
    guint after : 1;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GladeAccelInfo"/>struct GladeAccelInfo</title>
<indexterm><primary>GladeAccelInfo</primary></indexterm><programlisting>struct GladeAccelInfo {

    guint key;
    GdkModifierType modifiers;
    gchar *signal;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GladeAtkActionInfo"/>struct GladeAtkActionInfo</title>
<indexterm><primary>GladeAtkActionInfo</primary></indexterm><programlisting>struct GladeAtkActionInfo {

    gchar *action_name;
    gchar *description;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GladeAtkRelationInfo"/>struct GladeAtkRelationInfo</title>
<indexterm><primary>GladeAtkRelationInfo</primary></indexterm><programlisting>struct GladeAtkRelationInfo {

    gchar *target;
    gchar *type;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="glade-parser-parse-file"/>glade_parser_parse_file ()</title>
<indexterm><primary>glade_parser_parse_file</primary></indexterm><programlisting><link linkend="GladeInterface">GladeInterface</link>* glade_parser_parse_file     (const <link linkend="gchar">gchar</link> *file,
                                             const <link linkend="gchar">gchar</link> *domain);</programlisting>
<para>
This function parses a Glade XML interface file to a GladeInterface
object (which is libglade's internal representation of the
interface data).
</para>
<para>
Generally, user code won't need to call this function.  Instead, it
should go through the GladeXML interfaces.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara> the filename of the glade XML file.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> the translation domain for the XML file.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the GladeInterface structure for the XML file.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-parser-parse-buffer"/>glade_parser_parse_buffer ()</title>
<indexterm><primary>glade_parser_parse_buffer</primary></indexterm><programlisting><link linkend="GladeInterface">GladeInterface</link>* glade_parser_parse_buffer   (const <link linkend="gchar">gchar</link> *buffer,
                                             <link linkend="gint">gint</link> len,
                                             const <link linkend="gchar">gchar</link> *domain);</programlisting>
<para>
This function is similar to glade_parser_parse_file, except that it
parses XML data from a buffer in memory.  This could be used to
embed an interface into the executable, for instance.
</para>
<para>
Generally, user code won't need to call this function.  Instead, it
should go through the GladeXML interfaces.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara> a buffer in memory containing XML data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> the length of <parameter>buffer</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> the translation domain for the XML file.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the GladeInterface structure for the XML buffer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-interface-destroy"/>glade_interface_destroy ()</title>
<indexterm><primary>glade_interface_destroy</primary></indexterm><programlisting><link linkend="void">void</link>        glade_interface_destroy         (<link linkend="GladeInterface">GladeInterface</link> *interface);</programlisting>
<para>
Frees a GladeInterface structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>interface</parameter>&nbsp;:</term>
<listitem><simpara> the GladeInterface structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="glade-interface-dump"/>glade_interface_dump ()</title>
<indexterm><primary>glade_interface_dump</primary></indexterm><programlisting><link linkend="void">void</link>        glade_interface_dump            (<link linkend="GladeInterface">GladeInterface</link> *interface,
                                             const <link linkend="gchar">gchar</link> *filename);</programlisting>
<para>
This function dumps the contents of a GladeInterface into a file as
XML.  It is intended mainly as a debugging tool.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>interface</parameter>&nbsp;:</term>
<listitem><simpara> the GladeInterface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> the filename to write the interface data to.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
