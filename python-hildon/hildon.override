/* -*- Mode: C; c-basic-offset: 4 -*-
 * python-hildon - Python bindings for the Hildon toolkit.
 *
 *   hildon.override: overrides for the hildon module.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */
%%
headers
#define NO_IMPORT_PYGOBJECT
#include <pygobject.h>

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <libintl.h>

#include <glib-object.h>

#include "hildon-extra.h"

%%
modulename hildon
%%
import gobject.GObject as PyGObject_Type
import gtk.Adjustment as PyGtkAdjustment_Type
import gtk.Bin as PyGtkBin_Type
import gtk.Button as PyGtkButton_Type
import gtk.Container as PyGtkContainer_Type
import gtk.Dialog as PyGtkDialog_Type
import gtk.EventBox as PyGtkEventBox_Type
import gtk.ListStore as PyGtkListStore_Type
import gtk.Menu as PyGtkMenu_Type
import gtk.Notebook as PyGtkNotebook_Type
import gtk.ProgressBar as PyGtkProgressBar_Type
import gtk.Scale as PyGtkScale_Type
import gtk.SizeGroup as PyGtkSizeGroup_Type
import gtk.TextBuffer as PyGtkTextBuffer_Type
import gtk.Toolbar as PyGtkToolbar_Type
import gtk.Window as PyGtkWindow_Type
import gtk.Widget as PyGtkWidget_Type
import pango.FontDescription as PyPangoFontDescription_Type

%%
ignore-glob *_get_type

%%
override hildon_calendar_popup_get_date noargs
static PyObject *
_wrap_hildon_calendar_popup_get_date (PyGObject *self)
{
   int year, month, day;

   hildon_calendar_popup_get_date(HILDON_CALENDAR_POPUP(self->obj), &year, &month, &day);

   return Py_BuildValue("(iii)", year, month, day);
}

%%
override hildon_date_editor_get_date noargs
static PyObject *
_wrap_hildon_date_editor_get_date (PyGObject *self)
{
   int year, month, day;

   hildon_date_editor_get_date(HILDON_DATE_EDITOR(self->obj), &year, &month, &day);
 
   return Py_BuildValue("(iii)", year, month, day);
}

%%
override hildon_range_editor_get_range noargs
static PyObject *
_wrap_hildon_range_editor_get_range (PyGObject *self)
{
   int start, end;

   hildon_range_editor_get_range(HILDON_RANGE_EDITOR(self->obj), &start, &end);
 
   return Py_BuildValue("(ii)", start, end);
}

%%
override hildon_time_editor_get_time noargs
static PyObject *
_wrap_hildon_time_editor_get_time (PyGObject *self)
{
   int hours, minutes, seconds;

   hildon_time_editor_get_time(HILDON_TIME_EDITOR(self->obj), &hours, &minutes, &seconds);
 
   return Py_BuildValue("(iii)", hours, minutes, seconds);
}

%%
override hildon_time_editor_get_duration_range noargs
static PyObject *
_wrap_hildon_time_editor_get_duration_range (PyGObject *self)
{
   int min_seconds, max_seconds;

   hildon_time_editor_get_duration_range(HILDON_TIME_EDITOR(self->obj), &min_seconds, &max_seconds);
 
   return Py_BuildValue("(ii)", min_seconds, max_seconds);
}

%%
override hildon_time_picker_get_time noargs
static PyObject *
_wrap_hildon_time_picker_get_time (PyGObject *self)
{
   int hours, minutes;

   hildon_time_picker_get_time(HILDON_TIME_PICKER(self->obj), &hours, &minutes);
 
   return Py_BuildValue("(ii)", hours, minutes);
}

%%
override hildon_file_chooser_dialog_get_filename noargs
static PyObject *
_wrap_hildon_file_chooser_dialog_get_filename (PyGObject *self)
{
    gchar *ret;

    ret = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(self->obj));
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

%%
override hildon_file_chooser_dialog_new kwargs
static int
_wrap_hildon_file_chooser_dialog_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "parent", "action", NULL };
    PyGObject *parent;
    PyObject *py_action = NULL;
    GtkFileChooserAction action;
    PyGILState_STATE state;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!O:HildonFileChooserDialog.__init__", kwlist, &PyGtkWindow_Type, &parent, &py_action))
        return -1;
    if (pyg_enum_get_value(GTK_TYPE_FILE_CHOOSER_ACTION, py_action, (gint *)&action))
        return -1;
    self->obj = (GObject *)hildon_file_chooser_dialog_new(GTK_WINDOW(parent->obj), action);

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create HildonFileChooserDialog object");
        return -1;
    }

    state = pyg_gil_state_ensure();
    g_object_ref(self->obj); /* we don't own the first reference of windows */
    pyg_gil_state_release(state);

    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

%%
override hildon_appview_get_vbox noargs
static PyObject *
_wrap_hildon_appview_get_vbox (PyGObject *self)
{
    GtkWidget *ret;
    HildonAppView *appview;

    appview = HILDON_APPVIEW(self->obj);
    ret = appview->vbox;

    return pygobject_new((GObject *)ret);
}

%%
override hildon_note_new kwargs
static int
_wrap_hildon_note_new (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    PyObject* py_tuple;
    const char *note_type;
    static char *kwlist[] = { "note_type", "note_tuple", NULL };
    PyObject* py_obj;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "sO!:HildonNote.__init__", kwlist, &note_type, &PyTuple_Type, &py_tuple))
        return -1;

    if (strcmp (note_type, "confirmation") == 0) {
        PyObject* parent;
        const char* description;
        const char* icon_name;
        
        if (PyTuple_Size (py_tuple) != 3 && PyTuple_Size (py_tuple) != 2) {
            PyErr_SetString(PyExc_RuntimeError, "A \"confirmation\" HildonNote type takes three or two items in its tuple.");
            return -1;
        }
        
        parent = PyTuple_GetItem (py_tuple, 0);
        if (parent == NULL) {
            return -1;
        }
        
        py_obj = PyTuple_GetItem (py_tuple, 1);
        description = PyString_AsString (py_obj);
        if (description == NULL) {
            return -1;
        }

        if (PyTuple_Size (py_tuple) == 3) {
            py_obj = PyTuple_GetItem (py_tuple, 2);
            icon_name = PyString_AsString (py_obj);
            if (icon_name == NULL) {
                return -1;
            }
            self->obj = (GObject *)hildon_note_new_confirmation_with_icon_name (GTK_WINDOW(pygobject_get(parent)), description, icon_name);
        } else {
            /* Use the default icon. */
            self->obj = (GObject *)hildon_note_new_confirmation (GTK_WINDOW(pygobject_get(parent)), description);
        }
        
        if (!self->obj) {
            PyErr_SetString(PyExc_RuntimeError, "could not create HildonNote object");
            return -1;
        }
    } else if (strcmp (note_type, "information") == 0) {
        PyObject* parent;
        const char* description;
        const char* icon_name;
        
        if (PyTuple_Size (py_tuple) != 3 && PyTuple_Size (py_tuple) != 2) {
            PyErr_SetString(PyExc_RuntimeError, "A \"information\" HildonNote type takes three or two items in its tuple.");
            return -1;
        }
        
        parent = PyTuple_GetItem (py_tuple, 0);
        if (parent == NULL) {
            return -1;
        }
        
        py_obj = PyTuple_GetItem (py_tuple, 1);
        description = PyString_AsString (py_obj);
        if (description == NULL) {
            return -1;
        }
        
        if (PyTuple_Size (py_tuple) == 3) {
            py_obj = PyTuple_GetItem (py_tuple, 2);
            icon_name = PyString_AsString (py_obj);
            if (icon_name == NULL) {
                return -1;
            }
            
            self->obj = (GObject *)hildon_note_new_information_with_icon_name (GTK_WINDOW(pygobject_get(parent)), description, icon_name);
        } else {
            /* Use the default icon. */
            self->obj = (GObject *)hildon_note_new_information (GTK_WINDOW(pygobject_get(parent)), description);
        }
        
        if (!self->obj) {
            PyErr_SetString(PyExc_RuntimeError, "could not create HildonNote object");
            return -1;
        }
    } else if (strcmp (note_type, "cancel_with_progress_bar") == 0) {
        PyObject* parent;
        const char* description;
        PyObject* progress_bar;
    
        if (PyTuple_Size (py_tuple) != 3) {
            PyErr_SetString(PyExc_RuntimeError, "A \"cancel_with_progress_bar\" HildonNote type takes exactly three items in its tuple.");
            return -1;
        }
        
        parent = PyTuple_GetItem (py_tuple, 0);
        if (parent == NULL) {
            return -1;
        }
        
        py_obj = PyTuple_GetItem (py_tuple, 1);
        description = PyString_AsString (py_obj);
        if (description == NULL) {
            return -1;
        }
        
        progress_bar = PyTuple_GetItem (py_tuple, 2);
        if (progress_bar == NULL) {
            return -1;
        }
        
        self->obj = (GObject *)hildon_note_new_cancel_with_progress_bar(GTK_WINDOW(pygobject_get(parent)), description, GTK_PROGRESS_BAR(pygobject_get(progress_bar)));
        if (!self->obj) {
            PyErr_SetString(PyExc_RuntimeError, "could not create HildonNote object");
            return -1;
        }
    } else {
        PyErr_SetString(PyExc_RuntimeError, "HildonNote constructor: Unknow note type.");
        return -1;
    }
   
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

%%
override hildon_font_selection_dialog_new kwargs
static int
_wrap_hildon_font_selection_dialog_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "parent", "title", NULL };
    PyGObject *parent;
    char *title = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!|s:HildonFontSelectionDialog.__init__", kwlist, &PyGtkWindow_Type, &parent, &title))
        return -1;
    self->obj = (GObject *)hildon_font_selection_dialog_new(GTK_WINDOW(parent->obj), title);

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create HildonFontSelectionDialog object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

%%
override hildon_weekday_picker_set_day kwargs
static PyObject *
_wrap_hildon_weekday_picker_set_day(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "day", NULL };
    PyObject *py_day = NULL;
    GDateWeekday day;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:HildonWeekdayPicker.set_day", kwlist, &py_day))
        return NULL;
    if (pyg_enum_get_value(HILDON_TYPE_DATE_WEEKDAY, py_day, (gint *)&day))
        return NULL;
    hildon_weekday_picker_set_day(HILDON_WEEKDAY_PICKER(self->obj), day);
    Py_INCREF(Py_None);
    return Py_None;
}

%%
override hildon_weekday_picker_unset_day kwargs
static PyObject *
_wrap_hildon_weekday_picker_unset_day(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "day", NULL };
    PyObject *py_day = NULL;
    GDateWeekday day;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:HildonWeekdayPicker.unset_day", kwlist, &py_day))
        return NULL;
    if (pyg_enum_get_value(HILDON_TYPE_DATE_WEEKDAY, py_day, (gint *)&day))
        return NULL;
    hildon_weekday_picker_unset_day(HILDON_WEEKDAY_PICKER(self->obj), day);
    Py_INCREF(Py_None);
    return Py_None;
}

%%
override hildon_weekday_picker_toggle_day kwargs
static PyObject *
_wrap_hildon_weekday_picker_toggle_day(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "day", NULL };
    PyObject *py_day = NULL;
    GDateWeekday day;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:HildonWeekdayPicker.toggle_day", kwlist, &py_day))
        return NULL;
    if (pyg_enum_get_value(HILDON_TYPE_DATE_WEEKDAY, py_day, (gint *)&day))
        return NULL;
    hildon_weekday_picker_toggle_day(HILDON_WEEKDAY_PICKER(self->obj), day);
    Py_INCREF(Py_None);
    return Py_None;
}

%%
override hildon_weekday_picker_isset_day kwargs
static PyObject *
_wrap_hildon_weekday_picker_isset_day(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "day", NULL };
    PyObject *py_day = NULL;
    int ret;
    GDateWeekday day;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:HildonWeekdayPicker.isset_day", kwlist, &py_day))
        return NULL;
    if (pyg_enum_get_value(HILDON_TYPE_DATE_WEEKDAY, py_day, (gint *)&day))
        return NULL;
    ret = hildon_weekday_picker_isset_day(HILDON_WEEKDAY_PICKER(self->obj), day);
    return PyBool_FromLong(ret);

}

%%
override hildon_grid_item_new_with_label kwargs
static int
_wrap_hildon_grid_item_new_with_label(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "icon_basename", "label", NULL };
    char *icon_basename;
    char *label = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "s|s:HildonGridItem.__init__", kwlist, &icon_basename, &label))
        return -1;
        
    if (label != NULL) {
        self->obj = (GObject *)hildon_grid_item_new_with_label(icon_basename, label);
    } else {
        self->obj = (GObject *)hildon_grid_item_new(icon_basename);
    }

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create HildonGridItem object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

%%
/* Bug #725 fixed
 * Author: Jan Arne Petersen
 *         maemo@jpetersen.org
 */
override hildon_caption_new kwargs
static int
_wrap_hildon_caption_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "group", "value", "control", "icon", "flag", NULL };
    PyGObject *py_group = NULL, *py_control = NULL, *py_icon = NULL;
    PyObject *py_flag = NULL;
    GtkSizeGroup *group;
    char *value = NULL;
    GtkWidget *control;
    GtkWidget *icon;
    HildonCaptionStatus flag = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "|OsOOO:HildonCaption.__init__", kwlist, &py_group, &value, &py_control, &py_icon, &py_flag))
        return -1;

    if (py_group == NULL || (PyObject*)py_group == Py_None)
	group = NULL;
    else if (pygobject_check(py_group, &PyGtkSizeGroup_Type))
	group = GTK_SIZE_GROUP(py_group->obj);
    else {
        PyErr_SetString(PyExc_TypeError, "group must be a GtkSizeGroup or None");
        return -1;
    }

    if (py_control != NULL && pygobject_check(py_control, &PyGtkWidget_Type))
	control = GTK_WIDGET(py_control->obj);
    else {
        PyErr_SetString(PyExc_TypeError, "control must be a GtkWidget");
        return -1;
    }

    if (py_icon == NULL || (PyObject*)py_icon == Py_None)
	icon = NULL;
    else if (pygobject_check(py_icon, &PyGtkWidget_Type))
	icon = GTK_WIDGET(py_icon->obj);
    else {
        PyErr_SetString(PyExc_TypeError, "icon must be a GtkWidget or None");
        return -1;
    }

    if (pyg_flags_get_value(HILDON_TYPE_CAPTION_STATUS, py_flag, (gint *)&flag))
        return -1;

    self->obj = (GObject *)hildon_caption_new(group, value, control, icon, flag);

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create HildonCaption object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}
/* End of fix */
