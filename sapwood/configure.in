AC_INIT([src/sapwood-server.c])
AM_INIT_AUTOMAKE(sapwood, 2.14)

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

# Save ACLOCAL_FLAGS
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_MAKE_SET

dnl abstract sockets namespace checks, from dbus
AC_ARG_ENABLE(abstract-sockets,
	      [AC_HELP_STRING([--enable-abstract-sockets],
			      [use abstract socket namespace (linux only)])],
	      [enable_abstract_sockets=$enableval],
	      [enable_abstract_sockets=auto])

AC_MSG_CHECKING(abstract socket namespace)
AC_RUN_IFELSE([AC_LANG_PROGRAM(
[[
#include <sys/types.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <errno.h>
]],
[[
  int listen_fd;
  struct sockaddr_un addr;

  listen_fd = socket (PF_UNIX, SOCK_STREAM, 0);

  if (listen_fd < 0)
    {
      fprintf (stderr, "socket() failed: %s\n", strerror (errno));
      exit (1);
    }

  memset (&addr, '\0', sizeof (addr));
  addr.sun_family = AF_UNIX;
  strcpy (addr.sun_path, "X/tmp/sapwood-fake-socket-path-used-in-configure-test");
  addr.sun_path[0] = '\0'; /* this is what makes it abstract */

  if (bind (listen_fd, (struct sockaddr*) &addr, SUN_LEN (&addr)) < 0)
    {
      fprintf (stderr, "Abstract socket namespace bind() failed: %s\n",
               strerror (errno));
      exit (1);
    }
  else
    exit (0);
]])],
  [have_abstract_sockets=yes],
  [have_abstract_sockets=no])
AC_MSG_RESULT($have_abstract_sockets)

if test x$enable_abstract_sockets = xyes; then
  if test x$have_abstract_sockets = xno; then
    AC_MSG_ERROR([Abstract sockets explicitly required, and support not detected.])
  fi
fi

if test x$enable_abstract_sockets = xno; then
  have_abstract_sockets=no
fi

if test x$have_abstract_sockets = xyes; then
  AC_DEFINE(HAVE_ABSTRACT_SOCKETS,1,[Have abstract socket namespace])
fi

dnl end abstract socket namespace checks

changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

dnl Initialize libtool
AM_DISABLE_STATIC
AM_PROG_LIBTOOL

PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 1.3.12)

GTK_VERSION=`$PKG_CONFIG --variable=gtk_binary_version gtk+-2.0`
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_VERSION)

PKG_CHECK_MODULES(GDK, gdk-2.0 >= 1.3.12)
AC_SUBST(GDK_CFLAGS)
AC_SUBST(GDK_LIBS)

AC_OUTPUT([
Makefile
src/Makefile
])

echo "
	prefix:           ${prefix}
	cflags:           ${CFLAGS}

	Maintainer mode:  ${USE_MAINTAINER_MODE}
	Abstract sockets: ${have_abstract_sockets}
"
