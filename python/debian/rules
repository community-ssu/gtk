#!/usr/bin/make -f
# Sample debian/rules that uses debhelper. GNU copyright 1997 by Joey Hess.

export SHELL = /bin/bash

# Uncomment this to turn on verbose mode.
export DH_VERBOSE=1

DEB_BUILD_ARCH		?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)
DEB_BUILD_ARCH_OS	?= $(shell dpkg-architecture -qDEB_BUILD_ARCH_OS)

export VER=2.4
export NVER=2.5
export PVER=python2.4
export PRIORITY=$(shell echo $(VER) | tr -d '.')0

PREVVER	:= $(shell awk '/^python/ && NR > 1 {print substr($$2,2,length($$2)-2); exit}' debian/changelog)

# default versions are built from the python-defaults source package
# keep the definition to adjust package priorities.
DEFAULT_VERSION=yes
STATIC_PYTHON=no
WITHOUT_CHECK=yes

# set this (in the environment), when regenerating the docs. requires
# latex2html as a build dependency.
USE_L2H ?= no

PY_INTERPRETER = /usr/bin/python$(VER)

ifeq ($(DEFAULT_VERSION),yes)
  PY_PRIO = standard
  #PYSTDDEP = , python (>= $(VER))
else
  PY_PRIO = optional
endif

PY_MINPRIO = $(PY_PRIO)

CC = gcc
OPTSETTINGS = OPT="-g -O0 -Wall -Wstrict-prototypes"

PWD		:= $(shell pwd)
buildd_static	:= $(PWD)/build-static
buildd_shared	:= $(PWD)/build-shared
buildd_debug	:= $(PWD)/build-debug

d		:= debian/tmp
scriptdir	=  usr/lib/python$(VER)

# package names and directories
p_base		:= $(PVER)
p_dev		:= $(PVER)-dev

d_base		:= debian/$(p_base)
d_dev		:= debian/$(p_dev)

build: stamp-build
stamp-build: stamp-build-static stamp-build-shared
	touch stamp-build

stamp-build-static: stamp-configure-static
	dh_testdir
	$(MAKE) -C $(buildd_static)
	touch stamp-build-static

stamp-build-shared: stamp-configure-shared
	dh_testdir
	$(MAKE) -C $(buildd_shared)
#	: # build the shared library
	$(MAKE) -C $(buildd_shared) \
		libpython$(VER).so
	: # build a static library with PIC objects
	$(MAKE) -C $(buildd_shared) \
		LIBRARY=libpython$(VER)-pic.a libpython$(VER)-pic.a
	touch stamp-build-shared

stamp-build-debug: stamp-configure-debug
	dh_testdir
	$(MAKE) -C $(buildd_debug)
	touch stamp-build-debug

common_configure_args = \
		--prefix=/usr \
		--with-fpectl \
		--enable-ipv6 \
		--enable-unicode=ucs2 \
		--enable-pydebug \
		--without-cxx

stamp-configure-shared:
	mkdir -p $(buildd_shared)
	cd $(buildd_shared) && \
	  CC="$(CC)" $(OPTSETTINGS) \
	    ../configure \
		--enable-shared \
		$(common_configure_args)

	touch stamp-configure-shared

stamp-configure-static:
	mkdir -p $(buildd_static)
	cd $(buildd_static) && \
	  CC="$(CC)" $(OPTSETTINGS) \
	    ../configure \
		$(common_configure_args)

	: # apply workaround for missing os.fsync
	sed 's/HAVE_SYNC/HAVE_FSYNC/g' $(buildd_static)/pyconfig.h \
		> $(buildd_static)/pyconfig.h.new
	touch -r $(buildd_static)/pyconfig.h $(buildd_static)/pyconfig.h.new
	mv -f $(buildd_static)/pyconfig.h.new $(buildd_static)/pyconfig.h

	touch stamp-configure-static

stamp-configure-debug:
	mkdir -p $(buildd_debug)
	cd $(buildd_debug) && \
	  CC="$(CC)" $(OPTDEBUGSETTINGS) \
	    ../configure \
		$(common_configure_args) \
		--with-pydebug

	: # apply workaround for missing os.fsync
	sed 's/HAVE_SYNC/HAVE_FSYNC/g' $(buildd_debug)/pyconfig.h \
		> $(buildd_debug)/pyconfig.h.new
	touch -r $(buildd_debug)/pyconfig.h $(buildd_debug)/pyconfig.h.new
	mv -f $(buildd_debug)/pyconfig.h.new $(buildd_debug)/pyconfig.h

	touch stamp-configure-debug

stamp-mincheck:
	for m in $(MIN_MODS) $(MIN_EXTS) $(MIN_BUILTINS); do \
	  echo "import $$m"; \
	done > $(buildd_static)/minmods.py
	cd $(buildd_static) && ./python ../debian/pymindeps.py minmods.py \
	  > $(buildd_static)/mindeps.txt
	if [ -x /usr/bin/dot ]; then \
	  python debian/depgraph.py < $(buildd_static)/mindeps.txt \
	    > $(buildd_static)/mindeps.dot; \
	  dot -Tpng -o $(buildd_static)/mindeps.png \
	    $(buildd_static)/mindeps.dot; \
	else true; fi
	cd $(buildd_static) && ./python ../debian/mincheck.py \
		minmods.py mindeps.txt
	touch stamp-mincheck

TESTOPTS = -l -unetwork,bsddb -x test_tcl
TESTOPTS = -x test_tcl
stamp-check:
ifeq ($(WITHOUT_CHECK),yes)
	echo "check run disabled for this build" > $(buildd_static)/test_results
else
	: # build locales needed by the testsuite
	rm -rf locales
	mkdir locales
	chmod +x debian/locale-gen
	debian/locale-gen

	@echo "BEGIN test static"
	-time \
	  LOCPATH=$(PWD)/locales \
	  $(MAKE) -C $(buildd_static) test \
	    TESTOPTS="$(TESTOPTS)" 2>&1 \
	    | tee $(buildd_static)/test_results
	@echo "END test static"
	@echo "BEGIN test shared"
	-time \
	  LOCPATH=$(PWD)/locales \
	  $(MAKE) -C $(buildd_shared) test \
	    TESTOPTS="$(TESTOPTS)" 2>&1 \
	    | tee $(buildd_shared)/test_results
	@echo "END test shared"
endif
	cp -p $(buildd_static)/test_results debian/

	@echo "BEGIN pystone static"
	cd $(buildd_static) && ./python ../Lib/test/pystone.py
	cd $(buildd_static) && ./python ../Lib/test/pystone.py
	@echo "END pystone static"
	@echo "BEGIN pystone shared"
	cd $(buildd_shared) \
		&& LD_LIBRARY_PATH=. ./python ../Lib/test/pystone.py
	cd $(buildd_shared) \
		&& LD_LIBRARY_PATH=. ./python ../Lib/test/pystone.py
	@echo "END pystone shared"
	touch stamp-check

minimal-test:
	rm -rf mintest
	mkdir -p mintest/lib mintest/dynlib mintest/testlib mintest/all-lib
	cp -p $(buildd_static)/python mintest/
	cp -p $(foreach i,$(MIN_MODS),Lib/$(i).py) \
		mintest/lib/
	cp -p $(foreach i,$(MIN_EXTS),$(buildd_static)/build/lib*/$(i).so) \
		mintest/dynlib/
	cp -p Lib/unittest.py mintest/lib/
	cp -pr Lib/test mintest/lib/
	cp -pr Lib mintest/all-lib
	cp -p $(buildd_static)/build/lib*/*.so mintest/all-lib/
	( \
	  echo "import sys"; \
	  echo "sys.path = ["; \
	  echo "    '$(PWD)/mintest/lib',"; \
	  echo "    '$(PWD)/mintest/dynlib',"; \
	  echo "]"; \
	  cat Lib/test/regrtest.py; \
	) > mintest/lib/test/mintest.py
	cd mintest && ./python -E -S lib/test/mintest.py \
	     -x test_codecencodings_cn test_codecencodings_hk \
		test_codecencodings_jp test_codecencodings_kr \
		test_codecencodings_tw test_codecs test_multibytecodec \

clean:
	dh_testdir
	dh_testroot
	rm -f stamp-*
	rm -f patch-stamp* pxxx
	rm -f debian/test_results

	-$(MAKE) -f Makefile.pre.in srcdir=. distclean
	rm -rf Lib/test/db_home
	rm -rf $(buildd_static) $(buildd_shared) $(buildd_debug)
	-find -name '*.py[co]' | xargs -n 50 rm -f
	rm -rf locales
	dh_clean

stamp-control:
	: # We have to prepare the various control files

	for f in debian/*.in; do \
	    f2=`echo $$f | sed "s,PVER,$(PVER),g;s/@VER@/$(VER)/g;s,\.in$$,,"`; \
	    if [ $$f2 != debian/control ]; then \
		sed -e "s/@PVER@/$(PVER)/g;s/@VER@/$(VER)/g" \
		    -e "s/@PRIORITY@/$(PRIORITY)/g" \
		    -e "s,@SCRIPTDIR@,/$(scriptdir),g" \
		  <$$f >$$f2; \
	    fi; \
	done

install: build stamp-install
stamp-install: stamp-build stamp-control
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	: # make install into tmp and subsequently move the files into
	: # their packages' directories.
	install -d $(d)/usr
	$(MAKE) -C $(buildd_static) install \
		prefix=$(PWD)/$(d)/usr

	: # remove files, which are not packaged
	rm -f $(d)/usr/bin/smtpd.py

	: # move manpages to new names
	mkdir -p $(d)/usr/share/man/man1
	mv $(d)/usr/man/man1/python.1 \
		$(d)/usr/share/man/man1/python$(VER).1

	: # Symlinks to /usr/bin for some tools
	mkdir -p $(d_dev)/usr/lib/python$(VER)
	mkdir -p $(d_dev)/usr/bin
	mv $(d)/usr/lib/python$(VER)/pdb.py $(d_dev)/usr/lib/python$(VER)/pdb.py
	(cd $(d_dev)/usr/bin/ && ln -sf ../lib/python$(VER)/pdb.py pdb$(VER))

	: # install the shared library
	cp -p $(buildd_shared)/libpython$(VER).so.1.0 $(d)/usr/lib/
	ln -sf libpython$(VER).so.1.0 $(d)/usr/lib/libpython$(VER).so.1
	ln -sf libpython$(VER).so.1 $(d)/usr/lib/libpython$(VER).so
	ln -sf ../../libpython$(VER).so \
		$(d)/usr/lib/python$(VER)/config/libpython$(VER).so

	mv $(d)/usr/bin/pydoc $(d_dev)/usr/bin/pydoc$(VER)
	cp -p Tools/i18n/pygettext.py $(d_dev)/usr/bin/pygettext$(VER)

	: # install the Makefile of the shared python build
	sed -e 's,^CXX *=,CXX=		g++ -pthread,' \
	    -e 's,^RUNSHARED *=.*,RUNSHARED=,' \
		build-shared/Makefile > $(d)/$(scriptdir)/config/Makefile

	: # Move the binary and the minimal libraries into $(p_min).
	dh_installdirs -p$(p_base) \
		usr/bin \
		usr/share/man/man1 \
		$(scriptdir)
	dh_movefiles -p$(p_base) --sourcedir=$(d) \
		usr/bin/python$(VER) \
		usr/share/man/man1/python$(VER).1 \
		$(foreach i,$(MIN_EXTS),$(scriptdir)/lib-dynload/$(i).so) \
		$(foreach i,$(MIN_MODS),$(scriptdir)/$(i).py)


	: # Move the static library and the header files into $(p_dev).
#	mv $(d)/usr/share/include/python$(VER)/* $(d)/usr/include/python$(VER)/.
#	rm -rf $(d)/usr/share/include
	dh_installdirs -p$(p_dev) \
		$(scriptdir) \
		$(scriptdir)/doc/html \
		usr/include \
		usr/lib
	dh_movefiles -p$(p_dev) --sourcedir=$(d) \
		usr/lib/python$(VER)/config \
		usr/include/python$(VER) \
		usr/lib/libpython$(VER).so
	cp -p $(buildd_shared)/libpython$(VER)-pic.a \
		$(d_dev)/usr/lib/python$(VER)/config/

	: # Replace all '#!' calls to python with $(PY_INTERPRETER)
	: # and make them executable
	for i in `find debian/python2.4 debian/python2.4-dev -mindepth 3 -type f`; do \
	  sed '1s,#!.*python[^ ]*\(.*\),#! $(PY_INTERPRETER)\1,' \
		$$i > $$i.temp; \
	  if cmp --quiet $$i $$i.temp; then \
	    rm -f $$i.temp; \
	  else \
	    mv -f $$i.temp $$i; \
	    chmod 755 $$i; \
	    echo "fixed interpreter: $$i"; \
	  fi; \
	done

	: # Install menu icon
	dh_installdirs -p$(p_base) usr/share/pixmaps
	cp -p debian/python16.xpm $(d_base)/usr/share/pixmaps/$(PVER)-16.xpm
	cp -p debian/python32.xpm $(d_base)/usr/share/pixmaps/$(PVER)-32.xpm

	: # INDT CHANGES
	: # Remove unneeded modules	
	rm -rf \
		$(d)/$(scriptdir)/idlelib \
		$(d)/$(scriptdir)/lib-tk \
		$(d)/$(scriptdir)/lib-old \
		$(d)/$(scriptdir)/config \
		$(d)/$(scriptdir)/bsddb \
		$(d)/$(scriptdir)/test \
		$(d)/$(scriptdir)/email/test \
		$(d)/$(scriptdir)/aifc.* \
		$(d)/$(scriptdir)/audiodev.* \
		$(d)/$(scriptdir)/SimpleHTTPServer.* \
		$(d)/$(scriptdir)/SimpleXMLRPCServer.* \
		$(d)/$(scriptdir)/CGIHTTPServer.* \
		$(d)/$(scriptdir)/cgi.* \
		$(d)/$(scriptdir)/cgitb.* \
		$(d)/$(scriptdir)/dbhash.* \
		$(d)/$(scriptdir)/curses \
		$(d)/$(scriptdir)/tzparse.* \
		$(d)/$(scriptdir)/posixfile.* \
		$(d)/$(scriptdir)/DocXMLRPCServer.* \
		$(d)/$(scriptdir)/getpass.* \
		$(d)/$(scriptdir)/macpath.* \
		$(d)/$(scriptdir)/macurl2path.* \
		$(d)/$(scriptdir)/mutex.* \
		$(d)/$(scriptdir)/netrc.* \
		$(d)/$(scriptdir)/nturl2path.* \
		$(d)/$(scriptdir)/os2emxpath.* \
		$(d)/$(scriptdir)/pty.* \
		$(d)/$(scriptdir)/pyclbr.* \
		$(d)/$(scriptdir)/regsub.* \
		$(d)/$(scriptdir)/rexec.* \
		$(d)/$(scriptdir)/rlcompleter.* \
		$(d)/$(scriptdir)/robotparser.* \
		$(d)/$(scriptdir)/smtpd.* \
		$(d)/$(scriptdir)/statcache.* \
		$(d)/$(scriptdir)/statvfs.* \
		$(d)/$(scriptdir)/stringold.* \
		$(d)/$(scriptdir)/subprocess.* \
		$(d)/$(scriptdir)/sunaudio.* \
		$(d)/$(scriptdir)/sunau.* \
		$(d)/$(scriptdir)/symtable.* \
		$(d)/$(scriptdir)/tabnanny.* \
		$(d)/$(scriptdir)/telnetlib.* \
		$(d)/$(scriptdir)/this.* \
		$(d)/$(scriptdir)/xmllib.* \
		$(d)/$(scriptdir)/timeit.* \
		$(d)/$(scriptdir)/toaiff.* \
		$(d)/$(scriptdir)/trace.* \
		$(d)/$(scriptdir)/tty.* \
		$(d)/$(scriptdir)/user.* \
		$(d)/$(scriptdir)/whrandom.* \
		$(d)/$(scriptdir)/xdrlib.* \
		$(d)/$(scriptdir)/LICENSE.txt \
		$(d)/$(scriptdir)/lib-dynload/rgbimage.so \
		$(d)/$(scriptdir)/lib-dynload/rgbimg.so \
		$(d)/$(scriptdir)/lib-dynload/audioop.so \
		$(d)/$(scriptdir)/lib-dynload/crypt.so \
		$(d)/$(scriptdir)/lib-dynload/linuxaudiodev.so \
		$(d)/$(scriptdir)/lib-dynload/nis.so \
		$(d)/$(scriptdir)/lib-dynload/mmap.so \
		$(d)/$(scriptdir)/lib-dynload/readline.so \
		$(d)/$(scriptdir)/lib-dynload/ossaudiodev.so \
		$(d)/$(scriptdir)/lib-dynload/syslog.so \
		$(d)/$(scriptdir)/lib-dynload/termios.so 

	: # base
	mkdir -p $(d_base)/$(scriptdir)
	mv $(d)/usr/lib/libpython$(VER).so.* $(d_base)/usr/lib
	cp -a $(d)/$(scriptdir) $(d_base)/usr/lib
	rm -rf $(d_base)/$(scriptdir)/distutils
	rm -rf $(d_base)/$(scriptdir)/pdb.*
	rm -rf $(d_base)/$(scriptdir)/pydoc.*
	rm -rf $(d_base)/$(scriptdir)/BaseHTTPServer.*
	rm -rf $(d_base)/$(scriptdir)/compile*
	rm -rf $(d_base)/$(scriptdir)/encodings/{cp*,mac_*}
	rm -rf $(d_base)/$(scriptdir)/doctest* unittest*
	rm -rf $(d_base)/$(scriptdir)/hotshot
	find $(d_base)/$(scriptdir) -name "*.py" -type f -exec rm -f {} \;
	find $(d_base)/$(scriptdir) -name "*.pyc" -type f -exec rm -f {} \;

	: # modules and dirs outside zip
	mkdir -p $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/site-packages $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/lib-dynload   $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/plat-linux2   $(d_base)/usr/lib/tmp

	mv $(d_base)/$(scriptdir)/site.pyo      $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/os.pyo        $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/posixpath.pyo $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/stat.pyo      $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/UserDict.pyo  $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/copy_reg.pyo  $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/types.pyo     $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/glob.pyo      $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/fnmatch.pyo   $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/{re,sre}.pyo  $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/sre_compile.pyo $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/sre_constants.pyo $(d_base)/usr/lib/tmp
	mv $(d_base)/$(scriptdir)/sre_parse.pyo $(d_base)/usr/lib/tmp

	: # zipping
	(cd $(d_base)/$(scriptdir) && zip -0qr ../python24.zip *)
	find $(d_base)/$(scriptdir) -name "*.pyo" -type f -exec rm -f {} \;

	: # recover saved files
	mv $(d_base)/usr/lib/tmp/* $(d_base)/$(scriptdir)
	rmdir $(d_base)/usr/lib/tmp

	: # dev
	mkdir -p $(d_dev)/$(scriptdir)
	cp -a $(d)/$(scriptdir) $(d_dev)/usr/lib
	rm -rf $(d_dev)/$(scriptdir)/site-packages
	rm -rf $(d_dev)/$(scriptdir)/lib-dynload
	rm -rf $(d_dev)/$(scriptdir)/plat-linux2
	rm -rf $(d_dev)/$(scriptdir)/distutils/*wininst*
	find $(d_dev)/$(scriptdir) -name "*.pyo" -type f -exec rm -f {} \;

	: # generate binfmt file
	mkdir -p $(d_base)/usr/share/binfmts
	$(buildd_static)/python debian/mkbinfmt.py $(PVER) \
		> $(d_base)/usr/share/binfmts/$(PVER)

	: # remove some things
	-find debian -name CVS | xargs rm -rf
	-find debian -name .cvsignore | xargs rm -f

	touch stamp-install


# Build architecture-independent files here.
binary-indep: build install
	dh_testdir -i
	dh_testroot -i

	: # $(p_doc) package
	dh_installdirs -p$(p_doc) \
		usr/share/doc/$(p_base)/html \
		usr/share/doc/$(p_doc) \
		usr/share/info
	cat Doc/html*.tar \
		| (cd $(d_doc)/usr/share/doc/$(p_base)/html; tar xf -)
	-find $(d_doc)/usr/share/doc/$(p_base)/html ! -type d ! -perm 644
	-find $(d_doc)/usr/share/doc/$(p_base)/html ! -type d ! -perm 644 \
		| xargs chmod 644
	mv $(d_doc)/usr/share/doc/$(p_base)/html/Python-Docs*/* \
		$(d_doc)/usr/share/doc/$(p_base)/html/.
	rmdir $(d_doc)/usr/share/doc/$(p_base)/html/Python-Docs*

	cp -p Doc/info/*info* \
		$(d_doc)/usr/share/info/
	dh_link -p$(p_doc) \
		/usr/share/doc/$(p_base)/html /usr/share/doc/$(p_doc)/html

	: # devhelp docs
	$(buildd_static)/python debian/pyhtml2devhelp.py \
		$(d_doc)/usr/share/doc/$(p_base)/html index.html \
		> $(d_doc)/usr/share/doc/$(p_base)/html/$(PVER).devhelp
	gzip -9v $(d_doc)/usr/share/doc/$(p_base)/html/$(PVER).devhelp
	dh_link -p$(p_doc) \
		/usr/share/doc/$(p_base)/html /usr/share/devhelp/books/$(PVER)

	dh_installdebconf -i
	dh_installexamples -i
	dh_installmenu -i
	dh_link -i
	dh_compress -i -X.py -X.cls -X.css -X.txt -Xgdbinit
	dh_fixperms -i

	: # make python scripts starting with '#!' executable
	for i in \
	  `find debian/python2.4 debian/python2.4-dev -mindepth 2 -type f ! -perm 755 ! -name 'sample.*'`; \
	do \
	  if head -1 $$i | grep -q '^#!'; then \
	    chmod 755 $$i; \
	    echo "make executable: $$i"; \
	  fi; \
	done
	-find $(d_doc) -name '*.txt' -perm 755 -exec chmod 644 {} \;

	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir -a
	dh_testroot -a
	dh_installexamples -a
	dh_installmenu -a
	#dh_installinfo -a
	#dh_strip -a
	dh_link -a
	dh_compress -a -X.py
	dh_fixperms -a

	: # make python scripts starting with '#!' executable
	for i in \
	  `find debian/python2.4 debian/python2.4-dev -mindepth 2 -type f ! -perm 755 ! -name 'sample.*'`; \
	do \
	  if head -1 $$i | grep -q '^#!'; then \
	    chmod 755 $$i; \
	    echo "make executable: $$i"; \
	  fi; \
	done

	dh_makeshlibs -a
	dh_installdeb -a
	dh_shlibdeps -a
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a

binary: binary-arch

.PHONY: control-file configure build clean binary-indep binary-arch binary install

# Local Variables:
# mode: makefile
# end:
