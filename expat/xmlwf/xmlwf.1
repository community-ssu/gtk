.\" This -*- nroff -*- file has been generated from
.\" DocBook SGML with docbook-to-man on Debian GNU/Linux.
...\"
...\"	transcript compatibility for postscript use.
...\"
...\"	synopsis:  .P! <file.ps>
...\"
.de P!
\\&.
.fl			\" force out current output buffer
\\!%PB
\\!/showpage{}def
...\" the following is from Ken Flowers -- it prevents dictionary overflows
\\!/tempdict 200 dict def tempdict begin
.fl			\" prolog
.sy cat \\$1\" bring in postscript file
...\" the following line matches the tempdict above
\\!end % tempdict %
\\!PE
\\!.
.sp \\$2u	\" move below the image
..
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
'\" t 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n  
.TH "XMLWF" "1" 
.SH "NAME" 
xmlwf \(em Determines if an XML document is well-formed 
.SH "SYNOPSIS" 
.PP 
\fBxmlwf\fP [\fB-s\fP]  [\fB-n\fP]  [\fB-p\fP]  [\fB-x\fP]  [\fB-e \fIencoding\fP\fP]  [\fB-w\fP]  [\fB-d \fIoutput-dir\fP\fP]  [\fB-c\fP]  [\fB-m\fP]  [\fB-r\fP]  [\fB-t\fP]  [file ...]  
.SH "DESCRIPTION" 
.PP 
\fBxmlwf\fP uses the Expat library to determine 
if an XML document is well-formed.  It is non-validating. 
 
.PP 
If you do not specify any files on the command-line, 
and you have a recent version of xmlwf, the input 
file will be read from stdin. 
 
.SH "WELL-FORMED DOCUMENTS" 
.PP 
A well-formed document must adhere to the 
following rules: 
 
.IP "   \(bu" 6 
The file begins with an XML declaration.  For instance, 
\fB<?xml version="1.0" standalone="yes"?>\fP. 
\fINOTE:\fP xmlwf does not currently 
check for a valid XML declaration. 
 
.IP "   \(bu" 6 
Every start tag is either empty (<tag/>) 
or has a corresponding end tag. 
 
.IP "   \(bu" 6 
There is exactly one root element.  This element must contain 
all other elements in the document.  Only comments, white 
space, and processing instructions may come after the close 
of the root element. 
 
.IP "   \(bu" 6 
All elements nest properly. 
 
.IP "   \(bu" 6 
All attribute values are enclosed in quotes (either single 
or double). 
 
.PP 
If the document has a DTD, and it strictly complies with that 
DTD, then the document is also considered \fIvalid\fP. 
xmlwf is a non-validating parser -- it does not check the DTD. 
However, it does support external entities (see the -x option). 
 
.SH "OPTIONS" 
.PP 
When an option includes an argument, you may specify the argument either 
separate ("d output") or mashed ("-doutput").  xmlwf supports both. 
.IP "\fB-c\fP" 10 
If the input file is well-formed and xmlwf doesn't 
encounter any errors, the input file is simply copied to 
the output directory unchanged. 
This implies no namespaces (turns off -n) and 
requires -d to specify an output file. 
 
.IP "\fB-d output-dir\fP" 10 
Specifies a directory to contain transformed 
representations of the input files. 
By default, -d outputs a canonical representation 
(described below). 
You can select different output formats using -c and -m. 
 
.IP "" 10 
The output filenames will 
be exactly the same as the input filenames or "STDIN" if the input is 
coming from STDIN.  Therefore, you must be careful that the 
output file does not go into the same directory as the input 
file.  Otherwise, xmlwf will delete the input file before 
it generates the output file (just like running 
\fBcat < file > file\fP in most shells). 
 
.IP "" 10 
 
Two structurally equivalent XML documents have a byte-for-byte 
identical canonical XML representation. 
Note that ignorable white space is considered significant and 
is treated equivalently to data. 
More on canonical XML can be found at 
http://www.jclark.com/xml/canonxml.html . 
 
.IP "\fB-e encoding\fP" 10 
Specifies the character encoding for the document, overriding 
any document encoding declaration.  xmlwf 
has four built-in encodings:  
\fBUS-ASCII\fP, 
\fBUTF-8\fP, 
\fBUTF-16\fP, and 
\fBISO-8859-1\fP. 
Also see the -w option. 
 
.IP "\fB-m\fP" 10 
Outputs some strange sort of XML file that completely 
describes the the input file, including character postitions. 
Requires -d to specify an output file. 
 
.IP "\fB-n\fP" 10 
Turns on namespace processing.  (describe namespaces) 
-c disables namespaces. 
 
.IP "\fB-p\fP" 10 
Tells xmlwf to process external DTDs and parameter 
entities. 
 
.IP "" 10 
Normally xmlwf never parses parameter entities. 
-p tells it to always parse them. 
-p implies -x. 
 
.IP "\fB-r\fP" 10 
Normally xmlwf memory-maps the XML file before parsing. 
-r turns off memory-mapping and uses normal file IO calls instead. 
Of course, memory-mapping is automatically turned off 
when reading from STDIN. 
 
.IP "\fB-s\fP" 10 
Prints an error if the document is not standalone.  
A document is standalone if it has no external subset and no 
references to parameter entities. 
 
.IP "\fB-t\fP" 10 
Turns on timings.  This tells Expat to parse the entire file, 
but not perform any processing. 
This gives a fairly accurate idea of the raw speed of Expat itself 
without client overhead. 
-t turns off most of the output options (-d, -m -c, ...) 
 
.IP "\fB-w\fP" 10 
Enables Windows code pages. 
Normally, xmlwf will throw an error if it runs across 
an encoding that it is not equipped to handle itself.  With 
-w, xmlwf will try to use a Windows code page.  See 
also -e. 
 
.IP "\fB-x\fP" 10 
Turns on parsing external entities. 
 
.IP "" 10 
Non-validating parsers are not required to resolve external 
entities, or even expand entities at all. 
Expat always expands internal entities (?), 
but external entity parsing must be enabled explicitly. 
 
.IP "" 10 
External entities are simply entities that obtain their 
data from outside the XML file currently being parsed. 
 
.IP "" 10 
This is an example of an internal entity: 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
<!ENTITY vers '1.0.2'> 
.fi 
 
.IP "" 10 
And here are some examples of external entities: 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
<!ENTITY header SYSTEM "header-&vers;.xml">  (parsed) 
<!ENTITY logo SYSTEM "logo.png" PNG>         (unparsed) 
.fi 
 
 
.IP "\fB--\fP" 10 
For some reason, xmlwf specifically ignores "--" 
anywhere it appears on the command line. 
 
.PP 
Older versions of xmlwf do not support reading from STDIN. 
 
.SH "OUTPUT" 
.PP 
If an input file is not well-formed, xmlwf outputs 
a single line describing the problem to STDOUT. 
If a file is well formed, xmlwf outputs nothing. 
Note that the result code is \fInot\fP set. 
 
.SH "BUGS" 
.PP 
According to the W3C standard, an XML file without a 
declaration at the beginning is not considered well-formed. 
However, xmlwf allows this to pass. 
 
.PP 
xmlwf returns a 0 - noerr result, even if the file is 
not well-formed.  There is no good way for a program to use 
xmlwf to quickly check a file -- it must parse xmlwf's STDOUT. 
 
.PP 
The errors should go to STDERR, not stdout. 
 
.PP 
There should be a way to get -d to send its output to STDOUT 
rather than forcing the user to send it to a file. 
 
.PP 
I have no idea why anyone would want to use the -d, -c 
and -m options.  If someone could explain it to me, I'd 
like to add this information to this manpage. 
 
.SH "ALTERNATIVES" 
.PP 
Here are some XML validators on the web: 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
http://www.hcrc.ed.ac.uk/~richard/xml-check.html 
http://www.stg.brown.edu/service/xmlvalid/ 
http://www.scripting.com/frontier5/xml/code/xmlValidator.html 
http://www.xml.com/pub/a/tools/ruwf/check.html 
\     (on a page with no less than 15 ads!  Shame!) 
.fi 
 
 
.SH "SEE ALSO" 
.PP 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
The Expat home page:        http://expat.sourceforge.net/ 
The W3 XML specification:   http://www.w3.org/TR/REC-xml 
.fi 
 
 
.SH "AUTHOR" 
.PP 
This manual page was written by Scott Bronson bronson@rinspin.com for 
the \fBDebian GNU/Linux\fP system (but may be used by others).  Permission is 
granted to copy, distribute and/or modify this document under 
the terms of the GNU Free Documentation 
License, Version 1.1. 
 
...\" created by instant / docbook-to-man, Sun 02 Dec 2001, 13:56 
