# Copyright 2005 Nokia
# Licensed under the same license as the package fontconfig
diff -Naur fontconfig/fc-glyphname/fc-glyphname.c fontconfig-2.3.1-const/fc-glyphname/fc-glyphname.c
--- fontconfig/fc-glyphname/fc-glyphname.c	2004-12-07 03:14:45.000000000 +0200
+++ fontconfig-2.3.1-const/fc-glyphname/fc-glyphname.c	2005-03-16 16:26:41.000000000 +0200
@@ -215,7 +215,7 @@
 {
     int	i;
     
-    printf ("static FcGlyphName	*%s[%d] = {\n", name, hash);
+    printf ("static const FcGlyphName  *%s[%d] = {\n", name, hash);
 
     for (i = 0; i < hash; i++)
 	if (table[i])
@@ -284,7 +284,7 @@
      */
     
     for (i = 0; i < nraw; i++)
-	printf ("static struct { FcChar32 ucs; FcChar8 name[%d]; }"
+	printf ("static const struct { const FcChar32 ucs; const FcChar8 name[%d]; }"
 	        " glyph%d = { 0x%lx, \"%s\" };\n",
 	        (int) strlen (raw[i]->name) + 1,
 		i, (unsigned long) raw[i]->ucs, raw[i]->name);
diff -Naur fontconfig/src/fcfreetype.c fontconfig-2.3.1-const/src/fcfreetype.c
--- fontconfig/src/fcfreetype.c	2005-03-06 01:48:32.000000000 +0200
+++ fontconfig-2.3.1-const/src/fcfreetype.c	2005-03-16 16:17:32.000000000 +0200
@@ -111,9 +111,9 @@
 }
 
 typedef struct {
-    FT_UShort	platform_id;
-    FT_UShort	encoding_id;
-    char	*fromcode;
+    const FT_UShort    platform_id;
+    const FT_UShort    encoding_id;
+    const char fromcode[10];
 } FcFtEncoding;
 
 #define TT_ENCODING_DONT_CARE	0xffff
@@ -138,15 +138,15 @@
 #define NUM_FC_FT_ENCODING  (sizeof (fcFtEncoding) / sizeof (fcFtEncoding[0]))
 
 typedef struct {
-    FT_UShort	platform_id;
-    FT_UShort	language_id;
-    char	*lang;
+    const FT_UShort    platform_id;
+    const FT_UShort    language_id;
+    const char lang[5];
 } FcFtLanguage;
 
 #define TT_LANGUAGE_DONT_CARE	0xffff
 
 static const FcFtLanguage   fcFtLanguage[] = {
- {  TT_PLATFORM_APPLE_UNICODE,	TT_LANGUAGE_DONT_CARE,		    0 },
+ {  TT_PLATFORM_APPLE_UNICODE, TT_LANGUAGE_DONT_CARE,              "\0" },
  {  TT_PLATFORM_MACINTOSH,	TT_MAC_LANGID_ENGLISH,		    "en" },
  {  TT_PLATFORM_MACINTOSH,	TT_MAC_LANGID_FRENCH,		    "fr" },
  {  TT_PLATFORM_MACINTOSH,	TT_MAC_LANGID_GERMAN,		    "de" },
@@ -571,7 +571,7 @@
 FcSfntNameTranscode (FT_SfntName *sname)
 {
     int	    i;
-    char    *fromcode;
+    const char    *fromcode;
 #if USE_ICONV
     iconv_t cd;
 #endif
@@ -736,7 +736,7 @@
     return utf8;
 }
 
-static FcChar8 *
+static const FcChar8 *
 FcSfntNameLanguage (FT_SfntName *sname)
 {
     int i;
@@ -1067,7 +1067,7 @@
     for (snamei = 0; snamei < snamec; snamei++)
     {
 	FcChar8		*utf8;
-	FcChar8		*lang;
+	const FcChar8	*lang;
 	char		*elt = 0, *eltlang = 0;
 	int		*np = 0, *nlangp = 0;
 
@@ -2199,12 +2199,12 @@
     return FcFalse;
 }
 
-static FcChar8 *
+static const FcChar8 *
 FcUcs4ToGlyphName (FcChar32 ucs4)
 {
     int		i = (int) (ucs4 % FC_GLYPHNAME_HASH);
     int		r = 0;
-    FcGlyphName	*gn;
+    const FcGlyphName  *gn;
 
     while ((gn = ucs_to_name[i]))
     {
@@ -2223,13 +2223,13 @@
     return 0;
 }
 
-static FcChar32
+static const FcChar32
 FcGlyphNameToUcs4 (FcChar8 *name)
 {
     FcChar32	h = FcHashGlyphName (name);
     int		i = (int) (h % FC_GLYPHNAME_HASH);
     int		r = 0;
-    FcGlyphName	*gn;
+    const FcGlyphName	*gn;
 
     while ((gn = name_to_ucs[i]))
     {
@@ -2254,7 +2254,7 @@
  * any defined order within the font
  */
 static FT_UInt
-FcFreeTypeGlyphNameIndex (FT_Face face, FcChar8 *name)
+FcFreeTypeGlyphNameIndex (FT_Face face, const FcChar8 *name)
 {
     FT_UInt gindex;
     FcChar8 name_buf[FC_GLYPHNAME_MAXLEN + 2];
@@ -2321,7 +2321,7 @@
      */
     if (FcFreeTypeUseNames (face))
     {
-	FcChar8	*name = FcUcs4ToGlyphName (ucs4);
+	const FcChar8 *name = FcUcs4ToGlyphName (ucs4);
 	if (name)
 	{
 	    glyphindex = FcFreeTypeGlyphNameIndex (face, name);
diff -Naur fontconfig/src/fclang.c fontconfig-2.3.1-const/src/fclang.c
--- fontconfig/src/fclang.c	2004-12-06 21:25:20.000000000 +0200
+++ fontconfig-2.3.1-const/src/fclang.c	2005-03-16 16:18:36.000000000 +0200
@@ -25,8 +25,8 @@
 #include "fcint.h"
 
 typedef struct {
-    FcChar8	*lang;
-    FcCharSet	charset;
+    const FcChar8 *lang;
+    const FcCharSet charset;
 } FcLangCharSet;
 
 typedef struct {
