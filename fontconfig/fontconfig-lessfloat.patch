diff -Naur fontconfig/src/fcmatch.c fontconfig-2.3.95_lessfloat/src/fcmatch.c
--- fontconfig/src/fcmatch.c	2006-04-25 08:51:35.000000000 +0300
+++ fontconfig-2.3.95_lessfloat/src/fcmatch.c	2006-07-07 17:16:13.000000000 +0300
@@ -27,30 +27,30 @@
 #include <ctype.h>
 #include <stdio.h>
 
-static double
+static int
 FcCompareNumber (FcValue *value1, FcValue *value2)
 {
-    double  v1, v2, v;
+    int  v1, v2, v;
     
     switch (value1->type) {
     case FcTypeInteger:
-	v1 = (double) value1->u.i;
+	v1 = value1->u.i;
 	break;
     case FcTypeDouble:
-	v1 = value1->u.d;
+	v1 = (int)value1->u.d;
 	break;
     default:
-	return -1.0;
+	return -1;
     }
     switch (value2->type) {
     case FcTypeInteger:
-	v2 = (double) value2->u.i;
+	v2 = value2->u.i;
 	break;
     case FcTypeDouble:
-	v2 = value2->u.d;
+	v2 = (int)value2->u.d;
 	break;
     default:
-	return -1.0;
+	return -1;
     }
     v = v2 - v1;
     if (v < 0)
@@ -58,13 +58,13 @@
     return v;
 }
 
-static double
+static int
 FcCompareString (FcValue *v1, FcValue *v2)
 {
-    return (double) FcStrCmpIgnoreCase (fc_value_string(v1), fc_value_string(v2)) != 0;
+    return (int) FcStrCmpIgnoreCase (fc_value_string(v1), fc_value_string(v2)) != 0;
 }
 
-static double
+static int
 FcCompareFamily (FcValue *v1, FcValue *v2)
 {
     /* rely on the guarantee in FcPatternAddWithBinding that
@@ -73,12 +73,12 @@
     const FcChar8* v2_string = fc_value_string(v2);
 
     if (FcToLower(*v1_string) != FcToLower(*v2_string))
-       return 1.0;
+       return 1;
 
-    return (double) FcStrCmpIgnoreBlanksAndCase (v1_string, v2_string) != 0;
+    return (int) FcStrCmpIgnoreBlanksAndCase (v1_string, v2_string) != 0;
 }
 
-static double
+static int
 FcCompareLang (FcValue *v1, FcValue *v2)
 {
     FcLangResult    result;
@@ -95,7 +95,7 @@
 				       value2.u.s);
 	    break;
 	default:
-	    return -1.0;
+	    return -1;
 	}
 	break;
     case FcTypeString:
@@ -108,11 +108,11 @@
 				    value2.u.s);
 	    break;
 	default:
-	    return -1.0;
+	    return -1;
 	}
 	break;
     default:
-	return -1.0;
+	return -1;
     }
     switch (result) {
     case FcLangEqual:
@@ -125,31 +125,31 @@
     }
 }
 
-static double
+static int
 FcCompareBool (FcValue *v1, FcValue *v2)
 {
     if (fc_storage_type(v2) != FcTypeBool || fc_storage_type(v1) != FcTypeBool)
-	return -1.0;
-    return (double) v2->u.b != v1->u.b;
+	return -1;
+    return (int) v2->u.b != v1->u.b;
 }
 
-static double
+static int
 FcCompareCharSet (FcValue *v1, FcValue *v2)
 {
-    return (double) FcCharSetSubtractCount (fc_value_charset(v1), fc_value_charset(v2));
+    return (int) FcCharSetSubtractCount (fc_value_charset(v1), fc_value_charset(v2));
 }
 
-static double
+static int
 FcCompareSize (FcValue *value1, FcValue *value2)
 {
-    double  v1, v2, v;
+    int  v1, v2, v;
 
     switch (value1->type) {
     case FcTypeInteger:
 	v1 = value1->u.i;
 	break;
     case FcTypeDouble:
-	v1 = value1->u.d;
+	v1 = (int)value1->u.d;
 	break;
     default:
 	return -1;
@@ -159,7 +159,7 @@
 	v2 = value2->u.i;
 	break;
     case FcTypeDouble:
-	v2 = value2->u.d;
+	v2 = (int)value2->u.d;
 	break;
     default:
 	return -1;
@@ -175,7 +175,7 @@
 typedef struct _FcMatcher {
     const char	    *object;
     FcObjectPtr	    objectPtr;
-    double	    (*compare) (FcValue *value1, FcValue *value2);
+    int		    (*compare) (FcValue *value1, FcValue *value2);
     int		    strong, weak;
 } FcMatcher;
 
@@ -343,7 +343,7 @@
 {
     FcValueListPtr  v1, v2;
     FcValueList     *v1_ptrU, *v2_ptrU;
-    double    	    v, best, bestStrong, bestWeak;
+    int    	    v, best, bestStrong, bestWeak;
     int		    j;
     const char	    *object = FcObjectPtrU(o);
     FcMatcher       *match = FcObjectPtrToMatcher(o);
@@ -355,9 +355,9 @@
 	return FcTrue;
     }
 
-    best = 1e99;
-    bestStrong = 1e99;
-    bestWeak = 1e99;
+    best = INT_MAX;
+    bestStrong = INT_MAX;
+    bestWeak = INT_MAX;
     j = 0;
     for (v1 = v1orig, v1_ptrU = FcValueListPtrU(v1); v1_ptrU;
 	 v1 = v1_ptrU->next, v1_ptrU = FcValueListPtrU(v1))
@@ -393,7 +393,7 @@
     }
     if (FcDebug () & FC_DBG_MATCHV)
     {
-	printf (" %s: %g ", object, best);
+	printf (" %s: %d ", object, best);
 	FcValueListPrint (v1orig);
 	printf (", ");
 	FcValueListPrint (v2orig);
