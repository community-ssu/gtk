diff -ur dbus-0.23.1/dbus/dbus-pending-call.c dbus-0.23.1.new/dbus/dbus-pending-call.c
--- dbus-0.23.1/dbus/dbus-pending-call.c	2005-04-26 10:12:29.000000000 +0300
+++ dbus-0.23.1.new/dbus/dbus-pending-call.c	2005-05-19 10:59:45.526027600 +0300
@@ -258,6 +258,29 @@
 }
 
 /**
+ * Gets the reply, or returns #NULL if none has been received
+ * yet. Ownership of the reply message passes to the caller. This
+ * function can only be called once per pending call, since the reply
+ * message is tranferred to the caller.
+ *
+ * @param pending the pending call
+ * @returns the reply message or #NULL.
+ */
+DBusMessage*
+dbus_pending_call_steal_reply (DBusPendingCall *pending)
+{
+  DBusMessage *message;
+
+  _dbus_return_val_if_fail (pending->completed, NULL);
+  _dbus_return_val_if_fail (pending->reply != NULL, NULL);
+
+  message = pending->reply;
+  pending->reply = NULL;
+
+  return message;
+}
+
+/**
  * Gets the reply, or returns #NULL if none has been received yet. The
  * reference count is not incremented on the returned message, so you
  * have to keep a reference count on the pending call (or add one
diff -ur dbus-0.23.1/dbus/dbus-pending-call.h dbus-0.23.1.new/dbus/dbus-pending-call.h
--- dbus-0.23.1/dbus/dbus-pending-call.h	2005-04-26 10:12:29.000000000 +0300
+++ dbus-0.23.1.new/dbus/dbus-pending-call.h	2005-05-19 11:00:46.712725808 +0300
@@ -42,6 +42,7 @@
 void         dbus_pending_call_cancel        (DBusPendingCall               *pending);
 dbus_bool_t  dbus_pending_call_get_completed (DBusPendingCall               *pending);
 DBusMessage* dbus_pending_call_get_reply     (DBusPendingCall               *pending);
+DBusMessage* dbus_pending_call_steal_reply   (DBusPendingCall               *pending);
 void         dbus_pending_call_block         (DBusPendingCall               *pending);
 
 dbus_bool_t dbus_pending_call_allocate_data_slot (dbus_int32_t     *slot_p);
