<refentry id="atk-AtkMisc">
<refmeta>
<refentrytitle>AtkMisc</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>ATK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AtkMisc</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



            <link linkend="AtkMisc">AtkMisc</link>;
<link linkend="void">void</link>        <link linkend="atk-misc-threads-enter">atk_misc_threads_enter</link>          (<link linkend="AtkMisc">AtkMisc</link> *misc);
<link linkend="void">void</link>        <link linkend="atk-misc-threads-leave">atk_misc_threads_leave</link>          (<link linkend="AtkMisc">AtkMisc</link> *misc);
const <link linkend="AtkMisc">AtkMisc</link>* <link linkend="atk-misc-get-instance">atk_misc_get_instance</link>        (void);

</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AtkMisc"/>AtkMisc</title>
<indexterm><primary>AtkMisc</primary></indexterm><programlisting>typedef struct {
  GObject parent;
} AtkMisc;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="atk-misc-threads-enter"/>atk_misc_threads_enter ()</title>
<indexterm role="ATK 1.13"><primary>atk_misc_threads_enter</primary></indexterm><programlisting><link linkend="void">void</link>        atk_misc_threads_enter          (<link linkend="AtkMisc">AtkMisc</link> *misc);</programlisting>
<para>
Take the thread mutex for the GUI toolkit, 
if one exists. 
(This method is implemented by the toolkit ATK implementation layer;
 for instance, for GTK+, GAIL implements this via GDK_THREADS_ENTER).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>misc</parameter>&nbsp;:</term>
<listitem><simpara> an AtkMisc instance for this application. 
</simpara></listitem></varlistentry>
</variablelist><para>Since  ATK 1.13

</para></refsect2>
<refsect2>
<title><anchor id="atk-misc-threads-leave"/>atk_misc_threads_leave ()</title>
<indexterm role="ATK 1.13"><primary>atk_misc_threads_leave</primary></indexterm><programlisting><link linkend="void">void</link>        atk_misc_threads_leave          (<link linkend="AtkMisc">AtkMisc</link> *misc);</programlisting>
<para>
Release the thread mutex for the GUI toolkit, 
if one exists. This method, and atk_misc_threads_enter, 
are needed in some situations by threaded application code which 
services ATK requests, since fulfilling ATK requests often
requires calling into the GUI toolkit.  If a long-running or
potentially blocking call takes place inside such a block, it should
be bracketed by atk_misc_threads_leave/atk_misc_threads_enter calls.
(This method is implemented by the toolkit ATK implementation layer;
 for instance, for GTK+, GAIL implements this via GDK_THREADS_LEAVE).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>misc</parameter>&nbsp;:</term>
<listitem><simpara> an AtkMisc instance for this application. 
</simpara></listitem></varlistentry>
</variablelist><para>Since  ATK 1.13

</para></refsect2>
<refsect2>
<title><anchor id="atk-misc-get-instance"/>atk_misc_get_instance ()</title>
<indexterm role="ATK 1.13"><primary>atk_misc_get_instance</primary></indexterm><programlisting>const <link linkend="AtkMisc">AtkMisc</link>* atk_misc_get_instance        (void);</programlisting>
<para>
Obtain the singleton instance of AtkMisc for this application.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The singleton instance of AtkMisc for this application.

</simpara></listitem></varlistentry>
</variablelist><para>Since  ATK 1.13

</para></refsect2>

</refsect1>




</refentry>
