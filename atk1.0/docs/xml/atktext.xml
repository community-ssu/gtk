<refentry id="AtkText">
<refmeta>
<refentrytitle>AtkText</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>ATK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AtkText</refname><refpurpose>The ATK interface implemented by components with text content.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



            <link linkend="AtkText-struct">AtkText</link>;
enum        <link linkend="AtkTextBoundary">AtkTextBoundary</link>;
enum        <link linkend="AtkTextClipType">AtkTextClipType</link>;
            <link linkend="AtkTextRange">AtkTextRange</link>;
            <link linkend="AtkTextRectangle">AtkTextRectangle</link>;
            <link linkend="AtkAttribute">AtkAttribute</link>;
typedef     <link linkend="AtkAttributeSet">AtkAttributeSet</link>;
enum        <link linkend="AtkTextAttribute">AtkTextAttribute</link>;
<link linkend="gchar">gchar</link>*      <link linkend="atk-text-get-text">atk_text_get_text</link>               (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);
<link linkend="gunichar">gunichar</link>    <link linkend="atk-text-get-character-at-offset">atk_text_get_character_at_offset</link>
                                            (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset);
<link linkend="gchar">gchar</link>*      <link linkend="atk-text-get-text-after-offset">atk_text_get_text_after_offset</link>  (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);
<link linkend="gchar">gchar</link>*      <link linkend="atk-text-get-text-at-offset">atk_text_get_text_at_offset</link>     (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);
<link linkend="gchar">gchar</link>*      <link linkend="atk-text-get-text-before-offset">atk_text_get_text_before_offset</link> (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);
<link linkend="gint">gint</link>        <link linkend="atk-text-get-caret-offset">atk_text_get_caret_offset</link>       (<link linkend="AtkText">AtkText</link> *text);
<link linkend="void">void</link>        <link linkend="atk-text-get-character-extents">atk_text_get_character_extents</link>  (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y,
                                             <link linkend="gint">gint</link> *width,
                                             <link linkend="gint">gint</link> *height,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coords);
<link linkend="AtkAttributeSet">AtkAttributeSet</link>* <link linkend="atk-text-get-run-attributes">atk_text_get_run_attributes</link>
                                            (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);
<link linkend="AtkAttributeSet">AtkAttributeSet</link>* <link linkend="atk-text-get-default-attributes">atk_text_get_default_attributes</link>
                                            (<link linkend="AtkText">AtkText</link> *text);
<link linkend="gint">gint</link>        <link linkend="atk-text-get-character-count">atk_text_get_character_count</link>    (<link linkend="AtkText">AtkText</link> *text);
<link linkend="gint">gint</link>        <link linkend="atk-text-get-offset-at-point">atk_text_get_offset_at_point</link>    (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coords);
<link linkend="AtkTextRange">AtkTextRange</link>** <link linkend="atk-text-get-bounded-ranges">atk_text_get_bounded_ranges</link>  (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="AtkTextRectangle">AtkTextRectangle</link> *rect,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coord_type,
                                             <link linkend="AtkTextClipType">AtkTextClipType</link> x_clip_type,
                                             <link linkend="AtkTextClipType">AtkTextClipType</link> y_clip_type);
<link linkend="void">void</link>        <link linkend="atk-text-get-range-extents">atk_text_get_range_extents</link>      (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coord_type,
                                             <link linkend="AtkTextRectangle">AtkTextRectangle</link> *rect);
<link linkend="void">void</link>        <link linkend="atk-text-free-ranges">atk_text_free_ranges</link>            (<link linkend="AtkTextRange">AtkTextRange</link> **ranges);
<link linkend="gint">gint</link>        <link linkend="atk-text-get-n-selections">atk_text_get_n_selections</link>       (<link linkend="AtkText">AtkText</link> *text);
<link linkend="gchar">gchar</link>*      <link linkend="atk-text-get-selection">atk_text_get_selection</link>          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-text-add-selection">atk_text_add_selection</link>          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-text-remove-selection">atk_text_remove_selection</link>       (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-text-set-selection">atk_text_set_selection</link>          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-text-set-caret-offset">atk_text_set_caret_offset</link>       (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset);
<link linkend="void">void</link>        <link linkend="atk-attribute-set-free">atk_attribute_set_free</link>          (<link linkend="AtkAttributeSet">AtkAttributeSet</link> *attrib_set);
<link linkend="AtkTextAttribute">AtkTextAttribute</link> <link linkend="atk-text-attribute-register">atk_text_attribute_register</link>
                                            (const <link linkend="gchar">gchar</link> *name);
const <link linkend="gchar">gchar</link>* <link linkend="atk-text-attribute-get-name">atk_text_attribute_get_name</link>    (<link linkend="AtkTextAttribute">AtkTextAttribute</link> attr);
<link linkend="AtkTextAttribute">AtkTextAttribute</link> <link linkend="atk-text-attribute-for-name">atk_text_attribute_for_name</link>
                                            (const <link linkend="gchar">gchar</link> *name);
const <link linkend="gchar">gchar</link>* <link linkend="atk-text-attribute-get-value">atk_text_attribute_get_value</link>   (<link linkend="AtkTextAttribute">AtkTextAttribute</link> attr,
                                             <link linkend="gint">gint</link> index_);

</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GInterface">GInterface</link>
   +----AtkText
</synopsis>

</refsect1>




<refsect1>
<title>Known Implementations</title>
<para>
AtkText is implemented by
 <link linkend="AtkNoOpObject">AtkNoOpObject</link>.</para>

</refsect1>


<refsect1>
<title>Signal Prototypes</title>
<synopsis>

&quot;<link linkend="AtkText-text-attributes-changed">text-attributes-changed</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="AtkText">AtkText</link> *atktext,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="AtkText-text-caret-moved">text-caret-moved</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="AtkText">AtkText</link> *atktext,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="AtkText-text-changed">text-changed</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="AtkText">AtkText</link> *atktext,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="gint">gint</link> arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="AtkText-text-selection-changed">text-selection-changed</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="AtkText">AtkText</link> *atktext,
                                            <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsect1>


<refsect1>
<title>Description</title>
<para>
<link linkend="AtkText"><type>AtkText</type></link> should be implemented by <link linkend="AtkObjects"><type>AtkObjects</type></link> on behalf of widgets that
have text content which is either attributed or otherwise non-trivial.
<link linkend="AtkObjects"><type>AtkObjects</type></link> whose text content is simple, unattributed, and very brief
may expose that content via <link linkend="atk-object-get-name"><type>atk_object_get_name</type></link> instead; however if the
text is editable, multi-line, typically longer than three or four words,
attributed, selectable, or if the object already uses the 'name' ATK
property for other information, the <link linkend="AtkText"><type>AtkText</type></link> interface should be used
to expose the text content.  In the case of editable text content,
<link linkend="AtkEditableText"><type>AtkEditableText</type></link> (a subtype of the <link linkend="AtkText"><type>AtkText</type></link> interface) should be
implemented instead.
</para>
<para>
<link linkend="AtkText"><type>AtkText</type></link> provides not only traversal facilities and change notification
for text content, but also caret tracking and glyph bounding box
calculations.  Note that the text strings are exposed as UTF-8, and are
therefore potentially multi-byte, and caret-to-byte offset mapping makes
no assumptions about the character length; also bounding box
glyph-to-offset mapping may be complex for languages which use ligatures.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AtkText-struct"/>AtkText</title>
<indexterm><primary>AtkText</primary></indexterm><programlisting>typedef struct _AtkText AtkText;</programlisting>
<para>
The AtkText structure does not contain any fields.

</para></refsect2>
<refsect2>
<title><anchor id="AtkTextBoundary"/>enum AtkTextBoundary</title>
<indexterm><primary>AtkTextBoundary</primary></indexterm><programlisting>typedef enum {
  ATK_TEXT_BOUNDARY_CHAR,
  ATK_TEXT_BOUNDARY_WORD_START,
  ATK_TEXT_BOUNDARY_WORD_END,
  ATK_TEXT_BOUNDARY_SENTENCE_START,
  ATK_TEXT_BOUNDARY_SENTENCE_END,
  ATK_TEXT_BOUNDARY_LINE_START,
  ATK_TEXT_BOUNDARY_LINE_END
} AtkTextBoundary;
</programlisting>
<para>
Text boundary types used for specifying boundaries for regions of text</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>ATK_TEXT_BOUNDARY_CHAR</literal></term>
<listitem><simpara> Boundary is the boundary between characters 
(including non-printing characters)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_BOUNDARY_WORD_START</literal></term>
<listitem><simpara> Boundary is the start (i.e. first character) of a word. 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_BOUNDARY_WORD_END</literal></term>
<listitem><simpara> Boundary is the end (i.e. last character) of a word.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_BOUNDARY_SENTENCE_START</literal></term>
<listitem><simpara> Boundary is the first character in a sentence.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_BOUNDARY_SENTENCE_END</literal></term>
<listitem><simpara> Boundary is the last (terminal) character in a sentence; 
in languages which use "sentence stop" punctuation such as English, the boundary is thus the
'.', '?', or similar terminal punctuation character.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_BOUNDARY_LINE_START</literal></term>
<listitem><simpara> Boundary is the initial character of the content or a 
character immediately following a newline, linefeed, or return character.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_BOUNDARY_LINE_END</literal></term>
<listitem><simpara> Boundary is the linefeed, or return character.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkTextClipType"/>enum AtkTextClipType</title>
<indexterm><primary>AtkTextClipType</primary></indexterm><programlisting>typedef enum {
    ATK_TEXT_CLIP_NONE,
    ATK_TEXT_CLIP_MIN,
    ATK_TEXT_CLIP_MAX,
    ATK_TEXT_CLIP_BOTH
} AtkTextClipType;
</programlisting>
<para>
Describes the type of clipping required.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>ATK_TEXT_CLIP_NONE</literal></term>
<listitem><simpara> No clipping to be done
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_CLIP_MIN</literal></term>
<listitem><simpara> Text clipped by min coordinate is omitted
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_CLIP_MAX</literal></term>
<listitem><simpara> Text clipped by max coordinate is omitted
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_CLIP_BOTH</literal></term>
<listitem><simpara> Only text fully within mix/max bound is retained
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkTextRange"/>AtkTextRange</title>
<indexterm><primary>AtkTextRange</primary></indexterm><programlisting>typedef struct {
  AtkTextRectangle bounds;
  gint start_offset;
  gint end_offset;
  gchar* content;
} AtkTextRange;
</programlisting>
<para>
A structure used to describe a text range.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="AtkTextRectangle">AtkTextRectangle</link>&nbsp;<structfield>bounds</structfield>;</term>
<listitem><simpara> A rectangle giving the bounds of the text range
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&nbsp;<structfield>start_offset</structfield>;</term>
<listitem><simpara> The start offset of a AtkTextRange
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&nbsp;<structfield>end_offset</structfield>;</term>
<listitem><simpara> The end offset of a AtkTextRange
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&nbsp;*<structfield>content</structfield>;</term>
<listitem><simpara> The text in the text range
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkTextRectangle"/>AtkTextRectangle</title>
<indexterm><primary>AtkTextRectangle</primary></indexterm><programlisting>typedef struct {
  gint x;
  gint y;
  gint width;
  gint height;
} AtkTextRectangle;
</programlisting>
<para>
A structure used to store a rectangle used by AtkText.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gint">gint</link>&nbsp;<structfield>x</structfield>;</term>
<listitem><simpara> The horizontal coordinate of a rectangle
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&nbsp;<structfield>y</structfield>;</term>
<listitem><simpara> The vertical coordinate of a rectangle
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&nbsp;<structfield>width</structfield>;</term>
<listitem><simpara> The width of a rectangle
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&nbsp;<structfield>height</structfield>;</term>
<listitem><simpara> The height of a rectangle
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkAttribute"/>AtkAttribute</title>
<indexterm><primary>AtkAttribute</primary></indexterm><programlisting>typedef struct {
  gchar* name;
  gchar* value;
} AtkAttribute;
</programlisting>
<para>
A string name/value pair representing a text attribute.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gchar">gchar</link>&nbsp;*<structfield>name</structfield>;</term>
<listitem><simpara> The attribute name. Call <link linkend="atk-text-attr-get-name"><function>atk_text_attr_get_name()</function></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&nbsp;*<structfield>value</structfield>;</term>
<listitem><simpara> the value of the attribute, represented as a string. 
Call <link linkend="atk-text-attr-get-value"><function>atk_text_attr_get_value()</function></link> for those which are strings.
For values which are numbers, the string representation of the number 
is in value.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkAttributeSet"/>AtkAttributeSet</title>
<indexterm><primary>AtkAttributeSet</primary></indexterm><programlisting>typedef GSList AtkAttributeSet;
</programlisting>
<para>
This is a singly-linked list (a <link linkend="GSList"><type>GSList</type></link>) of <link linkend="AtkAttribute"><type>AtkAttribute</type></link>. It is
used by <link linkend="atk-text-get-run-attributes"><function>atk_text_get_run_attributes()</function></link>, <link linkend="atk-text-get-default-attributes"><function>atk_text_get_default_attributes()</function></link>
and <link linkend="atk-editable-text-set-run-attributes"><function>atk_editable_text_set_run_attributes()</function></link></para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkTextAttribute"/>enum AtkTextAttribute</title>
<indexterm><primary>AtkTextAttribute</primary></indexterm><programlisting>typedef enum
{
  ATK_TEXT_ATTR_INVALID = 0,
  ATK_TEXT_ATTR_LEFT_MARGIN,
  ATK_TEXT_ATTR_RIGHT_MARGIN,
  ATK_TEXT_ATTR_INDENT,
  ATK_TEXT_ATTR_INVISIBLE,
  ATK_TEXT_ATTR_EDITABLE,
  ATK_TEXT_ATTR_PIXELS_ABOVE_LINES,
  ATK_TEXT_ATTR_PIXELS_BELOW_LINES,
  ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP,
  ATK_TEXT_ATTR_BG_FULL_HEIGHT,
  ATK_TEXT_ATTR_RISE,
  ATK_TEXT_ATTR_UNDERLINE,
  ATK_TEXT_ATTR_STRIKETHROUGH,
  ATK_TEXT_ATTR_SIZE,
  ATK_TEXT_ATTR_SCALE,
  ATK_TEXT_ATTR_WEIGHT,
  ATK_TEXT_ATTR_LANGUAGE,
  ATK_TEXT_ATTR_FAMILY_NAME,
  ATK_TEXT_ATTR_BG_COLOR,
  ATK_TEXT_ATTR_FG_COLOR,
  ATK_TEXT_ATTR_BG_STIPPLE,
  ATK_TEXT_ATTR_FG_STIPPLE,
  ATK_TEXT_ATTR_WRAP_MODE,
  ATK_TEXT_ATTR_DIRECTION,
  ATK_TEXT_ATTR_JUSTIFICATION,
  ATK_TEXT_ATTR_STRETCH,
  ATK_TEXT_ATTR_VARIANT,
  ATK_TEXT_ATTR_STYLE,
  ATK_TEXT_ATTR_LAST_DEFINED
} AtkTextAttribute;
</programlisting>
<para>
Describes the text attributes supported</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>ATK_TEXT_ATTR_INVALID</literal></term>
<listitem><simpara> Invalid attribute
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_LEFT_MARGIN</literal></term>
<listitem><simpara> The pixel width of the left margin
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_RIGHT_MARGIN</literal></term>
<listitem><simpara> The pixel width of the right margin
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_INDENT</literal></term>
<listitem><simpara> The number of pixels that the text is indented
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_INVISIBLE</literal></term>
<listitem><simpara> Either "true" or "false" indicating whether text is visible or not
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_EDITABLE</literal></term>
<listitem><simpara> Either "true" or "false" indicating whether text is editable or not
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_PIXELS_ABOVE_LINES</literal></term>
<listitem><simpara> Pixels of blank space to leave above each newline-terminated line. 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_PIXELS_BELOW_LINES</literal></term>
<listitem><simpara> Pixels of blank space to leave below each newline-terminated line.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP</literal></term>
<listitem><simpara> Pixels of blank space to leave between wrapped lines inside the same newline-terminated line (paragraph).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_BG_FULL_HEIGHT</literal></term>
<listitem><simpara> "true" or "false" whether to make the background color for each character the height of the highest font used on the current line, or the height of the font used for the current character.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_RISE</literal></term>
<listitem><simpara> Number of pixels that the characters are risen above the baseline
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_UNDERLINE</literal></term>
<listitem><simpara> "none", "single", "double" or "low"
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_STRIKETHROUGH</literal></term>
<listitem><simpara> "true" or "false" whether the text is strikethrough 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_SIZE</literal></term>
<listitem><simpara> The size of the characters. 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_SCALE</literal></term>
<listitem><simpara> The scale of the characters. The value is a string representation of a double 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_WEIGHT</literal></term>
<listitem><simpara> The weight of the characters.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_LANGUAGE</literal></term>
<listitem><simpara> The language used
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_FAMILY_NAME</literal></term>
<listitem><simpara> The font family name
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_BG_COLOR</literal></term>
<listitem><simpara> The background color. The value is an RGB value of the format "<literal>u</literal>,<literal>u</literal>,<literal>u</literal>"
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_FG_COLOR</literal></term>
<listitem><simpara>The foreground color. The value is an RGB value of the format "<literal>u</literal>,<literal>u</literal>,<literal>u</literal>"
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_BG_STIPPLE</literal></term>
<listitem><simpara> "true" if a <link linkend="GdkBitmap"><type>GdkBitmap</type></link> is set for stippling the background color.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_FG_STIPPLE</literal></term>
<listitem><simpara> "true" if a <link linkend="GdkBitmap"><type>GdkBitmap</type></link> is set for stippling the foreground color.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_WRAP_MODE</literal></term>
<listitem><simpara> The wrap mode of the text, if any. Values are "none", "char" or "word" 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_DIRECTION</literal></term>
<listitem><simpara> The direction of the text, if set. Values are "none", "ltr" or "rtl" 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_JUSTIFICATION</literal></term>
<listitem><simpara> The justification of the text, if set. Values are "left", "right", "center" or "fill" 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_STRETCH</literal></term>
<listitem><simpara> The stretch of the text, if set. Values are "ultra_condensed", "extra_condensed", "condensed", "semi_condensed", "normal", "semi_expanded", "expanded", "extra_expanded" or "ultra_expanded"
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_VARIANT</literal></term>
<listitem><simpara> The capitalization variant of the text, if set. Values are "normal" or "small_caps"
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_STYLE</literal></term>
<listitem><simpara> The slant style of the text, if set. Values are "normal", "oblique" or "italic"
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_TEXT_ATTR_LAST_DEFINED</literal></term>
<listitem><simpara> not a valid text attribute, used for finding end of enumeration
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-text"/>atk_text_get_text ()</title>
<indexterm><primary>atk_text_get_text</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*      atk_text_get_text               (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);</programlisting>
<para>
Gets the specified text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_offset</parameter>&nbsp;:</term>
<listitem><simpara> start position
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_offset</parameter>&nbsp;:</term>
<listitem><simpara> end position
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the text from <parameter>start_offset</parameter> up to, but not including <parameter>end_offset</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-character-at-offset"/>atk_text_get_character_at_offset ()</title>
<indexterm><primary>atk_text_get_character_at_offset</primary></indexterm><programlisting><link linkend="gunichar">gunichar</link>    atk_text_get_character_at_offset
                                            (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset);</programlisting>
<para>
Gets the specified text.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> position
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the character at <parameter>offset</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-text-after-offset"/>atk_text_get_text_after_offset ()</title>
<indexterm><primary>atk_text_get_text_after_offset</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*      atk_text_get_text_after_offset  (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);</programlisting>
<para>
Gets the specified text.
</para>
<para>
If the boundary_type if ATK_TEXT_BOUNDARY_CHAR the character after the 
offset is returned.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_START the returned string
is from the word start after the offset to the next word start.
</para>
<para>
The returned string will contain the word after the offset if the offset 
is inside a word or if the offset is not inside a word.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_END the returned string
is from the word end at or after the offset to the next work end.
</para>
<para>
The returned string will contain the word after the offset if the offset
is inside a word and will contain the word after the word after the offset
if the offset is not inside a word.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_SENTENCE_START the returned
string is from the sentence start after the offset to the next sentence
start.
</para>
<para>
The returned string will contain the sentence after the offset if the offset
is inside a sentence or if the offset is not inside a sentence.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_SENTENCE_END the returned string
is from the sentence end at or after the offset to the next sentence end.
</para>
<para>
The returned string will contain the sentence after the offset if the offset
is inside a sentence and will contain the sentence after the sentence
after the offset if the offset is not inside a sentence.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_LINE_START the returned
string is from the line start after the offset to the next line start.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_LINE_END the returned string
is from the line end at or after the offset to the next line start.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> position
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>boundary_type</parameter>&nbsp;:</term>
<listitem><simpara> An <link linkend="AtkTextBoundary"><type>AtkTextBoundary</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_offset</parameter>&nbsp;:</term>
<listitem><simpara> the start offset of the returned string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_offset</parameter>&nbsp;:</term>
<listitem><simpara> the offset of the first character after the 
             returned substring
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the text after <parameter>offset</parameter> bounded by the specified <parameter>boundary_type</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-text-at-offset"/>atk_text_get_text_at_offset ()</title>
<indexterm><primary>atk_text_get_text_at_offset</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*      atk_text_get_text_at_offset     (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);</programlisting>
<para>
Gets the specified text.
</para>
<para>
If the boundary_type if ATK_TEXT_BOUNDARY_CHAR the character at the
offset is returned.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_START the returned string
is from the word start at or before the offset to the word start after 
the offset.
</para>
<para>
The returned string will contain the word at the offset if the offset
is inside a word and will contain the word before the offset if the 
offset is not inside a word.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_END the returned string
is from the word end before the offset to the word end at or after the
offset.
</para>
<para>
The returned string will contain the word at the offset if the offset
is inside a word and will contain the word after to the offset if the 
offset is not inside a word.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_SENTENCE_START the returned
string is from the sentence start at or before the offset to the sentence
start after the offset.
</para>
<para>
The returned string will contain the sentence at the offset if the offset
is inside a sentence and will contain the sentence before the offset 
if the offset is not inside a sentence.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_SENTENCE_END the returned string
is from the sentence end before the offset to the sentence end at or
after the offset.
</para>
<para>
The returned string will contain the sentence at the offset if the offset
is inside a sentence and will contain the sentence after the offset 
if the offset is not inside a sentence.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_LINE_START the returned
string is from the line start at or before the offset to the line
start after the offset.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_LINE_END the returned string
is from the line end before the offset to the line end at or after
the offset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> position
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>boundary_type</parameter>&nbsp;:</term>
<listitem><simpara> An <link linkend="AtkTextBoundary"><type>AtkTextBoundary</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_offset</parameter>&nbsp;:</term>
<listitem><simpara> the start offset of the returned string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_offset</parameter>&nbsp;:</term>
<listitem><simpara> the offset of the first character after the 
             returned substring
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the text at <parameter>offset</parameter> bounded by the specified <parameter>boundary_type</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-text-before-offset"/>atk_text_get_text_before_offset ()</title>
<indexterm><primary>atk_text_get_text_before_offset</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*      atk_text_get_text_before_offset (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);</programlisting>
<para>
Gets the specified text.
</para>
<para>
If the boundary_type if ATK_TEXT_BOUNDARY_CHAR the character before the
offset is returned.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_START the returned string
is from the word start before the word start before the offset to 
the word start before the offset.
</para>
<para>
The returned string will contain the word before the offset if the offset
is inside a word and will contain the word before the word before the 
offset if the offset is not inside a word.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_END the returned string
is from the word end before the word end at or before the offset to the 
word end at or before the offset.
</para>
<para>
The returned string will contain the word before the offset if the offset
is inside a word or if the offset is not inside a word.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_SENTENCE_START the returned
string is from the sentence start before the sentence start before 
the offset to the sentence start before the offset.
</para>
<para>
The returned string will contain the sentence before the offset if the 
offset is inside a sentence and will contain the sentence before the 
sentence before the offset if the offset is not inside a sentence.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_SENTENCE_END the returned string
is from the sentence end before the sentence end at or before the offset to 
the sentence end at or before the offset.
</para>
<para>
The returned string will contain the sentence before the offset if the 
offset is inside a sentence or if the offset is not inside a sentence.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_LINE_START the returned
string is from the line start before the line start ar or before the offset 
to the line start ar or before the offset.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_LINE_END the returned string
is from the line end before the line end before the offset to the 
line end before the offset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> position
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>boundary_type</parameter>&nbsp;:</term>
<listitem><simpara> An <link linkend="AtkTextBoundary"><type>AtkTextBoundary</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_offset</parameter>&nbsp;:</term>
<listitem><simpara> the start offset of the returned string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_offset</parameter>&nbsp;:</term>
<listitem><simpara> the offset of the first character after the 
             returned substring
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the text before <parameter>offset</parameter> bounded by the specified <parameter>boundary_type</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-caret-offset"/>atk_text_get_caret_offset ()</title>
<indexterm><primary>atk_text_get_caret_offset</primary></indexterm><programlisting><link linkend="gint">gint</link>        atk_text_get_caret_offset       (<link linkend="AtkText">AtkText</link> *text);</programlisting>
<para>
Gets the offset position of the caret (cursor).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the offset position of the caret (cursor).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-character-extents"/>atk_text_get_character_extents ()</title>
<indexterm><primary>atk_text_get_character_extents</primary></indexterm><programlisting><link linkend="void">void</link>        atk_text_get_character_extents  (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y,
                                             <link linkend="gint">gint</link> *width,
                                             <link linkend="gint">gint</link> *height,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coords);</programlisting>
<para>
Get the bounding box containing the glyph representing the character at 
    a particular text offset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> The offset of the text character for which bounding information is required.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> Pointer for the x cordinate of the bounding box
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> Pointer for the y cordinate of the bounding box
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> Pointer for the width of the bounding box
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&nbsp;:</term>
<listitem><simpara> Pointer for the height of the bounding box
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>coords</parameter>&nbsp;:</term>
<listitem><simpara> specify whether coordinates are relative to the screen or widget window 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-run-attributes"/>atk_text_get_run_attributes ()</title>
<indexterm><primary>atk_text_get_run_attributes</primary></indexterm><programlisting><link linkend="AtkAttributeSet">AtkAttributeSet</link>* atk_text_get_run_attributes
                                            (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);</programlisting>
<para>
Creates an <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link> which consists of the attributes explicitly
set at the position <parameter>offset</parameter> in the text. <parameter>start_offset</parameter> and <parameter>end_offset</parameter> are
set to the start and end of the range around <parameter>offset</parameter> where the attributes are
invariant. Note that <parameter>end_offset</parameter> is the offset of the first character
after the range.  See the enum AtkTextAttribute for types of text 
attributes that can be returned. Note that other attributes may also be 
returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> the offset at which to get the attributes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_offset</parameter>&nbsp;:</term>
<listitem><simpara> the address to put the start offset of the range
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_offset</parameter>&nbsp;:</term>
<listitem><simpara> the address to put the end offset of the range
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link> which contains the attributes explicitly set
at <parameter>offset</parameter>. This <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link> should be freed by a call to
<link linkend="atk-attribute-set-free"><function>atk_attribute_set_free()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-default-attributes"/>atk_text_get_default_attributes ()</title>
<indexterm><primary>atk_text_get_default_attributes</primary></indexterm><programlisting><link linkend="AtkAttributeSet">AtkAttributeSet</link>* atk_text_get_default_attributes
                                            (<link linkend="AtkText">AtkText</link> *text);</programlisting>
<para>
Creates an <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link> which consists of the default values of
attributes for the text. See the enum AtkTextAttribute for types of text 
attributes that can be returned. Note that other attributes may also be 
returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link> which contains the default values of attributes.
at <parameter>offset</parameter>. This <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link> should be freed by a call to
<link linkend="atk-attribute-set-free"><function>atk_attribute_set_free()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-character-count"/>atk_text_get_character_count ()</title>
<indexterm><primary>atk_text_get_character_count</primary></indexterm><programlisting><link linkend="gint">gint</link>        atk_text_get_character_count    (<link linkend="AtkText">AtkText</link> *text);</programlisting>
<para>
Gets the character count.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the number of characters.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-offset-at-point"/>atk_text_get_offset_at_point ()</title>
<indexterm><primary>atk_text_get_offset_at_point</primary></indexterm><programlisting><link linkend="gint">gint</link>        atk_text_get_offset_at_point    (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coords);</programlisting>
<para>
Gets the offset of the character located at coordinates <parameter>x</parameter> and <parameter>y</parameter>. <parameter>x</parameter> and <parameter>y</parameter>
are interpreted as being relative to the screen or this widget's window
depending on <parameter>coords</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> screen x-position of character
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> screen y-position of character
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>coords</parameter>&nbsp;:</term>
<listitem><simpara> specify whether coordinates are relative to the screen or
widget window 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the offset to the character which is located at
the specified <parameter>x</parameter> and <parameter>y</parameter> coordinates.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-bounded-ranges"/>atk_text_get_bounded_ranges ()</title>
<indexterm role="ATK 1.3"><primary>atk_text_get_bounded_ranges</primary></indexterm><programlisting><link linkend="AtkTextRange">AtkTextRange</link>** atk_text_get_bounded_ranges  (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="AtkTextRectangle">AtkTextRectangle</link> *rect,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coord_type,
                                             <link linkend="AtkTextClipType">AtkTextClipType</link> x_clip_type,
                                             <link linkend="AtkTextClipType">AtkTextClipType</link> y_clip_type);</programlisting>
<para>
Get the ranges of text in the specified bounding box.
</para>
<para>
Returns:</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rect</parameter>&nbsp;:</term>
<listitem><simpara> An AtkTextRectagle giving the dimensions of the bounding box.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>coord_type</parameter>&nbsp;:</term>
<listitem><simpara> Specify whether coordinates are relative to the screen or widget window.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_clip_type</parameter>&nbsp;:</term>
<listitem><simpara> Specify the horizontal clip type.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_clip_type</parameter>&nbsp;:</term>
<listitem><simpara> Specify the vertical clip type.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> Array of AtkTextRange. The last element of the array returned 
         by this function will be NULL.
</simpara></listitem></varlistentry>
</variablelist><para>Since  ATK 1.3

</para></refsect2>
<refsect2>
<title><anchor id="atk-text-get-range-extents"/>atk_text_get_range_extents ()</title>
<indexterm role="ATK 1.3"><primary>atk_text_get_range_extents</primary></indexterm><programlisting><link linkend="void">void</link>        atk_text_get_range_extents      (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coord_type,
                                             <link linkend="AtkTextRectangle">AtkTextRectangle</link> *rect);</programlisting>
<para>
Get the bounding box for text within the specified range.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_offset</parameter>&nbsp;:</term>
<listitem><simpara> The offset of the first text character for which boundary 
       information is required.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_offset</parameter>&nbsp;:</term>
<listitem><simpara> The offset of the text character after the last character 
       for which boundary information is required.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>coord_type</parameter>&nbsp;:</term>
<listitem><simpara> Specify whether coordinates are relative to the screen or widget window.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rect</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to a AtkTextRectangle which is filled in by this function.
</simpara></listitem></varlistentry>
</variablelist><para>Since  ATK 1.3
</para></refsect2>
<refsect2>
<title><anchor id="atk-text-free-ranges"/>atk_text_free_ranges ()</title>
<indexterm role="ATK 1.3"><primary>atk_text_free_ranges</primary></indexterm><programlisting><link linkend="void">void</link>        atk_text_free_ranges            (<link linkend="AtkTextRange">AtkTextRange</link> **ranges);</programlisting>
<para>
Frees the memory associated with an array of AtkTextRange. It is assumed
that the array was returned by the function atk_text_get_bounded_ranges
and is NULL terminated.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ranges</parameter>&nbsp;:</term>
<listitem><simpara> A pointer to an array of  <link linkend="AtkTextRange"><type>AtkTextRange</type></link> which is to be freed.
</simpara></listitem></varlistentry>
</variablelist><para>Since  ATK 1.3
</para></refsect2>
<refsect2>
<title><anchor id="atk-text-get-n-selections"/>atk_text_get_n_selections ()</title>
<indexterm><primary>atk_text_get_n_selections</primary></indexterm><programlisting><link linkend="gint">gint</link>        atk_text_get_n_selections       (<link linkend="AtkText">AtkText</link> *text);</programlisting>
<para>
Gets the number of selected regions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The number of selected regions, or -1 if a failure
  occurred.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-get-selection"/>atk_text_get_selection ()</title>
<indexterm><primary>atk_text_get_selection</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*      atk_text_get_selection          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);</programlisting>
<para>
Gets the text from the specified selection.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selection_num</parameter>&nbsp;:</term>
<listitem><simpara> The selection number.  The selected regions are
assigned numbers that correspond to how far the region is from the
start of the text.  The selected region closest to the beginning
of the text region is assigned the number 0, etc.  Note that adding,
moving or deleting a selected region can change the numbering.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_offset</parameter>&nbsp;:</term>
<listitem><simpara> passes back the start position of the selected region
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_offset</parameter>&nbsp;:</term>
<listitem><simpara> passes back the end position of (e.g. offset immediately past) 
the selected region
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the selected text.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-add-selection"/>atk_text_add_selection ()</title>
<indexterm><primary>atk_text_add_selection</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    atk_text_add_selection          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);</programlisting>
<para>
Adds a selection bounded by the specified offsets.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_offset</parameter>&nbsp;:</term>
<listitem><simpara> the start position of the selected region
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_offset</parameter>&nbsp;:</term>
<listitem><simpara> the offset of the first character after the selected region.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <literal>TRUE</literal> if success, <literal>FALSE</literal> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-remove-selection"/>atk_text_remove_selection ()</title>
<indexterm><primary>atk_text_remove_selection</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    atk_text_remove_selection       (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num);</programlisting>
<para>
Removes the specified selection.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selection_num</parameter>&nbsp;:</term>
<listitem><simpara> The selection number.  The selected regions are
assigned numbers that correspond to how far the region is from the
start of the text.  The selected region closest to the beginning
of the text region is assigned the number 0, etc.  Note that adding,
moving or deleting a selected region can change the numbering.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <literal>TRUE</literal> if success, <literal>FALSE</literal> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-set-selection"/>atk_text_set_selection ()</title>
<indexterm><primary>atk_text_set_selection</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    atk_text_set_selection          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);</programlisting>
<para>
Changes the start and end offset of the specified selection.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selection_num</parameter>&nbsp;:</term>
<listitem><simpara> The selection number.  The selected regions are
assigned numbers that correspond to how far the region is from the
start of the text.  The selected region closest to the beginning
of the text region is assigned the number 0, etc.  Note that adding,
moving or deleting a selected region can change the numbering.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start_offset</parameter>&nbsp;:</term>
<listitem><simpara> the new start position of the selection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>end_offset</parameter>&nbsp;:</term>
<listitem><simpara> the new end position of (e.g. offset immediately past) 
the selection
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <literal>TRUE</literal> if success, <literal>FALSE</literal> otherwise
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-set-caret-offset"/>atk_text_set_caret_offset ()</title>
<indexterm><primary>atk_text_set_caret_offset</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    atk_text_set_caret_offset       (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset);</programlisting>
<para>
Sets the caret (cursor) position to the specified <parameter>offset</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkText"><type>AtkText</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> position
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <literal>TRUE</literal> if success, <literal>FALSE</literal> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-attribute-set-free"/>atk_attribute_set_free ()</title>
<indexterm><primary>atk_attribute_set_free</primary></indexterm><programlisting><link linkend="void">void</link>        atk_attribute_set_free          (<link linkend="AtkAttributeSet">AtkAttributeSet</link> *attrib_set);</programlisting>
<para>
Frees the memory used by an <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link>, including all its
<link linkend="AtkAttributes"><type>AtkAttributes</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>attrib_set</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link> to free
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-attribute-register"/>atk_text_attribute_register ()</title>
<indexterm><primary>atk_text_attribute_register</primary></indexterm><programlisting><link linkend="AtkTextAttribute">AtkTextAttribute</link> atk_text_attribute_register
                                            (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Associate <parameter>name</parameter> with a new <link linkend="AtkTextAttribute"><type>AtkTextAttribute</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a name string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="AtkTextAttribute"><type>AtkTextAttribute</type></link> associated with <parameter>name</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-attribute-get-name"/>atk_text_attribute_get_name ()</title>
<indexterm><primary>atk_text_attribute_get_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* atk_text_attribute_get_name    (<link linkend="AtkTextAttribute">AtkTextAttribute</link> attr);</programlisting>
<para>
Gets the name corresponding to the <link linkend="AtkTextAttribute"><type>AtkTextAttribute</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>attr</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkTextAttribute"><type>AtkTextAttribute</type></link> whose name is required
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a string containing the name; this string should not be freed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-attribute-for-name"/>atk_text_attribute_for_name ()</title>
<indexterm><primary>atk_text_attribute_for_name</primary></indexterm><programlisting><link linkend="AtkTextAttribute">AtkTextAttribute</link> atk_text_attribute_for_name
                                            (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Get the <link linkend="AtkTextAttribute"><type>AtkTextAttribute</type></link> type corresponding to a text attribute name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a string which is the (non-localized) name of an ATK text attribute.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="AtkTextAttribute"><type>AtkTextAttribute</type></link> enumerated type corresponding to the specified
name,
         or <link linkend="ATK-TEXT-ATTRIBUTE-INVALID:CAPS"><type>ATK_TEXT_ATTRIBUTE_INVALID</type></link> if no matching text attribute is found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-text-attribute-get-value"/>atk_text_attribute_get_value ()</title>
<indexterm><primary>atk_text_attribute_get_value</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* atk_text_attribute_get_value   (<link linkend="AtkTextAttribute">AtkTextAttribute</link> attr,
                                             <link linkend="gint">gint</link> index_);</programlisting>
<para>
Gets the value for the index of the <link linkend="AtkTextAttribute"><type>AtkTextAttribute</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>attr</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkTextAttribute"><type>AtkTextAttribute</type></link> for which a value is required
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index_</parameter>&nbsp;:</term>
<listitem><simpara> The index of the required value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a string containing the value; this string should not be freed;
NULL is returned if there are no values maintained for the attr value. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1>
<title>Signals</title>
<refsect2><title><anchor id="AtkText-text-attributes-changed"/>The &quot;text-attributes-changed&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="AtkText">AtkText</link> *atktext,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The "text-attributes-changed" signal is emitted when the text attributes of 
the text of an object which implements AtkText changes.
</para><variablelist role="params">
<varlistentry><term><parameter>atktext</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="AtkText-text-caret-moved"/>The &quot;text-caret-moved&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="AtkText">AtkText</link> *atktext,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The "text-caret-moved" signal is emitted when the caret position of 
the text of an object which implements AtkText changes.
</para><variablelist role="params">
<varlistentry><term><parameter>atktext</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>The new position of the text caret.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="AtkText-text-changed"/>The &quot;text-changed&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="AtkText">AtkText</link> *atktext,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="gint">gint</link> arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The "text-changed" signal is emitted when the text of the object which 
implements the AtkText interface changes, This signal will have a detail 
which is either "insert" or "delete" which identifies whether the text 
change was an insertion or a deletion
</para><variablelist role="params">
<varlistentry><term><parameter>atktext</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>The position (character offset) of the insertion or deletion.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&nbsp;:</term>
<listitem><simpara>The length (in characters) of text inserted or deleted.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="AtkText-text-selection-changed"/>The &quot;text-selection-changed&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="AtkText">AtkText</link> *atktext,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The "text-selection-changed" signal is emitted when the selected text of 
an object which implements AtkText changes.

</para><variablelist role="params">
<varlistentry><term><parameter>atktext</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
