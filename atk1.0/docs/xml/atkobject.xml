<refentry id="AtkObject">
<refmeta>
<refentrytitle>AtkObject</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>ATK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AtkObject</refname><refpurpose>
The base object class for the Accessibility Toolkit API.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



            <link linkend="AtkObject-struct">AtkObject</link>;
enum        <link linkend="AtkRole">AtkRole</link>;
<link linkend="AtkRole">AtkRole</link>     <link linkend="atk-role-register">atk_role_register</link>               (const <link linkend="gchar">gchar</link> *name);
enum        <link linkend="AtkLayer">AtkLayer</link>;
            <link linkend="AtkImplementor">AtkImplementor</link>;
            <link linkend="AtkPropertyValues">AtkPropertyValues</link>;
<link linkend="gboolean">gboolean</link>    (<link linkend="AtkFunction">*AtkFunction</link>)                  (<link linkend="gpointer">gpointer</link> data);
<link linkend="void">void</link>        (<link linkend="AtkPropertyChangeHandler">*AtkPropertyChangeHandler</link>)     (<link linkend="AtkObject">AtkObject</link>*,
                                             <link linkend="AtkPropertyValues">AtkPropertyValues</link>*);
<link linkend="AtkObject">AtkObject</link>*  <link linkend="atk-implementor-ref-accessible">atk_implementor_ref_accessible</link>  (<link linkend="AtkImplementor">AtkImplementor</link> *implementor);
const <link linkend="gchar">gchar</link>* <link linkend="atk-object-get-name">atk_object_get_name</link>            (<link linkend="AtkObject">AtkObject</link> *accessible);
const <link linkend="gchar">gchar</link>* <link linkend="atk-object-get-description">atk_object_get_description</link>     (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="AtkObject">AtkObject</link>*  <link linkend="atk-object-get-parent">atk_object_get_parent</link>           (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="gint">gint</link>        <link linkend="atk-object-get-n-accessible-children">atk_object_get_n_accessible_children</link>
                                            (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="AtkObject">AtkObject</link>*  <link linkend="atk-object-ref-accessible-child">atk_object_ref_accessible_child</link> (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="gint">gint</link> i);
<link linkend="AtkRelationSet">AtkRelationSet</link>* <link linkend="atk-object-ref-relation-set">atk_object_ref_relation_set</link> (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="AtkLayer">AtkLayer</link>    <link linkend="atk-object-get-layer">atk_object_get_layer</link>            (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="gint">gint</link>        <link linkend="atk-object-get-mdi-zorder">atk_object_get_mdi_zorder</link>       (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="AtkRole">AtkRole</link>     <link linkend="atk-object-get-role">atk_object_get_role</link>             (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="AtkStateSet">AtkStateSet</link>* <link linkend="atk-object-ref-state-set">atk_object_ref_state_set</link>       (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="gint">gint</link>        <link linkend="atk-object-get-index-in-parent">atk_object_get_index_in_parent</link>  (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="void">void</link>        <link linkend="atk-object-set-name">atk_object_set_name</link>             (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             const <link linkend="gchar">gchar</link> *name);
<link linkend="void">void</link>        <link linkend="atk-object-set-description">atk_object_set_description</link>      (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             const <link linkend="gchar">gchar</link> *description);
<link linkend="void">void</link>        <link linkend="atk-object-set-parent">atk_object_set_parent</link>           (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkObject">AtkObject</link> *parent);
<link linkend="void">void</link>        <link linkend="atk-object-set-role">atk_object_set_role</link>             (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkRole">AtkRole</link> role);
<link linkend="guint">guint</link>       <link linkend="atk-object-connect-property-change-handler">atk_object_connect_property_change_handler</link>
                                            (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkPropertyChangeHandler">AtkPropertyChangeHandler</link> *handler);
<link linkend="void">void</link>        <link linkend="atk-object-remove-property-change-handler">atk_object_remove_property_change_handler</link>
                                            (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="guint">guint</link> handler_id);
<link linkend="void">void</link>        <link linkend="atk-object-notify-state-change">atk_object_notify_state_change</link>  (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkState">AtkState</link> state,
                                             <link linkend="gboolean">gboolean</link> value);
<link linkend="void">void</link>        <link linkend="atk-object-initialize">atk_object_initialize</link>           (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="gpointer">gpointer</link> data);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-object-add-relationship">atk_object_add_relationship</link>     (<link linkend="AtkObject">AtkObject</link> *object,
                                             <link linkend="AtkRelationType">AtkRelationType</link> relationship,
                                             <link linkend="AtkObject">AtkObject</link> *target);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-object-remove-relationship">atk_object_remove_relationship</link>  (<link linkend="AtkObject">AtkObject</link> *object,
                                             <link linkend="AtkRelationType">AtkRelationType</link> relationship,
                                             <link linkend="AtkObject">AtkObject</link> *target);
<link linkend="AtkAttributeSet">AtkAttributeSet</link>* <link linkend="atk-object-get-attributes">atk_object_get_attributes</link>  (<link linkend="AtkObject">AtkObject</link> *accessible);
const <link linkend="gchar">gchar</link>* <link linkend="atk-role-get-name">atk_role_get_name</link>              (<link linkend="AtkRole">AtkRole</link> role);
const <link linkend="gchar">gchar</link>* <link linkend="atk-role-get-localized-name">atk_role_get_localized_name</link>    (<link linkend="AtkRole">AtkRole</link> role);
<link linkend="AtkRole">AtkRole</link>     <link linkend="atk-role-for-name">atk_role_for_name</link>               (const <link linkend="gchar">gchar</link> *name);

</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----AtkObject
         +----<link linkend="AtkGObjectAccessible">AtkGObjectAccessible</link>
         +----<link linkend="AtkNoOpObject">AtkNoOpObject</link>
</synopsis>

</refsect1>





<refsect1>
<title>Properties</title>
<synopsis>

  &quot;<link linkend="AtkObject--accessible-component-layer">accessible-component-layer</link>&quot; <link linkend="gint">gint</link>                  : Read
  &quot;<link linkend="AtkObject--accessible-component-mdi-zorder">accessible-component-mdi-zorder</link>&quot; <link linkend="gint">gint</link>                  : Read
  &quot;<link linkend="AtkObject--accessible-description">accessible-description</link>&quot; <link linkend="gchararray">gchararray</link>            : Read / Write
  &quot;<link linkend="AtkObject--accessible-hypertext-nlinks">accessible-hypertext-nlinks</link>&quot; <link linkend="gint">gint</link>                  : Read
  &quot;<link linkend="AtkObject--accessible-name">accessible-name</link>&quot;      <link linkend="gchararray">gchararray</link>            : Read / Write
  &quot;<link linkend="AtkObject--accessible-parent">accessible-parent</link>&quot;    <link linkend="AtkObject">AtkObject</link>             : Read / Write
  &quot;<link linkend="AtkObject--accessible-role">accessible-role</link>&quot;      <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="AtkObject--accessible-table-caption">accessible-table-caption</link>&quot; <link linkend="gchararray">gchararray</link>            : Read / Write
  &quot;<link linkend="AtkObject--accessible-table-caption-object">accessible-table-caption-object</link>&quot; <link linkend="AtkObject">AtkObject</link>             : Read / Write
  &quot;<link linkend="AtkObject--accessible-table-column-description">accessible-table-column-description</link>&quot; <link linkend="gchararray">gchararray</link>            : Read / Write
  &quot;<link linkend="AtkObject--accessible-table-column-header">accessible-table-column-header</link>&quot; <link linkend="AtkObject">AtkObject</link>             : Read / Write
  &quot;<link linkend="AtkObject--accessible-table-row-description">accessible-table-row-description</link>&quot; <link linkend="gchararray">gchararray</link>            : Read / Write
  &quot;<link linkend="AtkObject--accessible-table-row-header">accessible-table-row-header</link>&quot; <link linkend="AtkObject">AtkObject</link>             : Read / Write
  &quot;<link linkend="AtkObject--accessible-table-summary">accessible-table-summary</link>&quot; <link linkend="AtkObject">AtkObject</link>             : Read / Write
  &quot;<link linkend="AtkObject--accessible-value">accessible-value</link>&quot;     <link linkend="gdouble">gdouble</link>               : Read / Write
</synopsis>
</refsect1>

<refsect1>
<title>Signal Prototypes</title>
<synopsis>

&quot;<link linkend="AtkObject-active-descendant-changed">active-descendant-changed</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="gpointer">gpointer</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="AtkObject-children-changed">children-changed</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="guint">guint</link> arg1,
                                            <link linkend="gpointer">gpointer</link> arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="AtkObject-focus-event">focus-event</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="gboolean">gboolean</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="AtkObject-property-change">property-change</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="gpointer">gpointer</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="AtkObject-state-change">state-change</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="gchar">gchar</link> *arg1,
                                            <link linkend="gboolean">gboolean</link> arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="AtkObject-visible-data-changed">visible-data-changed</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsect1>


<refsect1>
<title>Description</title>
<para>
This class is the primary class for accessibility support via
the Accessibility ToolKit (ATK).  Objects which are instances
of <link linkend="AtkObject"><type>AtkObject</type></link> (or instances of AtkObject-derived types) are
queried for properties which relate basic (and generic) properties of a
UI component such as name and description.  Instances of <link linkend="AtkObject"><type>AtkObject</type></link>
may also be queried as to whether they implement other ATK interfaces
(e.g. <link linkend="AtkAction"><type>AtkAction</type></link>, <link linkend="AtkComponent"><type>AtkComponent</type></link>, etc.), as appropriate to the role
which a given UI component plays in a user interface.
</para>
<para>All UI components in an application which provide useful
information or services to the user must provide corresponding
<link linkend="AtkObject"><type>AtkObject</type></link> instances on request (in GTK+, for instance, usually
on a call to #<link linkend="gtk-widget-get-accessible"><function>gtk_widget_get_accessible()</function></link>), either via ATK support
built into the toolkit for the widget class or ancestor class, or in
the case of custom widgets, if the inherited <link linkend="AtkObject"><type>AtkObject</type></link> implementation
is insufficient, via instances of a new <link linkend="AtkObject"><type>AtkObject</type></link> subclass. 
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AtkObject-struct"/>AtkObject</title>
<indexterm><primary>AtkObject</primary></indexterm><programlisting>typedef struct _AtkObject AtkObject;</programlisting>
<para>
The AtkObject structure should not be accessed directly.

</para></refsect2>
<refsect2>
<title><anchor id="AtkRole"/>enum AtkRole</title>
<indexterm><primary>AtkRole</primary></indexterm><programlisting>typedef enum
{
  ATK_ROLE_INVALID = 0, 
  ATK_ROLE_ACCEL_LABEL,
  ATK_ROLE_ALERT,
  ATK_ROLE_ANIMATION,
  ATK_ROLE_ARROW,
  ATK_ROLE_CALENDAR,
  ATK_ROLE_CANVAS,
  ATK_ROLE_CHECK_BOX,
  ATK_ROLE_CHECK_MENU_ITEM,
  ATK_ROLE_COLOR_CHOOSER,
  ATK_ROLE_COLUMN_HEADER,
  ATK_ROLE_COMBO_BOX,
  ATK_ROLE_DATE_EDITOR,
  ATK_ROLE_DESKTOP_ICON,
  ATK_ROLE_DESKTOP_FRAME,
  ATK_ROLE_DIAL,
  ATK_ROLE_DIALOG,
  ATK_ROLE_DIRECTORY_PANE,
  ATK_ROLE_DRAWING_AREA,
  ATK_ROLE_FILE_CHOOSER,
  ATK_ROLE_FILLER,
  ATK_ROLE_FONT_CHOOSER,
  ATK_ROLE_FRAME,
  ATK_ROLE_GLASS_PANE,
  ATK_ROLE_HTML_CONTAINER,
  ATK_ROLE_ICON,
  ATK_ROLE_IMAGE,
  ATK_ROLE_INTERNAL_FRAME,
  ATK_ROLE_LABEL,
  ATK_ROLE_LAYERED_PANE,
  ATK_ROLE_LIST,
  ATK_ROLE_LIST_ITEM,
  ATK_ROLE_MENU,
  ATK_ROLE_MENU_BAR,
  ATK_ROLE_MENU_ITEM,
  ATK_ROLE_OPTION_PANE,
  ATK_ROLE_PAGE_TAB,
  ATK_ROLE_PAGE_TAB_LIST,
  ATK_ROLE_PANEL,
  ATK_ROLE_PASSWORD_TEXT,
  ATK_ROLE_POPUP_MENU,
  ATK_ROLE_PROGRESS_BAR,
  ATK_ROLE_PUSH_BUTTON,
  ATK_ROLE_RADIO_BUTTON,
  ATK_ROLE_RADIO_MENU_ITEM,
  ATK_ROLE_ROOT_PANE,
  ATK_ROLE_ROW_HEADER,
  ATK_ROLE_SCROLL_BAR,
  ATK_ROLE_SCROLL_PANE,
  ATK_ROLE_SEPARATOR,
  ATK_ROLE_SLIDER,
  ATK_ROLE_SPLIT_PANE,
  ATK_ROLE_SPIN_BUTTON,
  ATK_ROLE_STATUSBAR,
  ATK_ROLE_TABLE,
  ATK_ROLE_TABLE_CELL,
  ATK_ROLE_TABLE_COLUMN_HEADER,
  ATK_ROLE_TABLE_ROW_HEADER,
  ATK_ROLE_TEAR_OFF_MENU_ITEM,
  ATK_ROLE_TERMINAL,
  ATK_ROLE_TEXT,
  ATK_ROLE_TOGGLE_BUTTON,
  ATK_ROLE_TOOL_BAR,
  ATK_ROLE_TOOL_TIP,
  ATK_ROLE_TREE,
  ATK_ROLE_TREE_TABLE,
  ATK_ROLE_UNKNOWN,
  ATK_ROLE_VIEWPORT,
  ATK_ROLE_WINDOW,
  ATK_ROLE_HEADER,
  ATK_ROLE_FOOTER,
  ATK_ROLE_PARAGRAPH,
  ATK_ROLE_RULER,
  ATK_ROLE_APPLICATION,
  ATK_ROLE_AUTOCOMPLETE,
  ATK_ROLE_EDITBAR,
  ATK_ROLE_EMBEDDED,
  ATK_ROLE_ENTRY,
  ATK_ROLE_CHART,
  ATK_ROLE_CAPTION,
  ATK_ROLE_DOCUMENT_FRAME,
  ATK_ROLE_HEADING,
  ATK_ROLE_PAGE,
  ATK_ROLE_SECTION,
  ATK_ROLE_REDUNDANT_OBJECT,
  ATK_ROLE_FORM,
  ATK_ROLE_LINK,
  ATK_ROLE_INPUT_METHOD_WINDOW,
  ATK_ROLE_LAST_DEFINED
} AtkRole;
</programlisting>
<para>
Describes the role of an object
</para>
<para>
These are the built-in enumerated roles that UI components can have in
ATK.  Other roles may be added at runtime, so an AtkRole &gt;=
ATK_ROLE_LAST_DEFINED is not necessarily an error.</para>
<para>
</para><variablelist role="enum">
<varlistentry>
<term><literal>ATK_ROLE_INVALID</literal></term>
<listitem><simpara> Invalid role
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_ACCEL_LABEL</literal></term>
<listitem><simpara> A label which represents an accelerator
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_ALERT</literal></term>
<listitem><simpara> An object which is an alert to the user. Assistive Technologies typically respond to ATK_ROLE_ALERT by reading the entire onscreen contents of containers advertising this role.  Should be used for warning dialogs, etc.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_ANIMATION</literal></term>
<listitem><simpara> An object which is an animated image
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_ARROW</literal></term>
<listitem><simpara> An arrow in one of the four cardinal directions
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_CALENDAR</literal></term>
<listitem><simpara>  An object that displays a calendar and allows the user to select a date
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_CANVAS</literal></term>
<listitem><simpara> An object that can be drawn into and is used to trap events
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_CHECK_BOX</literal></term>
<listitem><simpara> A choice that can be checked or unchecked and provides a separate indicator for the current state
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_CHECK_MENU_ITEM</literal></term>
<listitem><simpara> A menu item with a check box
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_COLOR_CHOOSER</literal></term>
<listitem><simpara> A specialized dialog that lets the user choose a color
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_COLUMN_HEADER</literal></term>
<listitem><simpara> The header for a column of data
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_COMBO_BOX</literal></term>
<listitem><simpara> A list of choices the user can select from
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_DATE_EDITOR</literal></term>
<listitem><simpara> An object whose purpose is to allow a user to edit a date
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_DESKTOP_ICON</literal></term>
<listitem><simpara> An inconifed internal frame within a DESKTOP_PANE
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_DESKTOP_FRAME</literal></term>
<listitem><simpara> A pane that supports internal frames and iconified versions of those internal frames
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_DIAL</literal></term>
<listitem><simpara> An object whose purpose is to allow a user to set a value
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_DIALOG</literal></term>
<listitem><simpara> A top level window with title bar and a border
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_DIRECTORY_PANE</literal></term>
<listitem><simpara> A pane that allows the user to navigate through and select the contents of a directory
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_DRAWING_AREA</literal></term>
<listitem><simpara> An object used for drawing custom user interface elements
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_FILE_CHOOSER</literal></term>
<listitem><simpara> A specialized dialog that lets the user choose a file
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_FILLER</literal></term>
<listitem><simpara> A object that fills up space in a user interface
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_FONT_CHOOSER</literal></term>
<listitem><simpara> A specialized dialog that lets the user choose a font
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_FRAME</literal></term>
<listitem><simpara> A top level window with a title bar, border, menubar, etc.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_GLASS_PANE</literal></term>
<listitem><simpara> A pane that is guaranteed to be painted on top of all panes beneath it
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_HTML_CONTAINER</literal></term>
<listitem><simpara> A document container for HTML, whose children represent the document content
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_ICON</literal></term>
<listitem><simpara> A small fixed size picture, typically used to decorate components
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_IMAGE</literal></term>
<listitem><simpara> An object whose primary purpose is to display an image
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_INTERNAL_FRAME</literal></term>
<listitem><simpara> A frame-like object that is clipped by a desktop pane
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_LABEL</literal></term>
<listitem><simpara> An object used to present an icon or short string in an interface
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_LAYERED_PANE</literal></term>
<listitem><simpara> A specialized pane that allows its children to be drawn in layers, providing a form of stacking order
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_LIST</literal></term>
<listitem><simpara> An object that presents a list of objects to the user and allows the user to select one or more of them 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_LIST_ITEM</literal></term>
<listitem><simpara> An object that represents an element of a list 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_MENU</literal></term>
<listitem><simpara> An object usually found inside a menu bar that contains a list of actions the user can choose from
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_MENU_BAR</literal></term>
<listitem><simpara> An object usually drawn at the top of the primary dialog box of an application that contains a list of menus the user can choose from 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_MENU_ITEM</literal></term>
<listitem><simpara> An object usually contained in a menu that presents an action the user can choose
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_OPTION_PANE</literal></term>
<listitem><simpara> A specialized pane whose primary use is inside a DIALOG
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_PAGE_TAB</literal></term>
<listitem><simpara> An object that is a child of a page tab list
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_PAGE_TAB_LIST</literal></term>
<listitem><simpara> An object that presents a series of panels (or page tabs), one at a time, through some mechanism provided by the object 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_PANEL</literal></term>
<listitem><simpara> A generic container that is often used to group objects
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_PASSWORD_TEXT</literal></term>
<listitem><simpara> A text object uses for passwords, or other places where the text content is not shown visibly to the user
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_POPUP_MENU</literal></term>
<listitem><simpara> A temporary window that is usually used to offer the user a list of choices, and then hides when the user selects one of those choices
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_PROGRESS_BAR</literal></term>
<listitem><simpara> An object used to indicate how much of a task has been completed
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_PUSH_BUTTON</literal></term>
<listitem><simpara> An object the user can manipulate to tell the application to do something
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_RADIO_BUTTON</literal></term>
<listitem><simpara> A specialized check box that will cause other radio buttons in the same group to become unchecked when this one is checked
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_RADIO_MENU_ITEM</literal></term>
<listitem><simpara> A check menu item which belongs to a group. At each instant exactly one of the radio menu items from a group is selected
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_ROOT_PANE</literal></term>
<listitem><simpara> A specialized pane that has a glass pane and a layered pane as its children
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_ROW_HEADER</literal></term>
<listitem><simpara> The header for a row of data
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_SCROLL_BAR</literal></term>
<listitem><simpara> An object usually used to allow a user to incrementally view a large amount of data.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_SCROLL_PANE</literal></term>
<listitem><simpara> An object that allows a user to incrementally view a large amount of information
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_SEPARATOR</literal></term>
<listitem><simpara> An object usually contained in a menu to provide a visible and logical separation of the contents in a menu
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_SLIDER</literal></term>
<listitem><simpara> An object that allows the user to select from a bounded range
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_SPLIT_PANE</literal></term>
<listitem><simpara> A specialized panel that presents two other panels at the same time
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_SPIN_BUTTON</literal></term>
<listitem><simpara> An object used to get an integer or floating point number from the user
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_STATUSBAR</literal></term>
<listitem><simpara> An object which reports messages of minor importance to the user
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TABLE</literal></term>
<listitem><simpara> An object used to represent information in terms of rows and columns
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TABLE_CELL</literal></term>
<listitem><simpara> A cell in a table
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TABLE_COLUMN_HEADER</literal></term>
<listitem><simpara> The header for a column of a table
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TABLE_ROW_HEADER</literal></term>
<listitem><simpara> The header for a row of a table
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TEAR_OFF_MENU_ITEM</literal></term>
<listitem><simpara> A menu item used to tear off and reattach its menu
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TERMINAL</literal></term>
<listitem><simpara> An object that represents an accessible terminal.  <parameter>Since</parameter>: ATK-0.6
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TEXT</literal></term>
<listitem><simpara> An object that presents text to the user
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TOGGLE_BUTTON</literal></term>
<listitem><simpara> A specialized push button that can be checked or unchecked, but does not provide a separate indicator for the current state
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TOOL_BAR</literal></term>
<listitem><simpara> A bar or palette usually composed of push buttons or toggle buttons
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TOOL_TIP</literal></term>
<listitem><simpara> An object that provides information about another object
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TREE</literal></term>
<listitem><simpara> An object used to represent hierarchical information to the user
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_TREE_TABLE</literal></term>
<listitem><simpara> An object capable of expanding and collapsing rows as well as showing multiple columns of data.   <parameter>Since</parameter>: ATK-0.7
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_UNKNOWN</literal></term>
<listitem><simpara> The object contains some Accessible information, but its role is not known
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_VIEWPORT</literal></term>
<listitem><simpara> An object usually used in a scroll pane
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_WINDOW</literal></term>
<listitem><simpara> A top level window with no title or border.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_HEADER</literal></term>
<listitem><simpara> An object that serves as a document header. <parameter>Since</parameter>:ATK 1.1.1
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_FOOTER</literal></term>
<listitem><simpara> An object that serves as a document footer.  <parameter>Since</parameter>: ATK-1.1.1
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_PARAGRAPH</literal></term>
<listitem><simpara> An object which is contains a paragraph of text content.   <parameter>Since</parameter>: ATK-1.1.1
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_RULER</literal></term>
<listitem><simpara> An object which describes margins and tab stops, etc. for text objects which it controls (should have CONTROLLER_FOR relation to such).   <parameter>Since</parameter>: ATK-1.1.1
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_APPLICATION</literal></term>
<listitem><simpara> The object is an application object, which may contain <parameter>ATK_ROLE_FRAME</parameter> objects or other types of accessibles.  The root accessible of any application's ATK hierarchy should have ATK_ROLE_APPLICATION.   <parameter>Since</parameter>: ATK-1.1.4
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_AUTOCOMPLETE</literal></term>
<listitem><simpara> The object is a dialog or list containing items for insertion into an entry widget, for instance a list of words for completion of a text entry.   <parameter>Since</parameter>: ATK-1.3
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_EDITBAR</literal></term>
<listitem><simpara> The object is an editable text object in a toolbar.  <parameter>Since</parameter>: ATK-1.5
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_EMBEDDED</literal></term>
<listitem><simpara> The object is an embedded container within a document or panel.  This role is a grouping "hint" indicating that the contained objects share a context.  <parameter>Since</parameter>: ATK-1.7.2
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_ENTRY</literal></term>
<listitem><simpara> The object is a component whose textual content may be entered or modified by the user, provided <parameter>ATK_STATE_EDITABLE</parameter> is present.   <parameter>Since</parameter>: ATK-1.11
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_CHART</literal></term>
<listitem><simpara> The object is a graphical depiction of quantitative data. It may contain multiple subelements whose attributes and/or description may be queried to obtain both the quantitative data and information about how the data is being presented. The LABELLED_BY relation is particularly important in interpreting objects of this type, as is the accessible-description property.  <parameter>Since</parameter>: ATK-1.11
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_CAPTION</literal></term>
<listitem><simpara> The object contains descriptive information, usually textual, about another user interface element such as a table, chart, or image.  <parameter>Since</parameter>: ATK-1.11
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_DOCUMENT_FRAME</literal></term>
<listitem><simpara> The object is a visual frame or container which contains a view of document content. Document frames may occur within another Document instance, in which case the second document may be said to be embedded in the containing instance. HTML frames are often ROLE_DOCUMENT_FRAME. Either this object, or a singleton descendant, should implement the Document interface.  <parameter>Since</parameter>: ATK-1.11
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_HEADING</literal></term>
<listitem><simpara> The object serves as a heading for content which follows it in a document. The 'heading level' of the heading, if availabe, may be obtained by querying the object's attributes.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_PAGE</literal></term>
<listitem><simpara> The object is a containing instance which encapsulates a page of information. <parameter>ATK_ROLE_PAGE</parameter> is used in documents and content which support a paginated navigation model.  <parameter>Since</parameter>: ATK-1.11
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_SECTION</literal></term>
<listitem><simpara> The object is a containing instance of document content which constitutes a particular 'logical' section of the document. The type of content within a section, and the nature of the section division itself, may be obtained by querying the object's attributes. Sections may be nested. <parameter>Since</parameter>: ATK-1.11
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_REDUNDANT_OBJECT</literal></term>
<listitem><simpara> The object is redundant with another object in the hierarchy, and is exposed for purely technical reasons.  Objects of this role should normally be ignored by clients. <parameter>Since</parameter>: ATK-1.11
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_FORM</literal></term>
<listitem><simpara> The object is a container for form controls, for instance as part of a 
web form or user-input form within a document.  This role is primarily a tag/convenience for 
clients when navigating complex documents, it is not expected that ordinary GUI containers will 
always have ATK_ROLE_FORM. <parameter>Since</parameter>: ATK-1.12.0
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_LINK</literal></term>
<listitem><simpara> The object is a hypertext anchor, i.e. a "link" in a
hypertext document.  Such objects are distinct from 'inline'
content which may also use the Hypertext/Hyperlink interfaces
to indicate the range/location within a text object where
an inline or embedded object lies.  <parameter>Since</parameter>: ATK-1.12.1
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_INPUT_METHOD_WINDOW</literal></term>
<listitem><simpara> The object is a window or similar viewport 
which is used to allow composition or input of a 'complex character',
in other words it is an "input method window." <parameter>Since</parameter>: ATK-1.12.1
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_ROLE_LAST_DEFINED</literal></term>
<listitem><simpara> not a valid role, used for finding end of the enumeration
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-role-register"/>atk_role_register ()</title>
<indexterm><primary>atk_role_register</primary></indexterm><programlisting><link linkend="AtkRole">AtkRole</link>     atk_role_register               (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Registers the role specified by <parameter>name</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a character string describing the new role.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="AtkRole"><type>AtkRole</type></link> for the new role.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkLayer"/>enum AtkLayer</title>
<indexterm><primary>AtkLayer</primary></indexterm><programlisting>typedef enum
{
  ATK_LAYER_INVALID,
  ATK_LAYER_BACKGROUND,
  ATK_LAYER_CANVAS,
  ATK_LAYER_WIDGET,
  ATK_LAYER_MDI,
  ATK_LAYER_POPUP,
  ATK_LAYER_OVERLAY,
  ATK_LAYER_WINDOW
} AtkLayer;
</programlisting>
<para>
Describes the layer of a component
</para>
<para>
These enumerated "layer values" are used when determining which UI
rendering layer a component is drawn into, which can help in making
determinations of when components occlude one another.</para>
<para>
</para><variablelist role="enum">
<varlistentry>
<term><literal>ATK_LAYER_INVALID</literal></term>
<listitem><simpara> The object does not have a layer
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_LAYER_BACKGROUND</literal></term>
<listitem><simpara> This layer is reserved for the desktop background
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_LAYER_CANVAS</literal></term>
<listitem><simpara> This layer is used for Canvas components
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_LAYER_WIDGET</literal></term>
<listitem><simpara> This layer is normally used for components
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_LAYER_MDI</literal></term>
<listitem><simpara> This layer is used for layered components
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_LAYER_POPUP</literal></term>
<listitem><simpara> This layer is used for popup components, such as menus
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_LAYER_OVERLAY</literal></term>
<listitem><simpara> This layer is reserved for future use.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>ATK_LAYER_WINDOW</literal></term>
<listitem><simpara> This layer is used for toplevel windows.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkImplementor"/>AtkImplementor</title>
<indexterm><primary>AtkImplementor</primary></indexterm><programlisting>typedef struct _AtkImplementor AtkImplementor;</programlisting>
<para>
The AtkImplementor interface is implemented by objects for which AtkObject peers may be obtained via calls to iface->(ref_accessible)(implementor);
</para></refsect2>
<refsect2>
<title><anchor id="AtkPropertyValues"/>AtkPropertyValues</title>
<indexterm><primary>AtkPropertyValues</primary></indexterm><programlisting>typedef struct {
  const gchar  *property_name;
  GValue old_value;
  GValue new_value;
} AtkPropertyValues;
</programlisting>
<para>
<parameter>note</parameter>: For most properties the old_value field of AtkPropertyValues will
not contain a valid value.
</para>
<para>
Currently, the only property for which old_value is used is
accessible-state; for instance if there is a focus state the
property change handler will be called for the object which lost the focus
with the old_value containing an AtkState value corresponding to focused
and the property change handler will be called for the object which
received the focus with the new_value containing an AtkState value
corresponding to focused.</para>
<para>
The Atk PropertyValue structure is used when notifying a change in property.
Currently, the only property for which old_value is used is
accessible-state; for instance if there is a focus change the
property change handler will be called for the object which lost the focus
with the old_value containing the AtkState value corresponding to focused
and the property change handler will be called for the object which
received the focus with the new_value containing the AtkState value
corresponding to focused.

</para><variablelist role="struct">
<varlistentry>
<term>const&nbsp;<link linkend="gchar">gchar</link>&nbsp;*<structfield>property_name</structfield>;</term>
<listitem><simpara> The name of the ATK property which is being presented or which has been changed.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GValue">GValue</link>&nbsp;<structfield>old_value</structfield>;</term>
<listitem><simpara> The old property value, NULL; in some contexts this value is undefined (see note below).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GValue">GValue</link>&nbsp;<structfield>new_value</structfield>;</term>
<listitem><simpara> The new value of the named property.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkFunction"/>AtkFunction ()</title>
<indexterm><primary>AtkFunction</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    (*AtkFunction)                  (<link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
An AtkFunction is a function definition used for padding which has been added 
to class and interface structures to allow for expansion in the future.

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>a gpointer to parameter data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>Nothing useful, this is only a dummy prototype.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="AtkPropertyChangeHandler"/>AtkPropertyChangeHandler ()</title>
<indexterm><primary>AtkPropertyChangeHandler</primary></indexterm><programlisting><link linkend="void">void</link>        (*AtkPropertyChangeHandler)     (<link linkend="AtkObject">AtkObject</link>*,
                                             <link linkend="AtkPropertyValues">AtkPropertyValues</link>*);</programlisting>
<para>
An AtkPropertyChangeHandler is a function which is executed when an AtkObject's property changes value. It is specified in a call to 
<link linkend="atk-object-connect-property-change-handler"><function>atk_object_connect_property_change_handler()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkPropertyValues"><type>AtkPropertyValues</type></link>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-implementor-ref-accessible"/>atk_implementor_ref_accessible ()</title>
<indexterm><primary>atk_implementor_ref_accessible</primary></indexterm><programlisting><link linkend="AtkObject">AtkObject</link>*  atk_implementor_ref_accessible  (<link linkend="AtkImplementor">AtkImplementor</link> *implementor);</programlisting>
<para>
Gets a reference to an object's <link linkend="AtkObject"><type>AtkObject</type></link> implementation, if
the object implements <link linkend="AtkObjectIface"><type>AtkObjectIface</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>implementor</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="GObject"><type>GObject</type></link> instance which should implement <link linkend="AtkImplementorIface"><type>AtkImplementorIface</type></link>
if a non-null return value is required.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a reference to an object's <link linkend="AtkObject"><type>AtkObject</type></link> implementation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-get-name"/>atk_object_get_name ()</title>
<indexterm><primary>atk_object_get_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* atk_object_get_name            (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the accessible name of the accessible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a character string representing the accessible name of the object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-get-description"/>atk_object_get_description ()</title>
<indexterm><primary>atk_object_get_description</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* atk_object_get_description     (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the accessible description of the accessible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a character string representing the accessible description
of the accessible.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-get-parent"/>atk_object_get_parent ()</title>
<indexterm><primary>atk_object_get_parent</primary></indexterm><programlisting><link linkend="AtkObject">AtkObject</link>*  atk_object_get_parent           (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the accessible parent of the accessible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="AtkObject"><type>AtkObject</type></link> representing the accessible parent of the accessible
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-get-n-accessible-children"/>atk_object_get_n_accessible_children ()</title>
<indexterm><primary>atk_object_get_n_accessible_children</primary></indexterm><programlisting><link linkend="gint">gint</link>        atk_object_get_n_accessible_children
                                            (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the number of accessible children of the accessible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an integer representing the number of accessible children
of the accessible.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-ref-accessible-child"/>atk_object_ref_accessible_child ()</title>
<indexterm><primary>atk_object_ref_accessible_child</primary></indexterm><programlisting><link linkend="AtkObject">AtkObject</link>*  atk_object_ref_accessible_child (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="gint">gint</link> i);</programlisting>
<para>
Gets a reference to the specified accessible child of the object.
The accessible children are 0-based so the first accessible child is
at index 0, the second at index 1 and so on.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&nbsp;:</term>
<listitem><simpara> a gint representing the position of the child, starting from 0
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link> representing the specified accessible child
of the accessible.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-ref-relation-set"/>atk_object_ref_relation_set ()</title>
<indexterm><primary>atk_object_ref_relation_set</primary></indexterm><programlisting><link linkend="AtkRelationSet">AtkRelationSet</link>* atk_object_ref_relation_set (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the <link linkend="AtkRelationSet"><type>AtkRelationSet</type></link> associated with the object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="AtkRelationSet"><type>AtkRelationSet</type></link> representing the relation set of the object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-get-layer"/>atk_object_get_layer ()</title>
<indexterm role="deprecated"><primary>atk_object_get_layer</primary></indexterm><programlisting><link linkend="AtkLayer">AtkLayer</link>    atk_object_get_layer            (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<warning><para><literal>atk_object_get_layer</literal> is deprecated and should not be used in newly-written code. Use atk_component_get_layer instead.</para></warning>
<para>
Gets the layer of the accessible.
</para>
<para>
Returns:</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="AtkLayer"><type>AtkLayer</type></link> which is the layer of the accessible
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-get-mdi-zorder"/>atk_object_get_mdi_zorder ()</title>
<indexterm role="deprecated"><primary>atk_object_get_mdi_zorder</primary></indexterm><programlisting><link linkend="gint">gint</link>        atk_object_get_mdi_zorder       (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<warning><para><literal>atk_object_get_mdi_zorder</literal> is deprecated and should not be used in newly-written code. Use atk_component_get_mdi_zorder instead.</para></warning>
<para>
Gets the zorder of the accessible. The value G_MININT will be returned 
if the layer of the accessible is not ATK_LAYER_MDI.
</para>
<para>
Returns:</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a gint which is the zorder of the accessible, i.e. the depth at 
which the component is shown in relation to other components in the same 
container.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-get-role"/>atk_object_get_role ()</title>
<indexterm><primary>atk_object_get_role</primary></indexterm><programlisting><link linkend="AtkRole">AtkRole</link>     atk_object_get_role             (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the role of the accessible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="AtkRole"><type>AtkRole</type></link> which is the role of the accessible
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-ref-state-set"/>atk_object_ref_state_set ()</title>
<indexterm><primary>atk_object_ref_state_set</primary></indexterm><programlisting><link linkend="AtkStateSet">AtkStateSet</link>* atk_object_ref_state_set       (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets a reference to the state set of the accessible; the caller must
unreference it when it is no longer needed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a reference to an <link linkend="AtkStateSet"><type>AtkStateSet</type></link> which is the state
set of the accessible
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-get-index-in-parent"/>atk_object_get_index_in_parent ()</title>
<indexterm><primary>atk_object_get_index_in_parent</primary></indexterm><programlisting><link linkend="gint">gint</link>        atk_object_get_index_in_parent  (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the 0-based index of this accessible in its parent; returns -1 if the
accessible does not have an accessible parent.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an integer which is the index of the accessible in its parent
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-set-name"/>atk_object_set_name ()</title>
<indexterm><primary>atk_object_set_name</primary></indexterm><programlisting><link linkend="void">void</link>        atk_object_set_name             (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Sets the accessible name of the accessible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a character string to be set as the accessible name
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-set-description"/>atk_object_set_description ()</title>
<indexterm><primary>atk_object_set_description</primary></indexterm><programlisting><link linkend="void">void</link>        atk_object_set_description      (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             const <link linkend="gchar">gchar</link> *description);</programlisting>
<para>
Sets the accessible description of the accessible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>description</parameter>&nbsp;:</term>
<listitem><simpara> a character string to be set as the accessible description
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-set-parent"/>atk_object_set_parent ()</title>
<indexterm><primary>atk_object_set_parent</primary></indexterm><programlisting><link linkend="void">void</link>        atk_object_set_parent           (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkObject">AtkObject</link> *parent);</programlisting>
<para>
Sets the accessible parent of the accessible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link> to be set as the accessible parent
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-set-role"/>atk_object_set_role ()</title>
<indexterm><primary>atk_object_set_role</primary></indexterm><programlisting><link linkend="void">void</link>        atk_object_set_role             (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkRole">AtkRole</link> role);</programlisting>
<para>
Sets the role of the accessible.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>role</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkRole"><type>AtkRole</type></link> to be set as the role
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-connect-property-change-handler"/>atk_object_connect_property_change_handler ()</title>
<indexterm><primary>atk_object_connect_property_change_handler</primary></indexterm><programlisting><link linkend="guint">guint</link>       atk_object_connect_property_change_handler
                                            (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkPropertyChangeHandler">AtkPropertyChangeHandler</link> *handler);</programlisting>
<para>
Specifies a function to be called when a property changes value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler</parameter>&nbsp;:</term>
<listitem><simpara> a function to be called when a property changes its value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="guint"><type>guint</type></link> which is the handler id used in 
<link linkend="atk-object-remove-property-change-handler"><function>atk_object_remove_property_change_handler()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-remove-property-change-handler"/>atk_object_remove_property_change_handler ()</title>
<indexterm><primary>atk_object_remove_property_change_handler</primary></indexterm><programlisting><link linkend="void">void</link>        atk_object_remove_property_change_handler
                                            (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="guint">guint</link> handler_id);</programlisting>
<para>
Removes a property change handler.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler_id</parameter>&nbsp;:</term>
<listitem><simpara> a guint which identifies the handler to be removed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-notify-state-change"/>atk_object_notify_state_change ()</title>
<indexterm><primary>atk_object_notify_state_change</primary></indexterm><programlisting><link linkend="void">void</link>        atk_object_notify_state_change  (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkState">AtkState</link> state,
                                             <link linkend="gboolean">gboolean</link> value);</programlisting>
<para>
Emits a state-change signal for the specified state.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="AtkState"><type>AtkState</type></link> whose state is changed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> a gboolean which indicates whether the state is being set on or off
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-initialize"/>atk_object_initialize ()</title>
<indexterm><primary>atk_object_initialize</primary></indexterm><programlisting><link linkend="void">void</link>        atk_object_initialize           (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
This function is called when implementing subclasses of <link linkend="AtkObject"><type>AtkObject</type></link>.
It does initialization required for the new object. It is intended
that this function should called only in the ...<link linkend="new"><function>_new()</function></link> functions used
to create an instance of a subclass of <link linkend="AtkObject"><type>AtkObject</type></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="AtkObject"><type>AtkObject</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="gpointer"><type>gpointer</type></link> which identifies the object for which the AtkObject was created.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-add-relationship"/>atk_object_add_relationship ()</title>
<indexterm><primary>atk_object_add_relationship</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    atk_object_add_relationship     (<link linkend="AtkObject">AtkObject</link> *object,
                                             <link linkend="AtkRelationType">AtkRelationType</link> relationship,
                                             <link linkend="AtkObject">AtkObject</link> *target);</programlisting>
<para>
Adds a relationship of the specified type with the specified target.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkObject"><type>AtkObject</type></link> to which an AtkRelation is to be added. 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>relationship</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkRelationType"><type>AtkRelationType</type></link> of the relation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>target</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkObject"><type>AtkObject</type></link> which is to be the target of the relation.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>TRUE if the relationship is added.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-remove-relationship"/>atk_object_remove_relationship ()</title>
<indexterm><primary>atk_object_remove_relationship</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    atk_object_remove_relationship  (<link linkend="AtkObject">AtkObject</link> *object,
                                             <link linkend="AtkRelationType">AtkRelationType</link> relationship,
                                             <link linkend="AtkObject">AtkObject</link> *target);</programlisting>
<para>
Removes a relationship of the specified type with the specified target.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkObject"><type>AtkObject</type></link> from which an AtkRelation is to be removed. 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>relationship</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkRelationType"><type>AtkRelationType</type></link> of the relation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>target</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkObject"><type>AtkObject</type></link> which is the target of the relation to be removed.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>TRUE if the relationship is removed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-object-get-attributes"/>atk_object_get_attributes ()</title>
<indexterm role="ATK 1.12"><primary>atk_object_get_attributes</primary></indexterm><programlisting><link linkend="AtkAttributeSet">AtkAttributeSet</link>* atk_object_get_attributes  (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Get a list of properties applied to this object as a whole, as an <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link> consisting of 
name-value pairs. As such these attributes may be considered weakly-typed properties or annotations, 
as distinct from strongly-typed object data available via other get/set methods.
Not all objects have explicit "name-value pair" <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link> properties.
</para>
<para>
Returns:</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>accessible</parameter>&nbsp;:</term>
<listitem><simpara> An <link linkend="AtkObject"><type>AtkObject</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="AtkAttributeSet"><type>AtkAttributeSet</type></link> consisting of all explicit properties/annotations applied to 
the object, or an empty set if the object has no name-value pair attributes assigned to it.
</simpara></listitem></varlistentry>
</variablelist><para>Since  ATK 1.12

</para></refsect2>
<refsect2>
<title><anchor id="atk-role-get-name"/>atk_role_get_name ()</title>
<indexterm><primary>atk_role_get_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* atk_role_get_name              (<link linkend="AtkRole">AtkRole</link> role);</programlisting>
<para>
Gets the description string describing the <link linkend="AtkRole"><type>AtkRole</type></link> <parameter>role</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>role</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkRole"><type>AtkRole</type></link> whose name is required
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the string describing the AtkRole
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-role-get-localized-name"/>atk_role_get_localized_name ()</title>
<indexterm><primary>atk_role_get_localized_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>* atk_role_get_localized_name    (<link linkend="AtkRole">AtkRole</link> role);</programlisting>
<para>
Gets the localized description string describing the <link linkend="AtkRole"><type>AtkRole</type></link> <parameter>role</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>role</parameter>&nbsp;:</term>
<listitem><simpara> The <link linkend="AtkRole"><type>AtkRole</type></link> whose localized name is required
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the localized string describing the AtkRole
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="atk-role-for-name"/>atk_role_for_name ()</title>
<indexterm><primary>atk_role_for_name</primary></indexterm><programlisting><link linkend="AtkRole">AtkRole</link>     atk_role_for_name               (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Get the <link linkend="AtkRole"><type>AtkRole</type></link> type corresponding to a rolew name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> a string which is the (non-localized) name of an ATK role.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="AtkRole"><type>AtkRole</type></link> enumerated type corresponding to the specified
name,
         or <link linkend="ATK-ROLE-INVALID:CAPS"><type>ATK_ROLE_INVALID</type></link> if no matching role is found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1>
<title>Properties</title>
<refsect2><title><anchor id="AtkObject--accessible-component-layer"/>The &quot;<literal>accessible-component-layer</literal>&quot; property</title>
<programlisting>  &quot;accessible-component-layer&quot; <link linkend="gint">gint</link>                  : Read</programlisting>
<para>The accessible layer of this object.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>
<refsect2><title><anchor id="AtkObject--accessible-component-mdi-zorder"/>The &quot;<literal>accessible-component-mdi-zorder</literal>&quot; property</title>
<programlisting>  &quot;accessible-component-mdi-zorder&quot; <link linkend="gint">gint</link>                  : Read</programlisting>
<para>The accessible MDI value of this object.</para><para>Default value: -2147483648</para>
</refsect2>
<refsect2><title><anchor id="AtkObject--accessible-description"/>The &quot;<literal>accessible-description</literal>&quot; property</title>
<programlisting>  &quot;accessible-description&quot; <link linkend="gchararray">gchararray</link>            : Read / Write</programlisting>
<para>Description of an object, formatted for assistive technology access.</para><para>Default value: NULL</para>
</refsect2>
<refsect2><title><anchor id="AtkObject--accessible-hypertext-nlinks"/>The &quot;<literal>accessible-hypertext-nlinks</literal>&quot; property</title>
<programlisting>  &quot;accessible-hypertext-nlinks&quot; <link linkend="gint">gint</link>                  : Read</programlisting>
<para>The number of links which the current AtkHypertext has.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>
<refsect2><title><anchor id="AtkObject--accessible-name"/>The &quot;<literal>accessible-name</literal>&quot; property</title>
<programlisting>  &quot;accessible-name&quot;      <link linkend="gchararray">gchararray</link>            : Read / Write</programlisting>
<para>Object instance's name formatted for assistive technology access.</para><para>Default value: NULL</para>
</refsect2>
<refsect2><title><anchor id="AtkObject--accessible-parent"/>The &quot;<literal>accessible-parent</literal>&quot; property</title>
<programlisting>  &quot;accessible-parent&quot;    <link linkend="AtkObject">AtkObject</link>             : Read / Write</programlisting>
<para>Is used to notify that the parent has changed.</para></refsect2>
<refsect2><title><anchor id="AtkObject--accessible-role"/>The &quot;<literal>accessible-role</literal>&quot; property</title>
<programlisting>  &quot;accessible-role&quot;      <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>The accessible role of this object.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>
<refsect2><title><anchor id="AtkObject--accessible-table-caption"/>The &quot;<literal>accessible-table-caption</literal>&quot; property</title>
<programlisting>  &quot;accessible-table-caption&quot; <link linkend="gchararray">gchararray</link>            : Read / Write</programlisting>
<para>Is used to notify that the table caption has changed; this property should not be used. accessible-table-caption-object should be used instead.</para><para>Default value: NULL</para>
</refsect2>
<refsect2><title><anchor id="AtkObject--accessible-table-caption-object"/>The &quot;<literal>accessible-table-caption-object</literal>&quot; property</title>
<programlisting>  &quot;accessible-table-caption-object&quot; <link linkend="AtkObject">AtkObject</link>             : Read / Write</programlisting>
<para>Is used to notify that the table caption has changed.</para></refsect2>
<refsect2><title><anchor id="AtkObject--accessible-table-column-description"/>The &quot;<literal>accessible-table-column-description</literal>&quot; property</title>
<programlisting>  &quot;accessible-table-column-description&quot; <link linkend="gchararray">gchararray</link>            : Read / Write</programlisting>
<para>Is used to notify that the table column description has changed.</para><para>Default value: NULL</para>
</refsect2>
<refsect2><title><anchor id="AtkObject--accessible-table-column-header"/>The &quot;<literal>accessible-table-column-header</literal>&quot; property</title>
<programlisting>  &quot;accessible-table-column-header&quot; <link linkend="AtkObject">AtkObject</link>             : Read / Write</programlisting>
<para>Is used to notify that the table column header has changed.</para></refsect2>
<refsect2><title><anchor id="AtkObject--accessible-table-row-description"/>The &quot;<literal>accessible-table-row-description</literal>&quot; property</title>
<programlisting>  &quot;accessible-table-row-description&quot; <link linkend="gchararray">gchararray</link>            : Read / Write</programlisting>
<para>Is used to notify that the table row description has changed.</para><para>Default value: NULL</para>
</refsect2>
<refsect2><title><anchor id="AtkObject--accessible-table-row-header"/>The &quot;<literal>accessible-table-row-header</literal>&quot; property</title>
<programlisting>  &quot;accessible-table-row-header&quot; <link linkend="AtkObject">AtkObject</link>             : Read / Write</programlisting>
<para>Is used to notify that the table row header has changed.</para></refsect2>
<refsect2><title><anchor id="AtkObject--accessible-table-summary"/>The &quot;<literal>accessible-table-summary</literal>&quot; property</title>
<programlisting>  &quot;accessible-table-summary&quot; <link linkend="AtkObject">AtkObject</link>             : Read / Write</programlisting>
<para>Is used to notify that the table summary has changed.</para></refsect2>
<refsect2><title><anchor id="AtkObject--accessible-value"/>The &quot;<literal>accessible-value</literal>&quot; property</title>
<programlisting>  &quot;accessible-value&quot;     <link linkend="gdouble">gdouble</link>               : Read / Write</programlisting>
<para>Is used to notify that the value has changed.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
</refsect2>

</refsect1>

<refsect1>
<title>Signals</title>
<refsect2><title><anchor id="AtkObject-active-descendant-changed"/>The &quot;active-descendant-changed&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="gpointer">gpointer</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The "active-descendant-changed" signal is emitted by an object which has
the state ATK_STATE_MANAGES_DESCENDANTS when the focus object in the
object changes. For instance, a table will emit the signal when the cell
in the table which has focus changes.
</para><variablelist role="params">
<varlistentry><term><parameter>atkobject</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>the newly focused object.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="AtkObject-children-changed"/>The &quot;children-changed&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="guint">guint</link> arg1,
                                            <link linkend="gpointer">gpointer</link> arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The signal "children-changed" is emitted when a child is added or
removed form an object. It supports two details: "add" and "remove"
</para><variablelist role="params">
<varlistentry><term><parameter>atkobject</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>The index of the added or removed child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&nbsp;:</term>
<listitem><simpara>A gpointer to the child AtkObject which was added or removed

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="AtkObject-focus-event"/>The &quot;focus-event&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="gboolean">gboolean</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The signal "focus-event" is emitted when an object gains or loses focus.
</para><variablelist role="params">
<varlistentry><term><parameter>atkobject</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>A boolean value which indicates whether the object gained or lost focus.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="AtkObject-property-change"/>The &quot;property-change&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="gpointer">gpointer</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The signal "property-change" is emitted when an object's property
value changes. The detail identifies the name of the property whose
value has changed.
</para><variablelist role="params">
<varlistentry><term><parameter>atkobject</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>The new value of the property which changed.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="AtkObject-state-change"/>The &quot;state-change&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="gchar">gchar</link> *arg1,
                                            <link linkend="gboolean">gboolean</link> arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The "state-change" signal is emitted  when an object's state changes.
The detail value identifies the state type which has changed.
</para><variablelist role="params">
<varlistentry><term><parameter>atkobject</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>The name of the state which has changed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&nbsp;:</term>
<listitem><simpara>A boolean which indicates whether the state has been set or unset.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="AtkObject-visible-data-changed"/>The &quot;visible-data-changed&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="AtkObject">AtkObject</link> *atkobject,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The "visible-data-changed" signal is emitted when the visual appearance of 
the object changed.
</para><variablelist role="params">
<varlistentry><term><parameter>atkobject</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1>
<title>See Also</title>
<para>
See also: <link linkend="AtkObjectFactory"><type>AtkObjectFactory</type></link>, <link linkend="AtkRegistry"><type>AtkRegistry</type></link>.
( GTK+ users see also <link linkend="GtkAccessible"><type>GtkAccessible</type></link>).
</para>
</refsect1>

</refentry>
