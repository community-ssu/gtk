<!-- ##### SECTION Title ##### -->
Unified bufferd network I/O

<!-- ##### SECTION Short_Description ##### -->
Posix style buffered network input/output.

<!-- ##### SECTION Long_Description ##### -->
<para>
The GnomeVFSSocketBuffer functions are very similar to the GnomeVFSSocket
ones. The only difference is that all input/output is done through an internally
managed buffer. This might increase I/O performance as well as give you the
possibility to use some convenient functions like #gnome_vfs_socket_buffer_peekc
and #gnome_vfs_socket_buffer_read_until.

<para>
</para>

You can manually force all internally buffered data to get written with
#gnome_vfs_socket_buffer_flush.

</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### FUNCTION gnome_vfs_socket_buffer_new ##### -->
<para>

</para>

@socket: 
@Returns: 


<!-- ##### FUNCTION gnome_vfs_socket_buffer_destroy ##### -->
<para>

</para>

@socket_buffer: 
@close_socket: 
@cancellation: 
@Returns: 


<!-- ##### FUNCTION gnome_vfs_socket_buffer_read ##### -->
<para>

</para>

@socket_buffer: 
@buffer: 
@bytes: 
@bytes_read: 
@cancellation: 
@Returns: 


<!-- ##### FUNCTION gnome_vfs_socket_buffer_peekc ##### -->
<para>

</para>

@socket_buffer: 
@character: 
@cancellation: 
@Returns: 


<!-- ##### FUNCTION gnome_vfs_socket_buffer_write ##### -->
<para>

</para>

@socket_buffer: 
@buffer: 
@bytes: 
@bytes_written: 
@cancellation: 
@Returns: 


<!-- ##### FUNCTION gnome_vfs_socket_buffer_flush ##### -->
<para>

</para>

@socket_buffer: 
@cancellation: 
@Returns: 
<!-- # Unused Parameters # -->
@buffer: 


<!-- ##### FUNCTION gnome_vfs_socket_buffer_read_until ##### -->
<para>

</para>

@socket_buffer: 
@buffer: 
@bytes: 
@boundary: 
@boundary_len: 
@bytes_read: 
@got_boundary: 
@cancellation: 
@Returns: 


