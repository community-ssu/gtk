Index: libgnomevfs/gnome-vfs-volume-monitor-daemon.c
===================================================================
--- libgnomevfs/gnome-vfs-volume-monitor-daemon.c	(revision 11674)
+++ libgnomevfs/gnome-vfs-volume-monitor-daemon.c	(arbetskopia)
@@ -841,6 +841,14 @@ static char *
 make_volume_name_from_path_and_fs (const char *mount_path, const char *fs_type)
 {
 	const char *name;
+
+	/* Maemo patch. */
+	char *tmp;
+	tmp = _gnome_vfs_filesystem_get_label_for_mmc (mount_path);
+	if (tmp) {
+		return tmp;
+	}
+	/* End of Maemo patch. */
 	
 	if (mount_path[0] == '/' && mount_path[1] == '\0') {
 		return g_strdup (_("Root Volume"));
Index: libgnomevfs/gnome-vfs-filesystem-type.c
===================================================================
--- libgnomevfs/gnome-vfs-filesystem-type.c	(revision 11674)
+++ libgnomevfs/gnome-vfs-filesystem-type.c	(arbetskopia)
@@ -127,3 +127,115 @@ _gnome_vfs_filesystem_use_trash (const c
 	
 	return FALSE;
 }
+
+ /* Maemo patch */
+#define MMC_LABEL_FILE                    "/tmp/.mmc-volume-label"
+#define MMC_LABEL_FILE2                   "/tmp/.internal-mmc-volume-label"
+#define MMC_LABEL_LENGTH                  11
+#define MMC_LABEL_UNDEFINED_NAME          "mmc-undefined-name"
+#define MMC_LABEL_UNDEFINED_NAME_INTERNAL "mmc-undefined-name-internal"
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+/* Same as make_utf8 but without adding "Invalid unicode". */
+static char *
+make_utf8_barebone (const char *name)
+{
+	GString    *string;
+	const char *remainder, *invalid;
+	int         remaining_bytes, valid_bytes;
+
+	string = NULL;
+	remainder = name;
+	remaining_bytes = strlen (name);
+
+	while (remaining_bytes != 0) {
+		if (g_utf8_validate (remainder, remaining_bytes, &invalid)) {
+			break;
+		}
+		valid_bytes = invalid - remainder;
+
+		if (string == NULL) {
+			string = g_string_sized_new (remaining_bytes);
+		}
+		g_string_append_len (string, remainder, valid_bytes);
+		g_string_append_c (string, '?');
+
+		remaining_bytes -= valid_bytes + 1;
+		remainder = invalid + 1;
+	}
+
+	if (string == NULL) {
+		return g_strdup (name);
+	}
+
+	g_string_append (string, remainder);
+
+	return g_string_free (string, FALSE);
+}
+
+static char *
+get_mmc_name (gboolean internal)
+{
+	const gchar *label_file;
+	int          fd;
+	ssize_t      size_read;
+	char         buf[MMC_LABEL_LENGTH + 1];
+
+	if (internal) {
+		label_file = MMC_LABEL_FILE2;
+	} else {
+		label_file = MMC_LABEL_FILE;
+	}
+	
+	if (!g_file_test (label_file, G_FILE_TEST_EXISTS)) {
+		goto unknown;
+	}
+
+	fd = open (label_file, O_RDONLY);
+	if (fd < 0) {
+		goto unknown;
+	}
+
+	size_read = read (fd, buf, MMC_LABEL_LENGTH);
+	close (fd);
+	
+	if (size_read > 0) {
+		buf[size_read] = '\0';
+
+		if (!g_utf8_validate (buf, size_read, NULL)) {
+			return make_utf8_barebone (buf);
+		}
+		
+		return g_strndup (buf, size_read);
+	}
+
+unknown:
+	if (internal) {
+		return g_strdup (MMC_LABEL_UNDEFINED_NAME_INTERNAL);
+	} else {
+		return g_strdup (MMC_LABEL_UNDEFINED_NAME);
+	}		
+}
+
+char *
+_gnome_vfs_filesystem_get_label_for_mmc (const char *mount_path)
+{
+	const char *mmc_mount;
+
+	mmc_mount = g_getenv ("MMC_MOUNTPOINT");
+	if (mmc_mount && g_str_has_prefix (mount_path, mmc_mount)) {
+		return get_mmc_name (FALSE);
+	}
+ 
+	mmc_mount = g_getenv ("INTERNAL_MMC_MOUNTPOINT");
+	if (mmc_mount && g_str_has_prefix (mount_path, mmc_mount)) {
+		return get_mmc_name (TRUE);
+	}
+	
+	return NULL;
+}
+/* End of maemo patch */
Index: libgnomevfs/gnome-vfs-filesystem-type.h
===================================================================
--- libgnomevfs/gnome-vfs-filesystem-type.h	(revision 11674)
+++ libgnomevfs/gnome-vfs-filesystem-type.h	(arbetskopia)
@@ -28,5 +28,6 @@
 
 char *   _gnome_vfs_filesystem_volume_name (const char *fs_type);
 gboolean _gnome_vfs_filesystem_use_trash   (const char *fs_type);
+char *   _gnome_vfs_filesystem_get_label_for_mmc (const char *mount_path);
 
 #endif /* GNOME_VFS_FILESYSTEM_TYPE_H */
Index: libgnomevfs/gnome-vfs-hal-mounts.c
===================================================================
--- libgnomevfs/gnome-vfs-hal-mounts.c	(revision 11674)
+++ libgnomevfs/gnome-vfs-hal-mounts.c	(arbetskopia)
@@ -570,6 +570,12 @@ _hal_volume_policy_get_display_name (Gno
 		goto out;
 	}
 
+	name = _gnome_vfs_filesystem_get_label_for_mmc (libhal_volume_get_mount_point (hal_volume));
+	if (name) {
+		g_print ("Volume fallback: %s\n", name);
+		goto out;
+	}
+	
 	/* Fallback: size of media */
 
 	size_str = gnome_vfs_format_file_size_for_display (libhal_volume_get_size (hal_volume));
