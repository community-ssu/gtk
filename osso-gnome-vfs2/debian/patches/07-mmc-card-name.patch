Index: libgnomevfs/gnome-vfs-volume-monitor-daemon.c
===================================================================
--- libgnomevfs/gnome-vfs-volume-monitor-daemon.c	(revision 11974)
+++ libgnomevfs/gnome-vfs-volume-monitor-daemon.c	(arbetskopia)
@@ -841,6 +841,14 @@ static char *
 make_volume_name_from_path_and_fs (const char *mount_path, const char *fs_type)
 {
 	const char *name;
+
+	/* Maemo patch. */
+	char *tmp;
+	tmp = _gnome_vfs_filesystem_get_label_for_mount_point (mount_path);
+	if (tmp) {
+		return tmp;
+	}
+	/* End of Maemo patch. */
 	
 	if (mount_path[0] == '/' && mount_path[1] == '\0') {
 		return g_strdup (_("Root Volume"));
Index: libgnomevfs/gnome-vfs-filesystem-type.c
===================================================================
--- libgnomevfs/gnome-vfs-filesystem-type.c	(revision 11974)
+++ libgnomevfs/gnome-vfs-filesystem-type.c	(arbetskopia)
@@ -127,3 +127,137 @@ _gnome_vfs_filesystem_use_trash (const c
 	
 	return FALSE;
 }
+
+ /* Maemo patch */
+#define MMC_LABEL_FILE                    "/tmp/.mmc-volume-label"
+#define MMC_LABEL_FILE2                   "/tmp/.internal-mmc-volume-label"
+#define MMC_LABEL_LENGTH                  11
+#define MMC_LABEL_UNDEFINED_NAME          "mmc-undefined-name"
+#define MMC_LABEL_UNDEFINED_NAME_INTERNAL "mmc-undefined-name-internal"
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+/* Same as make_utf8 but without adding "Invalid unicode". */
+static char *
+make_utf8_barebone (const char *name)
+{
+	GString    *string;
+	const char *remainder, *invalid;
+	int         remaining_bytes, valid_bytes;
+
+	string = NULL;
+	remainder = name;
+	remaining_bytes = strlen (name);
+
+	while (remaining_bytes != 0) {
+		if (g_utf8_validate (remainder, remaining_bytes, &invalid)) {
+			break;
+		}
+		valid_bytes = invalid - remainder;
+
+		if (string == NULL) {
+			string = g_string_sized_new (remaining_bytes);
+		}
+		g_string_append_len (string, remainder, valid_bytes);
+		g_string_append_c (string, '?');
+
+		remaining_bytes -= valid_bytes + 1;
+		remainder = invalid + 1;
+	}
+
+	if (string == NULL) {
+		return g_strdup (name);
+	}
+
+	g_string_append (string, remainder);
+
+	return g_string_free (string, FALSE);
+}
+
+static char *
+get_mmc_name (gboolean internal)
+{
+	const gchar *label_file;
+	int          fd;
+	ssize_t      size_read;
+	char         buf[MMC_LABEL_LENGTH + 1];
+
+	if (internal) {
+		label_file = MMC_LABEL_FILE2;
+	} else {
+		label_file = MMC_LABEL_FILE;
+	}
+	
+	if (!g_file_test (label_file, G_FILE_TEST_EXISTS)) {
+		goto unknown;
+	}
+
+	fd = open (label_file, O_RDONLY);
+	if (fd < 0) {
+		goto unknown;
+	}
+
+	size_read = read (fd, buf, MMC_LABEL_LENGTH);
+	close (fd);
+	
+	if (size_read > 0) {
+		buf[size_read] = '\0';
+
+		if (!g_utf8_validate (buf, size_read, NULL)) {
+			return make_utf8_barebone (buf);
+		}
+		
+		return g_strndup (buf, size_read);
+	}
+
+unknown:
+	if (internal) {
+		return g_strdup (MMC_LABEL_UNDEFINED_NAME_INTERNAL);
+	} else {
+		return g_strdup (MMC_LABEL_UNDEFINED_NAME);
+	}		
+}
+
+char *
+_gnome_vfs_filesystem_get_label_for_mount_point (const char *mount_point)
+{
+	const char *mmc_mount;
+
+	if (!mount_point) {
+		return NULL;
+	}
+
+	mmc_mount = g_getenv ("MMC_MOUNTPOINT");
+	if (mmc_mount && g_str_has_prefix (mount_point, mmc_mount)) {
+		return get_mmc_name (FALSE);
+	}
+
+       mmc_mount = g_getenv ("INTERNAL_MMC_MOUNTPOINT");
+       if (mmc_mount && g_str_has_prefix (mount_point, mmc_mount)) {
+               return get_mmc_name (TRUE);
+       }
+
+       return NULL;
+}
+
+char *
+_gnome_vfs_filesystem_get_label_for_slot_name (const char *slot_name)
+{
+	if (!slot_name) {
+		return NULL;
+	}
+	
+	if (strcmp (slot_name, "external") == 0) {
+		return get_mmc_name (FALSE);
+	}
+ 
+	if (strcmp (slot_name, "internal") == 0) {
+		return get_mmc_name (TRUE);
+	}
+	
+	return NULL;
+}
+/* End of maemo patch */
Index: libgnomevfs/gnome-vfs-filesystem-type.h
===================================================================
--- libgnomevfs/gnome-vfs-filesystem-type.h	(revision 11974)
+++ libgnomevfs/gnome-vfs-filesystem-type.h	(arbetskopia)
@@ -28,5 +28,7 @@
 
 char *   _gnome_vfs_filesystem_volume_name (const char *fs_type);
 gboolean _gnome_vfs_filesystem_use_trash   (const char *fs_type);
+char *   _gnome_vfs_filesystem_get_label_for_mount_point (const char *mount_point);
+char *   _gnome_vfs_filesystem_get_label_for_slot_name (const char *slot_name);
 
 #endif /* GNOME_VFS_FILESYSTEM_TYPE_H */
Index: libgnomevfs/gnome-vfs-hal-mounts.c
===================================================================
--- libgnomevfs/gnome-vfs-hal-mounts.c	(revision 11974)
+++ libgnomevfs/gnome-vfs-hal-mounts.c	(arbetskopia)
@@ -314,6 +314,47 @@ out:
 	}
 }
 
+static char *
+get_mmc_volume_label (GnomeVFSVolumeMonitorDaemon *volume_monitor_daemon,
+		      LibHalDrive *hal_drive)
+{
+	char *parent_udi;
+	char *host_udi;
+	char *slot_name;
+	char *name;
+
+	parent_udi = libhal_device_get_property_string (volume_monitor_daemon->hal_ctx,
+							libhal_drive_get_udi (hal_drive),
+							"info.parent",
+							NULL);
+	if (!parent_udi) {
+		return NULL;
+	}
+
+	host_udi = libhal_device_get_property_string (volume_monitor_daemon->hal_ctx,
+						      parent_udi,
+						      "info.parent",
+						      NULL);
+	libhal_free_string (parent_udi);
+	if (!host_udi) {
+		return NULL;
+	}
+
+	slot_name = libhal_device_get_property_string (volume_monitor_daemon->hal_ctx,
+						       host_udi,
+						       "mmc_host.slot_name",
+						       NULL);
+	libhal_free_string (host_udi);
+	if (!slot_name) {
+		return NULL;
+	}
+	
+	name = _gnome_vfs_filesystem_get_label_for_slot_name (slot_name);
+	libhal_free_string (slot_name);
+	
+	return name;
+}
+
 /*------------------------------------------------------------------------*/
 /* hal_volume may be NULL */
 static char *
@@ -327,6 +368,10 @@ _hal_drive_policy_get_display_name (Gnom
 	char *vm_name;
 	gboolean may_prepend_external;
 
+	name = get_mmc_volume_label (volume_monitor_daemon, hal_drive);
+	if (name) {
+		return name;
+	}
 
 	name = NULL;
 	may_prepend_external = FALSE;
@@ -484,6 +529,11 @@ _hal_volume_policy_get_display_name (Gno
 	char *name;
 	char *size_str;
 
+	name = get_mmc_volume_label (volume_monitor_daemon, hal_drive);
+	if (name) {
+		return name;
+	}
+
 	name = NULL;
 
 	drive_type = libhal_drive_get_type (hal_drive);
