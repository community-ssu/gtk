--- imported/neon/ne_request.c-unmod	2006-10-18 13:06:28.000000000 +0200
+++ imported/neon/ne_request.c	2006-10-18 13:06:54.000000000 +0200
@@ -784,19 +784,30 @@ static int read_response_block(ne_reques
 	if (resp->body.chunk.remain == 0) {
 	    unsigned long chunk_len;
 	    char *ptr;
+ 	    ssize_t ret;
 
             /* Read the chunk size line into a temporary buffer. */
-            SOCK_ERR(req,
-                     ne_sock_readline(sock, req->respbuf, sizeof req->respbuf),
-                     _("Could not read chunk size"));
-            NE_DEBUG(NE_DBG_HTTP, "[chunk] < %s", req->respbuf);
-            chunk_len = strtoul(req->respbuf, &ptr, 16);
-	    /* limit chunk size to <= UINT_MAX, so it will probably
-	     * fit in a size_t. */
-	    if (ptr == req->respbuf || 
-		chunk_len == ULONG_MAX || chunk_len > UINT_MAX) {
-		return aborted(req, _("Could not parse chunk size"), 0);
+	    ret = ne_sock_readline(sock, req->respbuf, sizeof req->respbuf);
+ 	    if (ret == NE_SOCK_CLOSED) {
+ 		    /* Treat CLOSED as EOF (no chunk size) as the ending
+ 		     * chunk... this is a workaround for broken libupnp servers
+ 		     * that doesn't send the last 0 sized chunk.
+ 		     */
+ 		    chunk_len = 0;
+ 	    }
+ 	    else if (ret < 0) {
+ 		    return aborted(req, "Could not read chunk size", ret);
+ 	    } else {
+		    NE_DEBUG(NE_DBG_HTTP, "[chunk] < %s", req->respbuf);
+		    chunk_len = strtoul(req->respbuf, &ptr, 16);
+		    /* limit chunk size to <= UINT_MAX, so it will probably
+		     * fit in a size_t. */
+		    if (ptr == req->respbuf || 
+			chunk_len == ULONG_MAX || chunk_len > UINT_MAX) {
+			    return aborted(req, _("Could not parse chunk size"), 0);
+		    }
 	    }
+	    
 	    NE_DEBUG(NE_DBG_HTTP, "Got chunk size: %lu\n", chunk_len);
 	    resp->body.chunk.remain = chunk_len;
 	}
