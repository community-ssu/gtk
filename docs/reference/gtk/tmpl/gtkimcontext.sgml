<!-- ##### SECTION Title ##### -->
GtkIMContext

<!-- ##### SECTION Short_Description ##### -->
Base class for input method contexts

<!-- ##### SECTION Long_Description ##### -->
<para>

The following example shows how the IM context filter functions can be used
in a widget.

<informalexample>
<programlisting>
...

static gboolean
my_custom_widget_key_press (GtkWidget *widget, GdkEventKey *event, gpointer data)
{
  GtkIMContext *context = GTK_IM_CONTEXT(data);

  if (hildon_gtk_im_context_filter_event (context, event))
    return TRUE;

  if (gtk_im_context_filter_keypress (context, event))
    return TRUE;
  else
    {
      /* Do something widget specific with the key press,
	 for example moving the cursor */
      ...

      return FALSE;
    }
}

static gboolean
my_custom_widget_button_press (GtkWidget *widget, GdkEventButton *event, gpointer data)
{
  GtkIMContext *context = GTK_IM_CONTEXT(data);

  if (hildon_gtk_im_context_filter_event (context, event))
    return TRUE;

  /* Do something widget specific with the button press,
     for example focusing our widget */
  if (!GTK_WIDGET_HAS_FOCUS (widget))
    {
      entry->in_click = TRUE;
      gtk_widget_grab_focus (widget);
      entry->in_click = FALSE;
    }

  ...

  return FALSE;
}

static gboolean
my_custom_widget_focus_in (GtkWidget *widget, GdkEventFocus *event, gpointer data)
{
  GtkIMContext *context = GTK_IM_CONTEXT(data);

  if (hildon_gtk_im_context_filter_event (context, event))
    return TRUE;

  gtk_im_context_focus_in (entry->im_context);

  /* Do something widget specific with the focus event,
     for example queuing a redraw of the widget */
  ...

  return FALSE;
}

...

GtkIMMultiContext *context = gtk_im_multicontext_new (<!-- -->);
MyCustomWidget *widget = my_custom_widget_new (<!-- -->);

g_signal_connect (widget, "key-press-event",
                  G_CALLBACK (my_custom_widget_key_press), context);
g_signal_connect (widget, "button-press-event",
                  G_CALLBACK (my_custom_widget_button_press), context);
g_signal_connect (widget, "focus-in-event",
                  G_CALLBACK (my_custom_widget_focus_in), context);

...
</programlisting>
</informalexample>

</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT GtkIMContext ##### -->
<para>

</para>


<!-- ##### SIGNAL GtkIMContext::clipboard-operation ##### -->
<para>

</para>

@imcontext: the object which received the signal.
@arg1: 

<!-- ##### SIGNAL GtkIMContext::commit ##### -->
<para>

</para>

@imcontext: the object which received the signal.
@arg1: 

<!-- ##### SIGNAL GtkIMContext::delete-surrounding ##### -->
<para>

</para>

@imcontext: the object which received the signal.
@arg1: 
@arg2: 
@Returns: 

<!-- ##### SIGNAL GtkIMContext::has-selection ##### -->
<para>

</para>

@imcontext: the object which received the signal.
@Returns: 

<!-- ##### SIGNAL GtkIMContext::preedit-changed ##### -->
<para>

</para>

@imcontext: the object which received the signal.

<!-- ##### SIGNAL GtkIMContext::preedit-end ##### -->
<para>

</para>

@imcontext: the object which received the signal.

<!-- ##### SIGNAL GtkIMContext::preedit-start ##### -->
<para>

</para>

@imcontext: the object which received the signal.

<!-- ##### SIGNAL GtkIMContext::retrieve-surrounding ##### -->
<para>

</para>

@imcontext: the object which received the signal.
@Returns: 

<!-- ##### ARG GtkIMContext:hildon-input-mode ##### -->
<para>

</para>

<!-- ##### FUNCTION gtk_im_context_set_client_window ##### -->
<para>

</para>

@context: 
@window: 


<!-- ##### FUNCTION gtk_im_context_get_preedit_string ##### -->
<para>

</para>

@context: 
@str: 
@attrs: 
@cursor_pos: 


<!-- ##### FUNCTION gtk_im_context_filter_keypress ##### -->
<para>

</para>

@context: 
@event: 
@Returns: 


<!-- ##### FUNCTION gtk_im_context_focus_in ##### -->
<para>

</para>

@context: 


<!-- ##### FUNCTION gtk_im_context_focus_out ##### -->
<para>

</para>

@context: 


<!-- ##### FUNCTION gtk_im_context_reset ##### -->
<para>

</para>

@context: 


<!-- ##### FUNCTION gtk_im_context_set_cursor_location ##### -->
<para>

</para>

@context: 
@area: 


<!-- ##### FUNCTION gtk_im_context_set_use_preedit ##### -->
<para>

</para>

@context: 
@use_preedit: 


<!-- ##### FUNCTION gtk_im_context_set_surrounding ##### -->
<para>

</para>

@context: 
@text: 
@len: 
@cursor_index: 


<!-- ##### FUNCTION gtk_im_context_get_surrounding ##### -->
<para>

</para>

@context: 
@text: 
@cursor_index: 
@Returns: 


<!-- ##### FUNCTION gtk_im_context_delete_surrounding ##### -->
<para>

</para>

@context: 
@offset: 
@n_chars: 
@Returns: 


<!-- ##### FUNCTION gtk_im_context_hide ##### -->
<para>

</para>

@context: 


<!-- ##### FUNCTION gtk_im_context_show ##### -->
<para>

</para>

@context: 


<!-- ##### FUNCTION hildon_gtk_im_context_copy ##### -->
<para>

</para>

@context: 


<!-- ##### FUNCTION hildon_gtk_im_context_cut ##### -->
<para>

</para>

@context: 


<!-- ##### FUNCTION hildon_gtk_im_context_filter_event ##### -->
<para>

</para>

@context: 
@event: 
@Returns: 


<!-- ##### FUNCTION hildon_gtk_im_context_has_selection ##### -->
<para>

</para>

@context: 
@Returns: 


<!-- ##### FUNCTION hildon_gtk_im_context_hide ##### -->
<para>

</para>

@context: 


<!-- ##### FUNCTION hildon_gtk_im_context_paste ##### -->
<para>

</para>

@context: 


<!-- ##### FUNCTION hildon_gtk_im_context_show ##### -->
<para>

</para>

@context: 


