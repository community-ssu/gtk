.\" Hey, Emacs!  This is an -*- nroff -*- source file.
.\" Author: Raul Miller
.\" Includes text from the debian Guidelines by Ian Jackson, Ian Murdock
.\" Traduction de la révision CVS 1.1
.TH DEB-CONTROL 5 "January 2000" "Debian Project" "Utilitaires de dpkg"
.SH NOM
deb\-control \- Format du fichier principal de contrôle dans les paquets
Debian
.SH SYNOPSIS
contrôle
.SH DESCRIPTION
Chaque paquet Debian possède un fichier principal de contrôle qui contient
un certain nombre de champs. Chaque champ commence par une étiquette,
telle que
.B Package
ou
.B Version
(la casse n'importe pas), suivie d'un « : », et du contenu du champ.
Les champs sont séparés seulement par des étiquettes de champ. En d'autres
termes, le contenu d'un champ peut s'étendre sur plusieurs lignes, mais
les outils d'installation joindront en général les lignes pendant le
traitement du contenu du champ (sauf pour le champ
.B Description,
voyez ci-dessous).
.SH LES CHAMPS EXIGÉS
.TP
.BR "Package: " "<nom du paquet>"
La valeur de ce champ donne le nom du paquet, et la plupart des outils 
d'installation s'en servent pour produire les noms des paquets.
.TP
.BR "Version: " "<chaîne pour la version>"
C'est classiquement le numéro de version du paquet original dans la forme
choisie par l'auteur du programme.
Il peut y avoir aussi un numéro de révision Debian
(pour les paquets qui ne sont pas de pure souche Debian). Quand les numéros de
version et de révision sont présents, on les sépare par un trait d'union 
« - ». C'est pour cette raison qu'il ne peut y avoir de trait d'union dans le 
numéro de la version originale.
.TP
.BR "Maintainer: " "<nom adresse>"
Le format de ce champ sera « Jean Dupont <jdupont@foo.com> » ; et c'est bien 
sûr le créateur du paquet, par opposition à l'auteur du programme mis en 
paquet.
.TP
.BR "Description: " "<description courte>"
.BR " " "<description longue>"
.br
Le format de la description du paquet est un résumé bref sur la 
première ligne (après le champ «\ Description\ »).
Les lignes suivantes peuvent servir à une description plus longue et plus
détaillée. Chaque ligne de cette description longue doit être précédée
d'un espace ; quand c'est une ligne blanche elle doit contenir un seul 
« . » avant cet espace.
.SH CHAMPS OPTIONNELS
.TP
.BR "Section: " "<section>"
C'est un champ général qui indique la catégorie d'un paquet ; cette
catégorie est fondée sur le programme que ce paquet installe. « Utils »,
« net », « mail », « text », « x11 » etc. représentent quelques
catégories habituelles.
.TP
.BR "Priority: " "<priorité>"
Définit l'importance du paquet à l'intérieur du système général.
«\ Required\ », «\ standard\ », «\ optional\ », «\ extra\ » etc. représentent
des priorités habituelles.
.LP
Les champs 
.B Section
and
.B Priority
possèdent un ensemble défini de valeurs acceptées, tiré de la Charte Debian 
(« Policy manual »). Ces valeurs permettent la répartition des paquets dans 
l'archive. On peut en trouver une liste dans la version la plus récente du 
paquet 
.B debian-policy.
.TP
.BR "Essential: " "<yes|no>"
On se sert habituellement de ce champ uniquement si la réponse est « yes ». 
Il signifie que ce paquet est exigé pour un fonctionnement correct du
système. Dpkg et tout autre outil d'installation interdisent la suppression 
d'un paquet  
.B Essential
(du moins tant qu'une des options de forçage n'est pas utilisée).
.TP
.BR "Architecture: " "<arch|all>"
L'architecture précise pour quel type de matériel le paquet a été compilé.
Voici quelques architectures habituelles : «\ i386\ », «\ m68k\ », 
«\ sparc\ », «\ alpha\ », «\ powerpc\ » etc. Remarquez que l'option
.B all
signifie que le paquet est indépendant de toute architecture. Les scripts
shell ou Perl, ainsi que la documentation sont dans ce cas.
.TP
.BR "Source: " "<nom du source>"
Le nom du paquet source d'où provient le paquet binaire, s'il y a une 
différence entre les deux noms. 
.TP
.BR "Depends: " "<liste de paquet>"
C'est la liste des paquets exigés pour que ce paquet arrive à fonctionner de
manière non-triviale. Le programme de maintenance des paquets interdit
l'installation d'un paquet quand les paquets répertoriés dans le champ
.B Depends
ne sont pas installés (du moins tant qu'une option de forçage n'est pas 
utilisée) ; il lance les scripts «\ postinst\ » des paquets répertoriés dans 
les champs «\ Depends:\ » avant les scripts «\ postinst\ » des paquets qui 
dépendent d'eux, et lance avant les scripts «\ prerm\ ».
.TP
.BR "Pre-Depends: " "<liste de paquet>"
C'est la liste des paquets qui doivent être installés
.B et
configurés avant que ce paquet puisse être installé. Habituellement, on 
utilise ce champ quand un paquet a besoin d'un autre paquet pour lancer son
script «\ preinst\ ».
.TP
.BR "Recommends: " "<liste de paquet>"
C'est la liste des paquets qu'on trouverait avec ce paquet dans toute 
installation standard. Le programme de maintenance des paquets
avertit l'utilisateur  quand il installe un paquet sans installer les paquets
répertoriés dans le champ
.B Recommends.
.TP
.BR "Suggests: " "<liste de paquet>"
C'est la liste des paquets qui, associés avec ce paquet, peuvent améliorer 
son utilité ; néanmoins, une installation sans ces paquets est parfaitement
raisonnable.
.LP
La syntaxe des champs
.B Depends,
.B Pre-Depends,
.B Recommends,
et
.B Suggests
est une liste de groupes contenant des paquets successifs.  Chaque groupe
est une liste de paquets séparés par une barre verticale (le symbole du
tube) « | ». Les groupes sont séparés par des virgules. Une virgule
représente un « ET » logique et une barre verticale représente un « OU »
logique ; (le tube représente un lien plus fort). Chaque élément
est le nom d'un paquet suivi de façon optionnelle par un numéro de version
entre parenthèses.
.LP
Un numéro de version peut commencer par « >> », et dans ce cas toute version
supérieure correspondra, et il peut indiquer (ou pas) le numéro de
révision pour le paquet debian (les deux numéros étant séparés par un
trait d'union). Voici les relations acceptées pour les versions :
« >> » pour supérieur à, « << » pour inférieur à, « >= » pour supérieur ou
égal, « <= » pour inférieur ou égal, et « = » pour égal à.
.TP
.BR "Conflicts: " "<liste de paquets>"
C'est une liste de paquets qui sont en conflit avec ce paquet ; ils 
contiennent par exemple des fichiers qui ont le même nom.
Le programme de maintenance des paquets interdit l'installation
simultanée de paquets en conflit. Deux paquets en conflit renseigneront
une ligne
.B Conflicts
avec le nom de l'autre paquet.
.TP
.BR "Replaces: " "<liste de paquets>"
C'est une liste de paquets que ce paquet remplace. Il peut ainsi
remplacer les fichiers de ces autres paquets ; on se sert pour cela
du champ
.B Conflicts
pour forcer la suppression des autres paquets, si celui-là possède
aussi les mêmes fichiers que le paquet en conflit.
.TP
.BR "Provides: " " <liste de paquets>"
C'est une liste de paquets virtuels que ce paquet « remplit ». On s'en sert
habituellement pour des paquets qui offrent le même service. Par exemple,
sendmail et exim sont des serveurs de courrier, et donc ils « remplissent »
chacun le paquet « mail-transport-agent » ; ainsi les autres paquets
peuvent dépendre de ce paquet virtuel. Sendmail et exim peuvent ainsi
chacun satisfaire la dépendance. Les paquets qui dépendent d'un serveur de
courrier n'ont pas à connaître les noms de tous les serveurs de courrier 
et n'ont pas à utiliser « | » comme séparateur de liste.
.LP
La syntaxe des champs
.B Conflicts,
.B Replaces
et
.B Provides
est une liste de noms de paquet, séparés par des virgules (et des espaces
facultatifs).
Dans le champ
.B Conflicts,
la virgule sera lue comme un « OU ». On peut donner une version optionnelle
de la même façon que ci-dessus dans les champs
.B Conflicts
et
.B Replaces.
.SH EXEMPLE
.\" .RS
.nf
Package: grep
Essential: yes
Priority: required
Section: base
Maintainer: Wichert Akkerman <wakkerma@debian.org>
Architecture: sparc
Version: 2.4-1
Pre-Depends: libc6 (>= 2.0.105)
Provides: rgrep
Conflicts: rgrep
Description: GNU grep, egrep and fgrep.
 Il se peut que le grep de la famille GNU des utilitaires grep soit 
 le plus rapide de l'ouest ! Le grep de GNU est fondé sur un mécanisme 
 rapide de mise en correspondance déterministe d'états simples (environ 
 deux fois plus rapide que le « egrep » standard d'Unix), modifié par une 
 recherche de type Boyer-Moore-Gosper qui cherche une chaîne donnée en 
 empêchant que les textes impossibles soient analysés par le mécanisme de 
 mise en correspondance d'expressions régulières et sans avoir 
 nécessairement besoin de voir chaque caractère. C'est beaucoup plus 
 rapide  que les « grep » ou « egrep » d'Unix.
 (Des expressions régulières contenant des références circulaires 
 ralentissent cependant le programme.)
.fi
.\" .RE
.SH VOIR AUSSI
.BR deb (5),
.BR dpkg (8),
.BR dpkg-deb (1).
.SH TRADUCTION
Philippe Batailler, Octobre 2003.
