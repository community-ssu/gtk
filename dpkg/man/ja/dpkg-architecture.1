.\" Hey Emacs! This file is -*- nroff -*- source.
.\" Original manpage cvs revision 1.4
.\" Translated by KURASAWA Nozomu <nabetaro@debian.or.jp>
.\" Last modified: Sun Nov 30 21:48:11 JST 2003
.\"WORD:	architecture		アーキテクチャ
.\"WORD:	facility		機構
.rn '' }`
''' $RCSfile: dpkg-architecture.1,v $$Revision: 1.1.2.1 $$Date: 2004/03/11 11:23:46 $
'''
''' $Log: dpkg-architecture.1,v $
''' Revision 1.1.2.1  2004/03/11 11:23:46  keybuk
''' Add two new japanese manual pages.
'''
''' Revision 1.2.2.1  2003/12/02 05:25:41  nabetaro
''' update for dpkg_1.10.18
'''
''' Revision 1.4  1999/09/27 01:37:25  wakkerma
''' Updated to dpkg 1.4.1.11
'''
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH DPKG-ARCHITECTURE 1 "perl 5.004, patch 04" "24/Jul/99" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.\" .SH "NAME"
.SH "名称"
.\" dpkg-architecture \- set and determine the architecture for package building
dpkg-architecture \- パッケージ構築用にアーキテクチャを決定・設定する
.\" .SH "SYNOPSIS"
.SH "書式"
dpkg-architecture [options] [action]
.PP
.\" Valid options:
有効なオプション:
\fB\-a\fRDebian-Architecture
\fB\-t\fRGnu-System-Type
\fB\-f\fR
.PP
.\" Valid actions:
有効なアクション:
\fB\-l\fR, \fB\-q\fRVariable-Name, \fB\-s\fR, \fB\-u\fR, \fB\-c\fR Command
.\" .SH "DESCRIPTION"
.SH "説明"
.\" dpkg-architecture does provide a facility to determine and set the build and
.\" host architecture for package building.
dpkg-architecture はパッケージ構築用に、
ビルド・ホストアーキテクチャを決定・設定する機構を提供する。
.\" .SH "OVERVIEW"
.SH "概要"
.\" The build architecture is always determined by an external call to dpkg, and
.\" can not be set at the command line.
ビルドアーキテクチャは、常に dpkg への外部呼び出しによって決定され、
コマンドラインでは設定できない。
.PP
.\" You can specify the host architecture by providing one or both of the options \fB\-a\fR
.\" and \fB\-t\fR. The default is determined by an external call to gcc, or the same as
.\" the build architecture if CC or gcc are both not available. One out of \fB\-a\fR and \fB\-t\fR
.\" is sufficient, the value of the other will be set to a usable default.
.\" Indeed, it is often better to only specify one, because dpkg-architecture
.\" will warn you if your choice doesn't match the default.
\fB\-a\fR か \fB\-t\fR または両方のオプションで、
ホストアーキテクチャを指定できる。
デフォルトでは、gcc への外部呼び出しで決定されるが、
CC と gcc の両方が利用できない場合、ビルドアーキテクチャと同じになる。
\fB\-a\fR と \fB\-t\fR のどちらかで十分だが、
他方の値は使用可能なデフォルトにセットされる。
実際には、選択したものがデフォルトと一致しない場合、
dpkg-architecture が警告するので、たいてい 1 つを指定するだけのほうがよい。
.PP
.\" The default action is \fB\-l\fR, which prints the environment variales, one each line,
.\" in the format VARIABLE=value. If you are only interested in the value of a
.\" single variable, you can use \fB\-q\fR. If you specify \fB\-s\fR, it will output an export
.\" command. This can be used to set the environment variables using eval. \fB\-u\fR
.\" does return a similar command to unset all variables. \fB\-c\fR does execute a
.\" command in an environment which has all variables set to the determined
.\" value.
デフォルトのアクションは \fB\-l\fR で、
1行ごと 変数名=値 の形で環境変数を表示する。
.\" variales は variables の typo?
単一の変数の値を表示したいだけなら、\fB\-q\fR を利用してもよい。
\fB\-s\fR を指定した場合、export コマンド形式で出力する。
これに eval を用いて、環境変数の設定 (set) に使用できる。
\fB\-u\fR は、全変数を解除 (unset) するコマンドを返す。
\fB\-c\fR は、決定した値を全変数に設定した環境で、コマンドを実行する。
.PP
.\" Existing environment variables with the same name as used by the scripts are
.\" not overwritten, except if the \fB\-f\fR force flag is present. This allows the user
.\" to override a value even when the call to dpkg-architecture is buried in
.\" some other script (for example dpkg-buildpackage). The \fB\-q\fR query option
.\" implies \fB\-f\fR, and is therefore not affected by existing environment settings.
\fB\-f\fR 強制フラグが指定された場合を除き、
スクリプトで使用されるのと同名の既存の環境変数は、上書きされない。
これは dpkg-architecture への呼び出しを、
他のスクリプト (例えば dpkg-buildpackage) に埋め込んでも、
ユーザが値を上書きできるということである。
\fB\-q\fR クエリオプションには、\fB\-f\fR を暗黙に指定する。
そのため、既存の環境設定によって影響されない。
.\" .SH "TERMS"
.SH "用語"
.\" .Ip "build machine" 4
.Ip "ビルドマシン (build machine)" 4
.\" The machine the package is build on.
パッケージの構築を行うマシン。
.\" .Ip "host machine" 4
.Ip "ホストマシン (host machine)" 4
.\" The machine the package is build for.
構築したパッケージを使用するマシン。
.Ip "Debian アーキテクチャ (Debian Architecture)" 4
.\" The Debian archietcture string, which specifies the binary tree in the \s-1FTP\s0
.\" archive. Examples: i386, sparc, hurd-i386.
\s-1FTP\s0 アーカイブのバイナリツリーで指定する Debian アーキテクチャ文字列。
例: i386, sparc, hurd-i386.
.Ip "\s-1GNU\s0 システムタイプ (\s-1GNU\s0 System Type)" 4
.\" An architecture specification string consisting of two or three parts,
.\" cpu-system or cpu-vendor-system. Examples: i386-linux, sparc-linux, i386-gnu.
cpu-system や cpu-vendor-system といった、
2, 3 パートから成るアーキテクチャ仕様文字列。
例: i386-linux, sparc-linux, i386-gnu.
.\" .SH "EXAMPLES"
.SH "例"
.\" dpkg-buildpackage accepts the \fB\-a\fR option and passes it to dpkg-architecture.
.\" Other examples:
dpkg-buildpackage は \fB\-a\fR オプションを受け付け、
そのまま dpkg-architecture に渡す。
その他の用例:
.PP
CC=i386-gnu-gcc dpkg-architecture \f(CW-c\fR debian/rules build
.PP
eval `dpkg-architecture \f(CW-u\fR`
.\" .SH "VARIABLES"
.SH "変数"
.\" The following variables are set by dpkg-architecture:
dpkg-architecture は以下の変数を設定する:
.Ip "\s-1DEB_BUILD_ARCH\s0" 4
.\" The Debian architecture of the build machine.
ビルドマシンの Debian アーキテクチャ
.Ip "\s-1DEB_BUILD_GNU_TYPE\s0" 4
.\" The \s-1GNU\s0 system type of the build machine.
ビルドマシンの \s-1GNU\s0 システムタイプ
.Ip "\s-1DEB_BUILD_GNU_CPU\s0" 4
.\" The \s-1CPU\s0 part of \s-1DEB_BUILD_GNU_TYPE\s0
\s-1DEB_BUILD_GNU_TYPE\s0 の \s-1CPU\s0 部
.Ip "\s-1DEB_BUILD_GNU_SYSTEM\s0" 4
.\" The System part of \s-1DEB_BUILD_GNU_TYPE\s0
\s-1DEB_BUILD_GNU_TYPE\s0 のシステム部
.Ip "\s-1DEB_HOST_ARCH\s0" 4
.\" The Debian architecture of the host machine.
ホストマシンの Debian アーキテクチャ
.Ip "\s-1DEB_HOST_GNU_TYPE\s0" 4
.\" The \s-1GNU\s0 system type of the host machine.
ホストマシンの \s-1GNU\s0 システムタイプ
.Ip "\s-1DEB_HOST_GNU_CPU\s0" 4
.\" The \s-1CPU\s0 part of \s-1DEB_HOST_GNU_TYPE\s0
\s-1DEB_HOST_GNU_TYPE\s0 の \s-1CPU\s0 部
.Ip "\s-1DEB_HOST_GNU_SYSTEM\s0" 4
.\" The System part of \s-1DEB_HOST_GNU_TYPE\s0
\s-1DEB_HOST_GNU_TYPE\s0 のシステム部
.SH "DEBIAN/RULES"
.\" The environment variables set by dpkg-architecture are passed to
.\" debian/rules as make variables (see make documentation). You can and should
.\" use them in the build process as needed. Here are some examples, which also
.\" show how you can improve the cross compilation support in your package:
dpkg-architecture で設定した環境変数は、
debian/rules に make 変数 (make 文書を参照) として渡される。
必要であれば、構築プロセスでこの変数を使用できるし、使用するべきである。
以下、パッケージでのクロスコンパイルサポートの改良方法も示す、使用例である:
.\" .PP
.\" Instead:
.\" .PP
.\" ARCH=`dpkg --print-architecture`
.\" configure $(ARCH)\-linux
.\" .PP
.\" please use the following:
.\" .PP
.\" B_ARCH=$(DEB_BUILD_GNU_TYPE)
.\" H_ARCH=$(DEB_HOST_GNU_TYPE)
.\" configure --build=$(B_ARCH) --host=$(H_ARCH)
.\" .PP
.\" Instead:
.\" .PP
.\" ARCH=`dpkg --print-architecture`
.\" ifeq ($(ARCH),alpha)
.\"   ...
.\" endif
.\" .PP
.\" please use:
.\" .PP
.\" ARCH=$(DEB_HOST_ARCH)
.\" ifeq ($(ARCH),alpha)
.\"   ...
.\" endif
.PP
ARCH=`dpkg --print-architecture`
configure $(ARCH)\-linux
.PP
上記に代えて
.PP
B_ARCH=$(DEB_BUILD_GNU_TYPE)
H_ARCH=$(DEB_HOST_GNU_TYPE)
configure --build=$(B_ARCH) --host=$(H_ARCH)
.PP
とする。
.PP
ARCH=`dpkg --print-architecture`
ifeq ($(ARCH),alpha)
  ...
endif
.PP
この代わりに
.PP
ARCH=$(DEB_HOST_ARCH)
ifeq ($(ARCH),alpha)
  ...
endif
.PP
とする。
.PP
.\" In general, calling dpkg in the rules file to get architecture information
.\" is deprecated (until you want to provide backward compatibility, see below).
.\" Especially the --print-architecture option is unreliable since we have
.\" Debian architectures which don't equal a processor name.
一般的に、アーキテクチャ情報を取得するためには、
rules ファイルで dpkg を呼ぶべきではない(後述の後方互換性を提供するまで)。
特に --print-architecture オプションは、
プロセッサ名と等しくない Debian アーキテクチャができて以来、当てにできない。
.\" .SH "BACKWARD COMPATIBILITY"
.SH "後方互換性"
.\" When providing a new facility, it is always a good idea to stay compatible with old
.\" versions of the programs. Note that dpkg-architecture does not affect old
.\" debian/rules files, so the only thing to consider is using old building
.\" scripts with new debian/rules files. The following does the job:
新機構を提供するときに、プログラムの旧バージョンとの互換性を確保するのは、
常によい考えである。
dpkg-architecture は古い debian/rules ファイルには影響を及ぼさない。
そのため、新しい debian/rules ファイルで、
古い構築スクリプトを使用する事を考慮するだけであることに注意してほしい。
以下はその方法である:
.PP
DEB_BUILD_ARCH := $(shell dpkg --print-installation-architecture)
DEB_BUILD_GNU_CPU := $(patsubst hurd-%,%,$(DEB_BUILD_ARCH))
ifeq ($(filter-out hurd-%,$(DEB_BUILD_ARCH)),)
  DEB_BUILD_GNU_SYSTEM := gnu
else
  DEB_BUILD_GNU_SYSTEM := linux
endif
DEB_BUILD_GNU_TYPE=$(DEB_BUILD_GNU_CPU)\-$(DEB_BUILD_GNU_SYSTEM)
.PP
DEB_HOST_ARCH=$(DEB_BUILD_ARCH)
DEB_HOST_GNU_CPU=$(DEB_BUILD_GNU_CPU)
DEB_HOST_GNU_SYSTEM=$(DEB_BUILD_GNU_SYSTEM)
DEB_HOST_GNU_TYPE=$(DEB_BUILD_GNU_TYPE)
.PP
.\" Put a subset of these lines at the top of your debian/rules file; these
.\" default values will be overwritten if dpkg-architecture is used.
debian/rules ファイルの一番上にの上記の行のサブセットを置くこと。
dpkg-architecture を使用する場合は、このデフォルト値が上書きされる。
.PP
.\" You don't need the full set. Choose a consistent set which contains the
.\" values you use in the rules file. For example, if you only need the host
.\" Debian architecture, `DEB_HOST_ARCH=`dpkg --print-installation-architecture`
.\" is sufficient (this is indeed the Debian architecture of the build machine,
.\" but remember that we are only trying to be backward compatible with native
.\" compilation).
フルセットは必要ない。
rules ファイルで使用する値を含む、矛盾しないセットを選ぶこと。
例えば、ホスト Debian アーキテクチャのみ必要とする場合、
 `DEB_HOST_ARCH=`dpkg --print-installation-architecture` で十分である。
(これは確かにビルドマシンの Debian アーキテクチャである。
しかし、ネイティブコンパイルとの後方互換性を持とうとしているだけであることを
思い出すこと)
.PP
.\" You may not want to care about old build packages (for example, if you have
.\" sufficient source dependencies declared anyway). But you should at least
.\" support the traditional way to build packages by calling `debian/rules
.\" build\*(R' directly, without setting environment variables. To do this, use the
.\" \fB\-q\fR option to query suitable default values:
(例えば、十分なソース依存関係をとにかく宣言する場合など) 
旧式の構築パッケージには関心がないかもしれない。
しかし、少なくとも環境変数を設定せず、`debian/rules build\*(R' を直接呼んで
パッケージを構築するという、従来の方法をサポートするべきだ。
そのためには、適切なデフォルト値を取得する \fB\-q\fR オプションを使用すること。
.PP
DEB_BUILD_ARCH=`dpkg-architecture \-qDEB_BUILD_ARCH`
DEB_BUILD_GNU=`dpkg-architecture \-qDEB_BUILD_GNU`
.PP
.\" etc. You get the idea. This way, you can ensure that the variables are never
.\" undeclared. Note that this breaks backwards compatibility with old build
.\" scripts, and you should only do that if source dependencies are implemented
.\" and declared accordingly.
上記等の用法が考えられる。
このように、変数が未宣言でないことを保証できる。
これが旧式の構築スクリプトとの後方互換性を壊し、
そのためにソース依存関係が実装・宣言されるのであれば、
あえてそうするべきである。
.\" .SH "SEE ALSO"
.SH "関連項目"
dpkg-buildpackage
dpkg-cross
.\" .SH "CONTACT"
.SH "連絡"
.\" If you have questions about the usage of the make variables in your rules
.\" files, or about cross compilation support in your packages, please email me.
.\" The addresse is Marcus Brinkmann <brinkmd@debian.org>.
rules ファイルでの make 変数の使い方や、
パッケージのクロスコンパイルサポートについての疑問は、
Marcus Brinkmann <brinkmd@debian.org> まで email を送ってほしい。
.SH "翻訳者"
倉澤 望 <nabetaro@debian.or.jp>
.rn }` ''
.IX Title "DPKG-ARCHITECTURE 1"
.\" .IX Name "dpkg-architecture - set and determine the architecture for package building"
.IX Name "dpkg-architecture - パッケージ構築用にアーキテクチャを決定・設定する"

.\" .IX Header "NAME"
.IX Header "名称"

.\" .IX Header "SYNOPSIS"
.IX Header "書式"

.\" .IX Header "DESCRIPTION"
.IX Header "説明"

.\" .IX Header "OVERVIEW"
.IX Header "概要"

.\" .IX Header "TERMS"
.IX Header "用語"

.\" .IX Item "build machine"
.IX Item "ビルドマシン (build machine)"

.\" .IX Item "host machine"
.IX Item "ホストマシン (host machine)"

.\" .IX Item "Debian Architecture"
.IX Item "Debian アーキテクチャ (Debian Architecture)"

.\" .IX Item "\s-1GNU\s0 System Type"
.IX Item "\s-1GNU\s0 システムタイプ (\s-1GNU\s0 System Type)"

.\" .IX Header "EXAMPLES"
.IX Header "例"

.\" .IX Header "VARIABLES"
.IX Header "変数"

.IX Item "\s-1DEB_BUILD_ARCH\s0"

.IX Item "\s-1DEB_BUILD_GNU_TYPE\s0"

.IX Item "\s-1DEB_BUILD_GNU_CPU\s0"

.IX Item "\s-1DEB_BUILD_GNU_SYSTEM\s0"

.IX Item "\s-1DEB_HOST_ARCH\s0"

.IX Item "\s-1DEB_HOST_GNU_TYPE\s0"

.IX Item "\s-1DEB_HOST_GNU_CPU\s0"

.IX Item "\s-1DEB_HOST_GNU_SYSTEM\s0"

.IX Header "DEBIAN/RULES"

.\" .IX Header "BACKWARD COMPATIBILITY"
.IX Header "後方互換性"

.\" .IX Header "SEE ALSO"
.IX Header "関連項目"

.\" .IX Header "CONTACT"
.IX Header "連絡"

