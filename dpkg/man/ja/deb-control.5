.\" Author: Raul Miller
.\" original revision: 1.1.2.1
.\" Includes text from the debian Guidelines by Ian Jackson, Ian Murdock
.TH DEB-CONTROL 5 "January 2000" "Debian Project" "dpkg utilities"
.SH NAME
deb\-control \- Debian パッケージのマスターコントロールファイルフォーマット
.SH SYNOPSIS
control
.SH DESCRIPTION
各 Debian パッケージはマスターとなる `control'ファイルをもっている。
この `control'ファイルはいくつかのフィールドを含んでいる。それぞれの
フィールドは
.B Package
や
.B Version
(大文字小文字は区別しない)
のようなタグで始まり、コロン、フィールドの本体という順序で記述されて
いる。フィールドはフィールドタグによってのみ区切られている。
別の言い方をすれば、フィールドテキストは複数行にまたがってもかまわない。
しかしインストールに使うツールはそれらのフィールドの本体を処理する
時に一行にまとめてしまう。(ただし、以下で説明する
.B Description
フィールドは例外である)
.SH 必須フィールド
.TP
.BR "Package: " "<パッケージ名>"
このフィールドの値によってパッケージ名が決まる。またインストールに
使うツールがファイル名を生成するのにも使われる。
.TP
.BR "Version: " "<バージョン文字列>"
普通は、これはパッケージのプログラムの作者が利用しているパッケージの
バージョン番号である。(Debian独自のパッケージでない場合は)Debianリビジョン番号
が追加される。もし、バージョンとリビジョン両方を使う場合にはそれらは
ハイフン `-'により区切られている。このために、オリジナルのバージョンには
そのバージョン番号にハイフンを使うことができない。
.TP
.BR "Maintainer: " "<名前 email>"
`Joe Bloggs <jbloggs@foo.com>'でなければいけない。普通、
パッケージにされたソフトウェアの作者ではなく、パッケージを作成した
人間の名前およびe-mailアドレスを使う。
.TP
.BR "Description: " "<短かい説明>"
.BR " " "<長い説明>"
.br
最初の行("Description"フィールドタグの後)は、パッケージの説明のための
簡単な説明である。以下に続く行はより長い詳細な説明に使うことができる。
長い説明の各行は空白文字ではじまる。行頭のスペースに続いて一つの'.'
だけの行は空行を意味する。
.SH オプションのフィールド
.TP
.BR "Section: " "<セクション>"
パッケージによりインストールされるソフトウェアがどのカテゴリーに属するかを
示すフィールドである。一般的なセクションは `utils'や `net'、`mail'、`text',
`x11'などがある。
.TP
.BR "Priority: " "<優先度>"
システム全体からみてこのパッケージの重要度を示す。一般的に使われる
優先度としては `required'、`standard'、`optional'、`extra'などがある。
.LP
Debianの中では
.B Section
と
.B Priority
フィールドで、使える値はポリシーマニュアルで決められている。
これらはアーカイブでどのようにパッケージが配置されるかを決定するのに
使われている。これらのリストは最新の
.B debian-policy
パッケージの中に含まれている。
.TP
.BR "Essential: " "<yes|no>"
このフィールドは普通は `yes'の時にだけ使う。これはパッケージが
システムを適切に運用するために必要とされるパッケージを示す。
dpkgや他のインストールに使うツールは(強制オプションを与えない限り)
.B Essential
パッケージを削除することを許さない。
.TP
.BR "Architecture: " "<arch|all>"
Architectureはこのパッケージがどのタイプのハードウェアむけにコンパイルされた
ものかどうかを示す。一般的なarchitectureとしては `i386', `m68k', `sparc',
`alpha', `powerpc'などがある。
.B all
オプションはパッケージがarchitectureに依存しないことを意味する。
例えば、シェルスクリプトやPerlスクリプト、文書などが architecture が all 
となる。
.TP
.BR "Source: " "<ソース名>"
このバイナリパッケージを作るために使われたソースパッケージの名前である。
バイナリパッケージの名前とソースパッケージの名前が違う時に使われる。
.TP
.BR "Depends: " "<パッケージリスト>"
このパッケージがその機能を提供するために必要としているパッケージの
リスト。パッケージ管理ソフトウェアは、もしこの
.B Depends
フィールドにあげられているパッケージがインストールされていなければ
(強制オプションがあたえられない限り)このパッケージをインストール
しようとしない。また
.B Depends:
フィールドにあげられているパッケージのpostinstスクリプトを、それらに
依存しているパッケージがprermスクリプトを実行しようとする前に
実行しようとする。
.TP
.BR "Pre-Depends: " "<パッケージリスト>"
パッケージがインストールされて
.B かつ
そのパッケージがインストールできる前に設定がおわっていないといけない
パッケージのリスト。これは通常このパッケージが他のパッケージを
preinstで利用する場合に使われる。
.TP
.BR "Recommends: " "<パッケージリスト>"
余程のことがなければこのパッケージとともにインストールされるべきパッケージ
のリスト。ユーザがこの
.B Recommends
フィールドにあげられているパッケージなしにパッケージをインストールしよう
とするとパッケージ管理ソフトウェアが警告することがある。
.TP
.BR "Suggests: " "<パッケージリスト>"
このパッケージに関連していて、より便利にするパッケージだけれども
なくてもかまわないパッケージのリスト。
.LP
.B Depends ,
.B Pre-Depends ,
.B Recommends ,
.B Suggests
フィールドは、代替パッケージのグループのリストで表現する。
各グループではパッケージを縦棒 (もしくは`パイプ')記号 `|'で区切りる。
グループはコンマで区切る。コンマは `AND'と解釈し、パイプは `OR'と
解釈することができる。パイプ(OR)の方が演算の優先度が高くなっている。
それぞれの要素はパッケージ名と、場合によっては括弧の中にバージョン依存の
情報で表される。
.LP
バージョン番号は '>>'ではじまる場合は、(ハイフンで区切られた)Debian
パッケージリビジョンを指定/もしくは省略したバージョンよりも新しい
バージョンであることを表す。使えるバージョン関係としては
">>"がより新しい、"<<"がより古い、">="が同じか新しい、"<="が同じか古い、
"="が同じ がある。
.TP
.BR "Conflicts: " "<パッケージリスト>"
このパッケージと衝突するパッケージのリスト。例えば同じファイル名を
もっている場合など。パッケージ管理ソフトウェアは衝突しているパッケージ
同士を同時にインストールできないようにしている。二つの衝突している
パッケージがそれぞれがお互いを
.B Conflicts
に書いておくべきである。
.TP
.BR "Replaces: " "<パッケージリスト>"
このパッケージが置き換えるファイルを含むパッケージのリスト。
このパッケージが他のパッケージのファイルを上書きするのを許すために
使われる。また衝突しているパッケージと同じファイルを含んでいる場合
.B Conflicts
フィールドと共に使うことで他のパッケージを強制的に削除することを
指示するために使われる。
.TP
.BR "Provides: " "<パッケージリスト>"
このパッケージが提供する仮想パッケージのリスト。通常はこれは
いくつかのパッケージが同じサービスを提供している場合に使われる。
例えば、sendmailとeximは共にメールサーバとしての機能を提供しているので、
これらは共通のパッケージ(`mail-transport-agent')を提供し、他のパッケージは
この`mail-transport-agent'に依存するようにしておく。こうすることで、
sendmailもeximも依存関係を満たすようにすることができる。
これによりメールサーバに依存するパッケージが、メールサーバとなるパッケージ
全てのパッケージ名を知る必要もなく、また `|'を使って列挙する必要も
なくなる。
.LP
.B Conflicts ,
.B Replaces ,
.B Provides
はパッケージ名をコンマで区切って表記する(空白はあってもかまわない)。
.B Conflicts
フィールドの中では、コンマは `OR'と解釈できる。
.B Conflicts
と
.B Replaces
フィールドでは、上記のフィールドと同じ表記でバージョンも指定することが
できる。
.SH 例
.\" .RS
.nf
Package: grep
Essential: yes
Priority: required
Section: base
Maintainer: Wichert Akkerman <wakkerma@debian.org>
Architecture: sparc
Version: 2.4-1
Pre-Depends: libc6 (>= 2.0.105)
Provides: rgrep
Conflicts: rgrep
Description: GNU grep, egrep and fgrep.
 The GNU family of grep utilities may be the "fastest grep in the west".
 GNU grep is based on a fast lazy-state deterministic matcher (about
 twice as fast as stock Unix egrep) hybridized with a Boyer-Moore-Gosper
 search for a fixed string that eliminates impossible text from being
 considered by the full regexp matcher without necessarily having to
 look at every character. The result is typically many times faster
 than Unix grep or egrep. (Regular expressions containing backreferencing
 will run more slowly, however.)
.fi
.\" .RE
.SH 関連項目
.BR deb (5),
.BR dpkg (8),
.BR dpkg-deb (1).
.SH 翻訳者
鵜飼文敏 <ukai@debian.or.jp>
