/* -*- Mode: C; ; c-file-style: "python" -*- */
/* gst-python
 * Copyright (C) 2004 Johan Dahlin
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 * 
 * Author: Johan Dahlin <johan@gnome.org>
 */

%%
ignore
  gst_bin_get_by_name_recurse_up
%%
override gst_bin_add args
static PyObject *
_wrap_gst_bin_add(PyGObject *self, PyObject *args)
{
	PyGObject *element;
	int i, len;

	len = PyTuple_Size(args);
	if (len == 0) {
		PyErr_SetString(PyExc_TypeError, "GstBin.add_many requires at least one argument");
		return NULL;
	}
       
    
	for (i = 0; i < len; i++) {
		element = (PyGObject*)PyTuple_GetItem(args, i);
		if (!pygobject_check(element, &PyGstElement_Type))
		{
			PyErr_SetString(PyExc_TypeError, "argument must be a GstElement");
			return NULL;
		}
	}
	
	for (i = 0; i < len; i++) {
		element = (PyGObject*)PyTuple_GetItem(args, i);
		if (!gst_bin_add(GST_BIN(self->obj), GST_ELEMENT(element->obj))) {
			PyErr_Format(PyGstExc_AddError, "Could not add element '%s'", GST_OBJECT_NAME(element->obj));
			return NULL;
                }
	}

	Py_INCREF(Py_None);
	return Py_None;
}

%%
override gst_bin_add_many kwargs
static PyObject *
_wrap_gst_bin_add_many(PyGObject *self, PyObject *args)
{
    if (PyErr_Warn(PyExc_DeprecationWarning, "gst.Bin.add_many() is deprecated, use gst.Bin.add()") < 0)
        return NULL;
    return _wrap_gst_bin_add (self, args);
}

%%
override gst_bin_remove args
static PyObject *
_wrap_gst_bin_remove(PyGObject *self, PyObject *args)
{
	PyGObject *element;
	int i, len;

	len = PyTuple_Size(args);
	if (len == 0) {
		PyErr_SetString(PyExc_TypeError, "GstBin.remove_many requires at least one argument");
		return NULL;
	}
       
    
	for (i = 0; i < len; i++) {
		element = (PyGObject*)PyTuple_GetItem(args, i);
		if (!pygobject_check(element, &PyGstElement_Type))
		{
			PyErr_SetString(PyExc_TypeError, "argument must be a GstElement");
			return NULL;
		}
	}
	
	for (i = 0; i < len; i++) {
		element = (PyGObject*)PyTuple_GetItem(args, i);
		if (!gst_bin_remove(GST_BIN(self->obj), GST_ELEMENT(element->obj))) {
			PyErr_Format(PyGstExc_RemoveError, "Could not remove element '%s'", GST_OBJECT_NAME(element->obj));
			return NULL;
	        }
	}

	Py_INCREF(Py_None);
	return Py_None;
}

%%
override gst_bin_remove_many kwargs
static PyObject *
_wrap_gst_bin_remove_many(PyGObject *self, PyObject *args)
{
    if (PyErr_Warn(PyExc_DeprecationWarning, "gst.Bin.remove_many() is deprecated, use gst.Bin.remove()") < 0)
        return NULL;
    return _wrap_gst_bin_remove (self, args);
}
%%
override gst_bin_get_by_name kwargs
static PyObject *
_wrap_gst_bin_get_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "recurse", NULL };
    char *name;
    gboolean recurse = FALSE;
    GstElement *el;
    PyObject *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "s|b:GstBin.get_by_name",
				     kwlist, &name, &recurse))
        return NULL;
    
    if (recurse)
	    el = gst_bin_get_by_name_recurse_up(GST_BIN(self->obj), name);
    else
	    el = gst_bin_get_by_name(GST_BIN(self->obj), name);
    
    /* pygobject_new handles NULL checking */
    ret = pygstobject_new((GObject *)el);
    if (el)
	    gst_object_unref (el); /* from get_by_name */
    return ret;
}
%%
override-slot GstBin.tp_iter
static PyObject *
_wrap_gst_bin_tp_iter(PyGObject *self)
{
    return _wrap_gst_bin_iterate_elements(self);
}
