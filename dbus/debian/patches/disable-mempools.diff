diff -ur dbus/dbus/dbus-mempool.c dbus.new/dbus/dbus-mempool.c
--- dbus/dbus/dbus-mempool.c	2005-12-15 17:46:01.000000000 +0200
+++ dbus.new/dbus/dbus-mempool.c	2005-12-23 13:57:28.286626808 +0200
@@ -207,8 +207,6 @@
 void*
 _dbus_mem_pool_alloc (DBusMemPool *pool)
 {
-#ifdef DBUS_BUILD_TESTS
-  if (_dbus_disable_mem_pools ())
     {
       DBusMemBlock *block;
       int alloc_size;
@@ -239,89 +237,6 @@
       else
         return NULL;
     }
-  else
-#endif
-    {
-      if (_dbus_decrement_fail_alloc_counter ())
-        {
-          _dbus_verbose (" FAILING mempool alloc\n");
-          return NULL;
-        }
-      else if (pool->free_elements)
-        {
-          DBusFreedElement *element = pool->free_elements;
-
-          pool->free_elements = pool->free_elements->next;
-
-          if (pool->zero_elements)
-            memset (element, '\0', pool->element_size);
-
-          pool->allocated_elements += 1;
-          
-          return element;
-        }
-      else
-        {
-          void *element;
-      
-          if (pool->blocks == NULL ||
-              pool->blocks->used_so_far == pool->block_size)
-            {
-              /* Need a new block */
-              DBusMemBlock *block;
-              int alloc_size;
-#ifdef DBUS_BUILD_TESTS
-              int saved_counter;
-#endif
-          
-              if (pool->block_size <= _DBUS_INT_MAX / 4) /* avoid overflow */
-                {
-                  /* use a larger block size for our next block */
-                  pool->block_size *= 2;
-                  _dbus_assert ((pool->block_size %
-                                 pool->element_size) == 0);
-                }
-
-              alloc_size = sizeof (DBusMemBlock) - ELEMENT_PADDING + pool->block_size;
-
-#ifdef DBUS_BUILD_TESTS
-              /* We save/restore the counter, so that memory pools won't
-               * cause a given function to have different number of
-               * allocations on different invocations. i.e.  when testing
-               * we want consistent alloc patterns. So we skip our
-               * malloc here for purposes of failed alloc simulation.
-               */
-              saved_counter = _dbus_get_fail_alloc_counter ();
-              _dbus_set_fail_alloc_counter (_DBUS_INT_MAX);
-#endif
-          
-              if (pool->zero_elements)
-                block = dbus_malloc0 (alloc_size);
-              else
-                block = dbus_malloc (alloc_size);
-
-#ifdef DBUS_BUILD_TESTS
-              _dbus_set_fail_alloc_counter (saved_counter);
-              _dbus_assert (saved_counter == _dbus_get_fail_alloc_counter ());
-#endif
-          
-              if (block == NULL)
-                return NULL;
-
-              block->used_so_far = 0;
-              block->next = pool->blocks;
-              pool->blocks = block;          
-            }
-      
-          element = &pool->blocks->elements[pool->blocks->used_so_far];
-          
-          pool->blocks->used_so_far += pool->element_size;
-
-          pool->allocated_elements += 1;
-          
-          return element;
-        }
-    }
 }
 
 /**
@@ -336,8 +251,6 @@
 _dbus_mem_pool_dealloc (DBusMemPool *pool,
                         void        *element)
 {
-#ifdef DBUS_BUILD_TESTS
-  if (_dbus_disable_mem_pools ())
     {
       DBusMemBlock *block;
       DBusMemBlock *prev;
@@ -373,20 +286,6 @@
       _dbus_assert_not_reached ("freed nonexistent block");
       return FALSE;
     }
-  else
-#endif
-    {
-      DBusFreedElement *freed;
-      
-      freed = element;
-      freed->next = pool->free_elements;
-      pool->free_elements = freed;
-      
-      _dbus_assert (pool->allocated_elements > 0);
-      pool->allocated_elements -= 1;
-      
-      return pool->allocated_elements == 0;
-    }
 }
 
 /** @} */
