<?xml version="1.0"?>
<tests>
  <test id="attA001" origin="Microsoft">
    <description>Test attribute declaration with optional attribute form = 'qualified' at top level</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attA001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attA002" origin="Microsoft">
    <description>Test attribute declaration with optional attribute form = 'unqualified' at top level</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attA002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attA003" origin="Microsoft">
    <description>Test attribute declaration with optional attribute form = 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attA003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attA004" origin="Microsoft">
    <description>Test attribute declaration with optional attribute form = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attA004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attA005" origin="Microsoft">
    <description>Test attribute declaration with optional attribute form = 'Qualified'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attA005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attA006" origin="Microsoft">
    <description>Test attribute declaration with optional attribute form = 'Unqualified'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attA006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attA007" origin="Microsoft">
    <description>Test attribute declaration with optional attribute form = 'qualified'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attA007.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attA008" origin="Microsoft">
    <description>Test attribute declaration with optional attribute form = 'unqualified'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attA008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attB001" origin="Microsoft">
    <description>Test attribute declaration with optional attribute id = 'a'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attB001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attB002" origin="Microsoft">
    <description>Test attribute declaration with optional attribute id = 'very long id &gt; 1000 chars'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attB002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attB003" origin="Microsoft">
    <description>Test attribute declaration with optional attribute id = 'all valid chars'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attB003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attB004" origin="Microsoft">
    <description>Test attribute declaration with optional attribute id = '_1'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attB004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attB005" origin="Microsoft">
    <description>Test attribute declaration with optional attribute id = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attB005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attB006" origin="Microsoft">
    <description>Test attribute declaration with optional attribute id = '0'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attB006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attC001" origin="Microsoft">
    <description>Test attribute declaration with attribute name = 'a'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attC001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attC002" origin="Microsoft">
    <description>Test attribute declaration with attribute name = 'very long name &gt; 1000 chars'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attC002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attC003" origin="Microsoft">
    <description>Test attribute declaration with attribute name = '_1'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attC003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attC004" origin="Microsoft">
    <description>Test attribute declaration with attribute name = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attC004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attC005" origin="Microsoft">
    <description>Test attribute declaration with attribute name = '0'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attC005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attC006" origin="Microsoft">
    <description>Test attribute declaration with attribute name = '''</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attC006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attC007" origin="Microsoft">
    <description>Test attribute declaration with attribute name = 'a:b' namespace for prefix 'a' is declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attC007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attC008" origin="Microsoft">
    <description>Test attribute declaration with attribute name = 'a:b' namespace for prefix 'a' is NOT declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attC008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attC009" origin="Microsoft">
    <description>Test attribute declaration with attribute name = 'a:b:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attC009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attC010" origin="Microsoft">
    <description>Test attribute declaration with attribute name = ':_'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attC010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attD001" origin="Microsoft">
    <description>Global attribute declaration type='global simple type'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attD001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attD002" origin="Microsoft">
    <description>Global attribute declaration type='global complex type'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attD002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attD003" origin="Microsoft">
    <description>Global attribute declaration type='simpleType derived by restrictrion from another simpleType'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attD003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attD003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attD004" origin="Microsoft">
    <description>Global attribute declaration type='simpleType with a list of number'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attD004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attD004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attD005" origin="Microsoft">
    <description>Global attribute declaration type=':_'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attD005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attD006" origin="Microsoft">
    <description>Global attribute declaration type='123'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attD006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attD007" origin="Microsoft">
    <description>Global attribute declaration type='simpleType with a union of two list and a atomic simpleType'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attD007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attD007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attE001" origin="Microsoft">
    <description>Local attribute declaration ref='global attribute name'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attE001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attE001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attE002" origin="Microsoft">
    <description>Test attribute declaration with optional attribute ref = 'local attribute name'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attE002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attE003" origin="Microsoft">
    <description>Test attribute declaration with optional attribute ref = 'global attributeGroup name'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attE003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attE004" origin="Microsoft">
    <description>reference to a global complex Type with simpleContentref='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attE004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attE005" origin="Microsoft">
    <description>Local attribute declaration ref=':_'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attE005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attE006" origin="Microsoft">
    <description>Local attribute declaration ref='123'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attE006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attE007" origin="Microsoft">
    <description>Local attribute declaration ref=''</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attE007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attE008" origin="Microsoft">
    <description>reference an attribute that is from imported xsdref='global attribute which is declared in an imported XSD'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attE008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attF001" origin="Microsoft">
    <description>Test attribute declaration with optional attribute use = 'prohibited'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attF002" origin="Microsoft">
    <description>Test attribute declaration with optional attribute use = 'optional'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attF003" origin="Microsoft">
    <description>Test attribute declaration with optional attribute use = 'required'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attF004" origin="Microsoft">
    <description>Test local attribute declaration with optional attribute use = 'default'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attF005" origin="Microsoft">
    <description>Test local attribute declaration with optional attribute use = 'fixed'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attF006" origin="Microsoft">
    <description>Test local attribute declaration with optional attribute use = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attF007" origin="Microsoft">
    <description>Test local attribute declaration with optional attribute use = 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attF008" origin="Microsoft">
    <description>Test global attribute declaration with optional attribute use = 'default'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attF009" origin="Microsoft">
    <description>Test global attribute declaration with optional attribute use = 'fixed'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attF010" origin="Microsoft">
    <description>Test global attribute declaration with optional attribute use = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attF011" origin="Microsoft">
    <description>Test global attribute declaration with optional attribute use = 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attF011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attG001" origin="Microsoft">
    <description>Attribute/attribute with non schema namespacetargetNamespace='foo:bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attG001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attG002" origin="Microsoft">
    <description>Attribute/attribute with non schema namespacetargetNamespace=''</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attG002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attG003" origin="Microsoft">
    <description>Attribute/attribute with non schema namespacetargetNamespace='http://foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attG003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attH001" origin="Microsoft">
    <description>Test attribute declaration with optional attribute value = 'string'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attH001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attI001" origin="Microsoft">
    <description>Basic attribute with just annotation content</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attI001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attI002" origin="Microsoft">
    <description>Basic attribute with just simpleType content</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attI002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attI003" origin="Microsoft">
    <description>Basic attribute with annotation followed by simpleType content</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attI003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attI003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attI004" origin="Microsoft">
    <description>Basic attribute with two annotation content</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attI004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attI005" origin="Microsoft">
    <description>Basic attribute with simpleType follow by annotation content</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attI005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attI006" origin="Microsoft">
    <description>Basic attribute with two simpleType content</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attI006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attJ001" origin="Microsoft">
    <description>xml doc do not specify the attribute, for att declared under schema, complexType and attributeGroup, use = 'prohibited'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attJ002" origin="Microsoft">
    <description>xml doc specify the attribute, attribute decl under schema, use = 'prohibited'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attJ003" origin="Microsoft">
    <description>xml doc specify the attribute, attribute decl under complex type, use = 'prohibited'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attJ004" origin="Microsoft">
    <description>xml doc does not specify the attribute, attribute decl under attribute group, use = 'prohibited'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attJ005" origin="Microsoft">
    <description>xml doc do not specify the attribute, use = 'optional'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attJ006" origin="Microsoft">
    <description>xml doc specify the attribute, use = 'optional'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attJ007" origin="Microsoft">
    <description>xml doc specify the attribute, for att declared under complexType and attributeGroup, use = 'required'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attJ008" origin="Microsoft">
    <description>xml doc do not specify the attribute, attribute decl under schema use = 'required'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attJ009" origin="Microsoft">
    <description>xml doc do not specify the attribute, attribute decl under complexType, use = 'required'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attJ010" origin="Microsoft">
    <description>xml doc do not specify the attribute, attribute decl under attribute group use = 'required'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attJ011" origin="Microsoft">
    <description>parent is schema, use = 'default'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attJ012" origin="Microsoft">
    <description>parent is schema, use = 'fixed'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attJ013" origin="Microsoft">
    <description>parent is complexType, use = 'default'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attJ014" origin="Microsoft">
    <description>parent is complexType, use = 'fixed'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attJ015" origin="Microsoft">
    <description>parent is attributeGroup, use = 'default'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attJ016" origin="Microsoft">
    <description>parent is attributeGroup, use = 'fixed'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attJ017" origin="Microsoft">
    <description>xml doc do not specify the attribute, use = 'fixed, value='123''</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attJ018" origin="Microsoft">
    <description>Basic attribute with parent schema, parent attributeGroup, parent complexType (test most of the common type and ref)</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attJ018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attKa001" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, default and fixed both present, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa002" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, use=absent, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKa003" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, use=optional, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa004" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, use=required, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa005" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, use=prohibited, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa006" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, use=absent, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKa007" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, use=optional, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa008" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, use=required, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa009" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, use=prohibited, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa010" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, ref present, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa011" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, type present, simpleType childNode present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa012" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, name= xmlns, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa013" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, name=xmlns:, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa014" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, name=xmlns:a, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKa015" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is schema, targetNamespace of the attribute decl is http://www.w3.org/2001/XMLSchema-instance, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKa015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb001" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, default and fixed both present, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb002" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, use=absent, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKb003" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, use=optional, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKb004" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, use=required, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb005" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, use=prohibited, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb006" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, use=absent, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKb007" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, use=optional, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb007.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKb008" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, use=required, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKb009" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, use=prohibited, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKb010" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, ref present, name present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb011" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, ref present, simpleType childNode present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb012" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, ref present, form attribute present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb013" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, ref present, type attribute present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb014" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, type present, simpleType childNode present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb015" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, name= xmlns, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb016" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, name=xmlns:, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb017" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, name=xmlns:a, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKb018" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is attributeGroup, targetNamespace of the attribute decl is http://www.w3.org/2001/XMLSchema-instance, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKb018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc001" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, default and fixed both present, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc002" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, use=absent, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKc003" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, use=optional, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKc004" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, use=required, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc005" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, use=prohibited, default=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc006" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, use=absent, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKc007" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, use=optional, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc007.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKc008" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, use=required, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKc009" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, use=prohibited, fixed=abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attKc010" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, ref present, name present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc011" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, ref present, simpleType childNode present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc012" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, ref present, form attribute present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc013" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, ref present, type attribute present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc014" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, type present, simpleType childNode present,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc015" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, name= xmlns, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc016" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, name=xmlns:, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc017" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, name=xmlns:a, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attKc018" origin="Microsoft">
    <description>Schema Rep Constraint: 1. Parent is complexType, targetNamespace of the attribute decl is http://www.w3.org/2001/XMLSchema-instance, ,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attKc018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attLa001" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is schema , default='abc' , xml instant has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLa002" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is schema , default='abc' , xml instant NOT has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLa003" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is schema , default='abc' , xml instant NOT has the attribute at all,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLa004" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is schema , fixed='abc' , xml instant has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLa005" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is schema , fixed='abc' , xml instant NOT has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attLa006" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is schema , fixed='abc' , xml instant NOT has the attribute at all,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLa006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLb001" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is attributeGroup, default='abc' , xml instant has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLb002" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is attributeGroup, default='abc' , xml instant NOT has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLb003" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is attributeGroup, default='abc' , xml instant NOT has the attribute at all,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLb004" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is attributeGroup, fixed='abc' , xml instant has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLb005" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is attributeGroup, fixed='abc' , xml instant NOT has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attLb006" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is attributeGroup, fixed='abc' , xml instant NOT has the attribute at all,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLb006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLc001" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is complexType, default='abc' , xml instant has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLc002" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is complexType, default='abc' , xml instant NOT has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLc003" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is complexType, default='abc' , xml instant NOT has the attribute at all,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLc004" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is complexType, fixed='abc' , xml instant has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attLc005" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is complexType, fixed='abc' , xml instant NOT has the attribute with value='abc',</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attLc006" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: Parent is complexType, fixed='abc' , xml instant NOT has the attribute at all,</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attLc006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMa001" origin="Microsoft">
    <description>parent is schema (ref in complexType and attributeGroup), form=qualified, attributeFormDefault=absentattribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMa001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMa001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMa002" origin="Microsoft">
    <description>parent is schema (ref in complexType and attributeGroup), form=unqualified, attributeFormDefault=qualified,attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMa002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMa002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMa003" origin="Microsoft">
    <description>parent is schema (ref in complexType and attributeGroup), form=qualified, attributeFormDefault=absentattribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMa003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMa003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMa004" origin="Microsoft">
    <description>parent is schema (ref in complexType and attributeGroup), form=unqualified, attributeFormDefault=qualified,attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMa004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMa004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMb001" origin="Microsoft">
    <description>parent is complexType, form=qualified, attributeFormDefault=absent, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMb002" origin="Microsoft">
    <description>parent is complexType, form=qualified, attributeFormDefault=unqualified, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMb003" origin="Microsoft">
    <description>parent is complexType, form=qualified, attributeFormDefault=qualified, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMb004" origin="Microsoft">
    <description>parent is complexType, form=qualified, attributeFormDefault=absent, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMb005" origin="Microsoft">
    <description>parent is complexType, form=qualified, attributeFormDefault=unqualified, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMb006" origin="Microsoft">
    <description>parent is complexType, form=qualified, attributeFormDefault=qualified, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMb007" origin="Microsoft">
    <description>parent is complexType, form=unqualified, attributeFormDefault=absent, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMb008" origin="Microsoft">
    <description>parent is complexType, form=unqualified, attributeFormDefault=unqualified, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMb009" origin="Microsoft">
    <description>parent is complexType, form=unqualified, attributeFormDefault=qualified, attribute in xml doc has no prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMb010" origin="Microsoft">
    <description>parent is complexType, form=unqualified, attributeFormDefault=absent, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMb011" origin="Microsoft">
    <description>parent is complexType, form=unqualified, attributeFormDefault=unqualified, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMb012" origin="Microsoft">
    <description>parent is complexType, form=unqualified, attributeFormDefault=qualified, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMb012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMc001" origin="Microsoft">
    <description>parent is attributeGroup,form=qualified, attributeFormDefault=absent, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMc002" origin="Microsoft">
    <description>parent is attributeGroup,form=qualified, attributeFormDefault=unqualified, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMc003" origin="Microsoft">
    <description>parent is attributeGroup,form=qualified, attributeFormDefault=qualified, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMc004" origin="Microsoft">
    <description>parent is attributeGroup,form=qualified, attributeFormDefault=absent, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMc005" origin="Microsoft">
    <description>parent is attributeGroup,form=qualified, attributeFormDefault=unqualified, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMc006" origin="Microsoft">
    <description>parent is attributeGroup,form=qualified, attributeFormDefault=qualified, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMc007" origin="Microsoft">
    <description>parent is attributeGroup,form=unqualified, attributeFormDefault=absent, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMc008" origin="Microsoft">
    <description>parent is attributeGroup,form=unqualified, attributeFormDefault=unqualified, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMc009" origin="Microsoft">
    <description>parent is attributeGroup,form=unqualified, attributeFormDefault=qualified, attribute in xml doc has no prefix, but the containing element has a default namespace declared</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attMc010" origin="Microsoft">
    <description>parent is attributeGroup,form=unqualified, attributeFormDefault=absent, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMc011" origin="Microsoft">
    <description>parent is attributeGroup,form=unqualified, attributeFormDefault=unqualified, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attMc012" origin="Microsoft">
    <description>parent is attributeGroup,form=unqualified, attributeFormDefault=qualified, attribute in xml doc is qualified with prefix</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attMc012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attO001" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: type=int, instant xml value ='abc'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attO002" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: type=int, fixed='abc'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO003" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: type=int, default='abc'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO004" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: type=enumeration, instant xml value ='not a enumeration type'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attO005" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid (check normalization): type=int, default=' 1 2'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO006" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid (check normalization): type=int, fixed=' 123', instant xml value=' 123 '</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attO007" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid (check normalization): type=string, fixed=' 1 2 3', instant xml value=' 1 2 3'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attO008" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid (check normalization): type=string, fixed=' 1 2 3', instant xml value=' 1 2 3'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attO009" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid (check normalization): type=NMTOKENS, fixed=' -linebreak -tab X -tab -linebreak Y -linebreak Z -linebreak', instant xml value='X Y Z'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attO010" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid (check normalization): type=NMTOKENS, fixed='#xd; #xd;A #xa; #xa;B #xd; #xa;' instant xml value='#xD #xD A #xA #xA B #xD #xA'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attO011" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid (check normalization): type=string, fixed=' -linebreak -tab X -tab -linebreak Y -linebreak Z -linebreak', instant xml value=' X Y Z '</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attO012" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid (check normalization): type=string, fixed='#xd; #xd;A #xa; #xa;B #xd; #xa;' instant xml value='A B'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attO013" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=required, referenced in complexType with use=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO014" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=required, referenced in complexType with use=optional</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO015" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=required, referenced in complexType with use=required</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO016" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=required, referenced in complexType with use=prohibited</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO017" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=optional, referenced in complexType with use=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO018" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=optional, referenced in complexType with use=optional</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO018.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attO019" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=optional, referenced in complexType with use=required</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO020" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=optional, referenced in complexType with use=prohibited</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO021" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=prohibited, referenced in complexType with use=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO022" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=prohibited, referenced in complexType with use=optional</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO023" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=prohibited, referenced in complexType with use=required</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO024" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with use=prohibited, referenced in complexType with use=prohibited</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attO025" origin="Microsoft">
    <description>Validation Rule: Attribute Locally Valid: global attribute 'foo' with, fixed='123', referenced in complexType fixed='345'</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attO025.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attP001" origin="Microsoft">
    <description>Attribute/attribute decl within attribute decl</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attP002" origin="Microsoft">
    <description>element decl within attribute decl</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attP003" origin="Microsoft">
    <description>global decl can't contain ref</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attP004" origin="Microsoft">
    <description>type='my simple type', fixed=conform to the type, and xml instant has the attribute with valid value</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP005" origin="Microsoft">
    <description>type='my simple type', fixed=conform to the type, and xml instant has the attribute with invalid value</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attP006" origin="Microsoft">
    <description>type='my simple type', fixed=NOT conform to the type</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attP007" origin="Microsoft">
    <description>use=required, fixed and default are absent (must appear, value can be anything), instant xml value=36</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP008" origin="Microsoft">
    <description>use=required, fixed and default are absent (must appear, value can be anything), instant xml attribute absent</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attP009" origin="Microsoft">
    <description>use=required, fixed='37' (must appear once, value must be '37'), instant xml value does not appear</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP010" origin="Microsoft">
    <description>use=required, fixed='37' (must appear once, value must be '37'), instant xml value =36</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attP011" origin="Microsoft">
    <description>use=required, fixed='37' (must appear once, value must be '37'), instant xml value =37</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP012" origin="Microsoft">
    <description>use=required, fixed='37' (must appear once, value must be '37'), instant xml value =38</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attP013" origin="Microsoft">
    <description>use=absent, fixed='37' (may appear once, if appear, value must be '37'), instant xml value does not appear (attribute not exist in instant doc)</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP014" origin="Microsoft">
    <description>use=absent, fixed='37' (may appear once, if appear, value must be '37'), instant xml value =36</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP014.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attP015" origin="Microsoft">
    <description>use=absent, fixed='37' (may appear once, if appear, value must be '37'), instant xml value =37</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP016" origin="Microsoft">
    <description>use=absent, fixed='37' (may appear once, if appear, value must be '37'), instant xml value =38</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP016.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attP017" origin="Microsoft">
    <description>use=optional, fixed='37' (may appear once, if appear, value must be '37'), instant xml value does not appear (attribute not exist in instant doc)</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP018" origin="Microsoft">
    <description>use=optional, fixed='37' (may appear once, if appear, value must be '37'), instant xml value =36</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP018.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attP019" origin="Microsoft">
    <description>use=optional, fixed='37' (may appear once, if appear, value must be '37'), instant xml value =37</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP020" origin="Microsoft">
    <description>use=optional, fixed='37' (may appear once, if appear, value must be '37'), instant xml value =38</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP020.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attP021" origin="Microsoft">
    <description>use=absent, default='37' (may appear once, may have any value), instant xml value does not appear (this will have the default attribute and value)</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP022" origin="Microsoft">
    <description>use=absent, default='37' (may appear once, may have any value), instant xml value=37</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP023" origin="Microsoft">
    <description>use=absent, default='37' (may appear once, may have any value), instant xml value=38</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP024" origin="Microsoft">
    <description>use=optional, default='37' (may appear once, may have any value), instant xml value does not appear (this will have the default attribute and value)</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP024.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP025" origin="Microsoft">
    <description>use=optional, default='37' (may appear once, may have any value), instant xml value=37</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP025.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP026" origin="Microsoft">
    <description>use=optional, default='37' (may appear once, may have any value), instant xml value=38</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP027" origin="Microsoft">
    <description>name='foo' use=optional, default='37' (may appear once, may have any value) name='foo1', instant xml value=38</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP027.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attP028" origin="Microsoft">
    <description>use=prohibited, default='37' (must not appear in xml instant, attribute does not appear in the instant XML (attribute not exist in instant doc)</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP028.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP029" origin="Microsoft">
    <description>use=prohibited, fixed='37' (must not appear in xml instant, attribute does not appear in the instant XML (attribute not exist in instant doc)</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attP030" origin="Microsoft">
    <description>use=prohibited, default='37' (must not appear in xml instant, attribute does appear in the instant XML (attribute not exist in instant doc)</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attP031" origin="Microsoft">
    <description>use=prohibited, fixed='37' (must not appear in xml instant, attribute does appear in the instant XML (attribute not exist in instant doc)</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP031.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attP032" origin="Microsoft">
    <description>Test that attributes from imported schema (global, attribute Group, complexTyped and simpleTyped) are recognized</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attP032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attQ001" origin="Microsoft">
    <description>parent is complexType, Attr Decl before simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ002" origin="Microsoft">
    <description>parent is complexType, Attr Decl before complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ003" origin="Microsoft">
    <description>parent is complexType, Attr Decl, followed by Attr Group, follow by Attr</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attQ004" origin="Microsoft">
    <description>Attr Decl before annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ005" origin="Microsoft">
    <description>Parent is schema, and name is absent</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ006" origin="Microsoft">
    <description>Attribute/attribute decl with child of node other than notation and simpleType, child=complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ007" origin="Microsoft">
    <description>two attribute decl with the same name, one follow the other in global</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ008" origin="Microsoft">
    <description>two attribute decl with the same name, one inside attribute Group and other is a reference to global attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ009" origin="Microsoft">
    <description>two attribute decl with the same name, one from local one from referenced attribute Group</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ010" origin="Microsoft">
    <description>two attribute decl with the same name, one from global, one from from imported XSD with different namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attQ011" origin="Microsoft">
    <description>two attribute decl with the same name, one from global, one from from redefine XSD with same namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ012" origin="Microsoft">
    <description>two attribute decl with the same name, one from global, one from included XSD</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ013" origin="Microsoft">
    <description>two attribute decl with the same name, reference from different attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ014" origin="Microsoft">
    <description>Attribute/attribute decl under extension element</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attQ015" origin="Microsoft">
    <description>two attribute decl with same id, one under attribute group and, one in element.</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ016" origin="Microsoft">
    <description>two attribute decl with same id, one under attribute group and, one from imported xsd</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ017" origin="Microsoft">
    <description>two attribute decl with same id, one in complex type and, one redefine</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ018" origin="Microsoft">
    <description>two attribute decl with same id, one in element and one from included</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attQ019" origin="Microsoft">
    <description>two attribute, same loca name, from different namespace on same element</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attQ019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attZ001" origin="Microsoft">
    <description>70993 - XmlSchema: Redefine does not recognize restriction of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attZ001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attZ001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attZ002" origin="Microsoft">
    <description>71821 - prohibited attribute doesn't work</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attZ002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attZ002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attZ003" origin="Microsoft">
    <description>Bug 68655 - xml:space attribute cannot be added to the parent when there are children existing</description>
    <files>
      <file tsDir="msxsdtest" folder="attribute" fileName="attZ003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attribute" fileName="attZ003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attgA001" origin="Microsoft">
    <description>Test attributeGroup declaration with optional attribute id='a'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgA001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgA002" origin="Microsoft">
    <description>Test attributeGroup declaration with optional attribute id='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgA002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgA003" origin="Microsoft">
    <description>Test attributeGroup declaration with optional attribute id=''</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgA003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgA004" origin="Microsoft">
    <description>Test attributeGroup declaration with attribute id=':a'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgA004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgA005" origin="Microsoft">
    <description>Test attributeGroups: 2 global attributeGroups with same ID</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgA005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgA006" origin="Microsoft">
    <description>Test attributeGroups: 2 attributeGroups, one is global and one is from 'redefine', with same ID</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgA006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgA007" origin="Microsoft">
    <description>Test attributeGroups: 2 attributeGroup, one is from complexType and one is inside another attributeGroup of some extension, with same ID</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgA007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgA008" origin="Microsoft">
    <description>Test attributeGroups: 2 attributeGroup, one is from imported xsd, and one is from included xsd, with same ID</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgA008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgA009" origin="Microsoft">
    <description>Test attributeGroups: redefine an attributeGroup and give it an existing ID</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgA009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgB001" origin="Microsoft">
    <description>Test attributeGroup declaration with attribute name='a'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgB002" origin="Microsoft">
    <description>Test attributeGroup declaration: cannot have name attribute if not global, parent is attributeGroup, name='a'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgB003" origin="Microsoft">
    <description>Test attributeGroup declaration: cannot have name attribute if not global, parent is complexType, name='a'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgB004" origin="Microsoft">
    <description>Test attributeGroup declaration: cannot have name attribute if not global, parent is extension, name='a'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgB005" origin="Microsoft">
    <description>Test attributeGroup declaration: cannot have name attribute if not global (redefining global is ok), parent is redefine, name='a'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgB006" origin="Microsoft">
    <description>Test attributeGroup declaration with attribute name='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgB007" origin="Microsoft">
    <description>Test attributeGroup declaration with attribute name=''</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgB008" origin="Microsoft">
    <description>Test attributeGroup declaration with attribute name='msxml'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgB009" origin="Microsoft">
    <description>Test attributeGroup declaration: 2 attributeGroups, one imported, one included with same name but different targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgB010" origin="Microsoft">
    <description>Test attributeGroup declaration: 2 global attributeGroups with same name</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgB011" origin="Microsoft">
    <description>Test attributeGroup declaration: 2 attributeGroups with same name both of them from different redefine, with same namespac.</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgB012" origin="Microsoft">
    <description>Test attributeGroup declaration: 2 attributeGroups with same name both of them from different import, with different namespac.</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgB013" origin="Microsoft">
    <description>Test attributeGroup declaration: 2 imported attributeGroups with same name and same targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgB014" origin="Microsoft">
    <description>Test attributeGroup declaration: 2 imported attributeGroups with same name but different targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgB015" origin="Microsoft">
    <description>Test attributeGroup declaration: 2 attributeGroups, one imported, one included with same name and same targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgB015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC001" origin="Microsoft">
    <description>Test attributeGroup declaration: cannot have ref attribute on global, parent is schema, ref='name of a global attribute group '</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC002" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is attributeGroup, ref='name of a global attribute group declared at the beginning of xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC003" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is attributeGroup, ref='name of a global attribute group from imported xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC004" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is attributeGroup, ref='name of a global attribute group from included xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC005" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is attributeGroup, ref='name of global attribute group declared at the end of xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC006" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is attributeGroup, ref='name of attribute group declared inside a redefine', and xml instant has value different what is defined as fixed in the redefined attributeGroup.</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attgC007" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is attributeGroup, ref='name of attribute group declared inside a redefine', and xml instant has value same as what is defined as fixed in the redefined attributeGroup.</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgC008" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is attributeGroup, ref='foo (not a valid reference to an attributeGroup)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC009" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is attributeGroup, ref=''</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC010" origin="Microsoft">
    <description>Test attributeGroup declaration: self referencing, name='test', has child attributeGroup that also has, parent is attributeGroup, ref='test'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC011" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is attributeGroup, ref='foo (a name of a global attribute)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC012" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is attributeGroup, ref='very very log string ( more than 9999 chars)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC013" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is complexType, ref='name of a global attribute group declared at the beginning of xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC014" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is complexType, ref='name of a global attribute group from imported xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC015" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is complexType, ref='name of a global attribute group from included xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC015.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC016" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is complexType, ref='name of global attribute group declared at the end of xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC016.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC017" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is complexType, ref='name of attribute group declared inside a redefine'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC018" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is complexType, ref='foo (not a valid reference to an attributeGroup)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC019" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is complexType, ref=''</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC020" origin="Microsoft">
    <description>Test attributeGroup declaration: self referencing, name='test', has child attributeGroup that also has, parent is complexType, ref='test'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC021" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is complexType, ref='foo (a name of a global attribute)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC022" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is complexType, ref='very very log string ( more than 9999 chars)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC022.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC023" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is extension, ref='name of a global attribute group declared at the beginning of xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC023.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC024" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is extension, ref='name of a global attribute group from imported xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC024.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgC025" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is extension, ref='name of a global attribute group from included xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC025.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attgC026" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is extension, ref='name of a global attribute group from included xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgC027" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is extension, ref='name of global attribute group declared at the end of xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC027.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC028" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is extension, ref='name of attribute group declared inside a redefine'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC028.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attgC029" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is extension, ref='foo (not a valid reference to an attributeGroup)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC030" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is extension, ref=''</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC031" origin="Microsoft">
    <description>Test attributeGroup declaration: self referencing, name='test', has child attributeGroup that also has, parent is extension, ref='test'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC032" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is extension, ref='foo (a name of a global attribute)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC032.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC033" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is extension, ref='very very log string ( more than 9999 chars)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC033.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC034" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is redefine, ref='name of a global attribute group declared at the beginning of xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC034.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC035" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is redefine, ref='name of a global attribute group from imported xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC035.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgC036" origin="Microsoft">
    <description>Test attributeGroup declaration: parent is redefine, ref='name of a global attribute group from included xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC036.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC036.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgC037" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is redefine, ref='name of global attribute group declared at the end of xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC037.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgC038" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is redefine, ref='name of attribute group declared inside a redefine'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC038.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC038.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgC039" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is redefine, ref='foo (not a valid reference to an attributeGroup)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC039.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC040" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is redefine, ref=''</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC040.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC041" origin="Microsoft">
    <description>Test attributeGroup declaration: circular Ref is allow if parent is redefine, name='test', has child attributeGroup that also has, parent is redefine, ref='test'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC041.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC042" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is redefine, ref='foo (a name of a global attribute)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC042.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC043" origin="Microsoft">
    <description>Test attributeGroup declaration: can only reference global attributeGroup parent is redefine, ref='very very log string ( more than 9999 chars)'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC043.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgC044" origin="Microsoft">
    <description>attributeGroup with two attributeGroup as children, both has ref='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC044.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgC045" origin="Microsoft">
    <description>attributeGroup with name='foo', complexType with name='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgC045.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgD001" origin="Microsoft">
    <description>attributeGroup with annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgD002" origin="Microsoft">
    <description>attributeGroup with two annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD003" origin="Microsoft">
    <description>attributeGroup with 2000 attribute decl as child, the xml has the 2000 attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD004" origin="Microsoft">
    <description>attributeGroup with just another attributeGroup, the xml has the attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD005" origin="Microsoft">
    <description>attributeGroup with child in the sequence of ( att, attg, att, attg, att), the xml has the attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD006" origin="Microsoft">
    <description>attributeGroup with two attribute, same name, same namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD007" origin="Microsoft">
    <description>attribute group with two attribute, where the name of one att is same as the ref value of the other</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD008" origin="Microsoft">
    <description>attributeGroup with two attribute, same name, same type</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD009" origin="Microsoft">
    <description>attributeGroup with two attribute, same name, different type</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD010" origin="Microsoft">
    <description>attributeGroup with child attribute and attributeGroup which intern reference to different attributeGroup containing attributes and attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgD011" origin="Microsoft">
    <description>attributeGroup with child attributeGroup that reference to an element</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD012" origin="Microsoft">
    <description>attributeGroup with child element declaration</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD013" origin="Microsoft">
    <description>attributeGroup with child attributeGroup that reference to a simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD014" origin="Microsoft">
    <description>attributeGroup with child attributeGroup that reference to complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD015" origin="Microsoft">
    <description>Basic AttributeGroup ( w/ name = foo and containing an attributeGroup with ref = foobar) and attributeGroup (w/ name=foobar and containing an attributeGroup with ref=foo)</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD016" origin="Microsoft">
    <description>attributeGroup that has two attributeGroups, which reference to two different attributeGroups that reference the same attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD017" origin="Microsoft">
    <description>attributeGroup that has two attributeGroups, parent is redefined, attG1 reference a global attributeGroup which define an attribute 'foo', attG2 reference the redefining xsd's attributeGroup 'foo' with same namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD018" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ id)</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD019" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ annotation)</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD020" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace=##any), the xml has the attribute instance with no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD021" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace=##any), the xml has the attribute instance with 'foo' as its namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD022" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace=##other), the xml has the attribute instance with namespace different from the targetNamdspace of the xsd</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD023" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace=##other), the xml has the attribute instance with namespace same as the targetNamdspace of the xsd</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD023.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attgD024" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace=##any), the xml has the attribute instance which fall under targetNS, but not defiled in the schema</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD024.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attgD025" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace=##local), the xml has the attribute instance which is namespace UNqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD025.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD026" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace=##local), the xml has the attribute instance which is namespace qualified</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD026.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attgD027" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace='foo'), the xml has the attribute instance which is of namespace 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD028" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace='foo'), the xml has the attribute instance which is of namespace 'bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD028.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attgD029" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace=##targetNamespace), the xml has the attribute instance which is of namespace targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD030" origin="Microsoft">
    <description>Basic AttributeGroup with anyAttribute (w/ namespace=##targetNamespace), the xml has the attribute instance which is of namespace other than targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD030.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attgD031" origin="Microsoft">
    <description>AttributeGroup (w/ namespace=other, processContents=##skip), the xml has the attribute instance which conatins attribute not declared in any schema</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD032" origin="Microsoft">
    <description>AttributeGroup (w/ namespace=other, processContents=##lax), the xml has the attribute instance which conatins valid elements and attribute against schema</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD033" origin="Microsoft">
    <description>AttributeGroup (w/ namespace=other, processContents=##lax), the xml has the attribute instance which conatins invalid attribute against schema</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD034" origin="Microsoft">
    <description>AttributeGroup (w/ namespace=other, processContents=##strict), the xml has the attribute instance which conatins valid elements and attribute against schema</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD035" origin="Microsoft">
    <description>complexType's AttributeGroup with reference to attributeGroup from 'redefine', where there is an attribute declared as int, with value='37', the xml has the attribute instance which '36'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD035.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="attgD036" origin="Microsoft">
    <description>complexType's AttributeGroup with reference to attributeGroup from 'redefine', where there is an attribute declared as int, with value='37', the xml has the attribute instance which '37'</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD036.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD036.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="attgD037" origin="Microsoft">
    <description>AttributeGroup with ref='foo' and has attribute decl as child</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD037.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD038" origin="Microsoft">
    <description>AttributeGroup with ref='foo' and has attributeGroup decl as child</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD039" origin="Microsoft">
    <description>AttributeGroup with ref='foo' and has AnyAattribute decl as child</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD039.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD040" origin="Microsoft">
    <description>AttributeGroup with ref='foo' and has annotation as child</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD040.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="attgD041" origin="Microsoft">
    <description>circular reference, attG A ref to B which ref C which ref back to A</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD041.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="attgD042" origin="Microsoft">
    <description>AttributeGroup (w/ namespace=other, processContents=##strict), the xml has the attribute instance which conatins invalid attribute against schema</description>
    <files>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD042.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="attributeGroup" fileName="attgD042.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctA001" origin="Microsoft">
    <description>Declaration with optional attribute abstract = 'false'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA002" origin="Microsoft">
    <description>Declaration with optional attribute abstract = 'true'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA003" origin="Microsoft">
    <description>Declaration with optional attribute abstract = '1'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA004" origin="Microsoft">
    <description>Declaration with optional attribute abstract = '-1'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA005" origin="Microsoft">
    <description>Declaration with optional attribute abstract = '0'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA006" origin="Microsoft">
    <description>Declaration with optional attribute abstract = 'TRUE'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA007" origin="Microsoft">
    <description>Declaration with optional attribute abstract = 'FALSE'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA008" origin="Microsoft">
    <description>Declaration with optional attribute abstract = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA009" origin="Microsoft">
    <description>Declaration with optional attribute block = '#all'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA010" origin="Microsoft">
    <description>Declaration with optional attribute block = 'extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA011" origin="Microsoft">
    <description>Declaration with optional attribute block = 'restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA012" origin="Microsoft">
    <description>Declaration with optional attribute block = 'restriction extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA013" origin="Microsoft">
    <description>Declaration with optional attribute block = 'extension restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA014" origin="Microsoft">
    <description>Declaration with optional attribute block = 'restriction restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA015" origin="Microsoft">
    <description>Declaration with optional attribute block = 'extension extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA016" origin="Microsoft">
    <description>Declaration with optional attribute block = 'substitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA017" origin="Microsoft">
    <description>Declaration with optional attribute block = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA018" origin="Microsoft">
    <description>Declaration with optional attribute final = '#all'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA019" origin="Microsoft">
    <description>Declaration with optional attribute final = 'extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA020" origin="Microsoft">
    <description>Declaration with optional attribute final = 'restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA021" origin="Microsoft">
    <description>Declaration with optional attribute final = 'restriction extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA022" origin="Microsoft">
    <description>Declaration with optional attribute final = 'extension restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA023" origin="Microsoft">
    <description>Declaration with optional attribute final = 'restriction restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA024" origin="Microsoft">
    <description>Declaration with optional attribute final = 'extension extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA025" origin="Microsoft">
    <description>Declaration with optional attribute final = 'substitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA026" origin="Microsoft">
    <description>Declaration with optional attribute final = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA027" origin="Microsoft">
    <description>Declaration with optional attribute id = 'foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA028" origin="Microsoft">
    <description>Declaration with optional attribute id = 'foo123' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA029" origin="Microsoft">
    <description>Declaration with optional attribute id = 'foo123' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA030" origin="Microsoft">
    <description>Declaration with optional attribute id = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA031" origin="Microsoft">
    <description>Declaration with optional attribute id = '123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA032" origin="Microsoft">
    <description>Declaration with optional attribute id = 'foo123' , name attribute='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA033" origin="Microsoft">
    <description>Declaration with optional attribute mixed = 'true'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA034" origin="Microsoft">
    <description>Declaration with optional attribute mixed = 'false'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA035" origin="Microsoft">
    <description>Declaration with optional attribute mixed = '1'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA035.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA036" origin="Microsoft">
    <description>Declaration with optional attribute mixed = '-1'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA036.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA037" origin="Microsoft">
    <description>Declaration with optional attribute mixed = '0'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA037.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA038" origin="Microsoft">
    <description>Declaration with optional attribute mixed = 'TRUE'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA039" origin="Microsoft">
    <description>Declaration with optional attribute mixed = 'FALSE'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA039.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA040" origin="Microsoft">
    <description>Declaration with optional attribute mixed = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA040.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA041" origin="Microsoft">
    <description>Declaration with optional attribute name = 'fooType'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA041.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA041.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA042" origin="Microsoft">
    <description>Declaration with optional attribute name = 'fooType' , complexType not global, parent is an element</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA042.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA043" origin="Microsoft">
    <description>Declaration with optional attribute name = 'a:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA043.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA044" origin="Microsoft">
    <description>Declaration with optional attribute name = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA044.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA045" origin="Microsoft">
    <description>Declaration with optional attribute name = 'xmlns'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA045.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA045.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA046" origin="Microsoft">
    <description>Declaration with optional attribute name = '1foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA046.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctA047" origin="Microsoft">
    <description>Declaration with optional attribute name = '_foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA047.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA047.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA048" origin="Microsoft">
    <description>Declaration with optional attribute name = '_1'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA048.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA048.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctA049" origin="Microsoft">
    <description>attribute with non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA049.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctA049.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB001" origin="Microsoft">
    <description>content of single annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB002" origin="Microsoft">
    <description>content with two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB003" origin="Microsoft">
    <description>content with simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB004" origin="Microsoft">
    <description>content with simpleContent then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB005" origin="Microsoft">
    <description>content with simpleContent then simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB006" origin="Microsoft">
    <description>content with simpleContent then complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB007" origin="Microsoft">
    <description>content with simpleContent then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB008" origin="Microsoft">
    <description>content with simpleContent then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB009" origin="Microsoft">
    <description>content with simpleContent then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB010" origin="Microsoft">
    <description>content with simpleContent then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB011" origin="Microsoft">
    <description>content with simpleContent then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB012" origin="Microsoft">
    <description>content with simpleContent then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB013" origin="Microsoft">
    <description>content with simpleContent then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB014" origin="Microsoft">
    <description>content with simpleContent then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB015" origin="Microsoft">
    <description>content with simpleContent then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB016" origin="Microsoft">
    <description>content with simpleContent then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB017" origin="Microsoft">
    <description>content with complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB018" origin="Microsoft">
    <description>content with complexContent then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB019" origin="Microsoft">
    <description>content with complexContent then simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB020" origin="Microsoft">
    <description>content with complexContent then complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB021" origin="Microsoft">
    <description>content with complexContent then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB022" origin="Microsoft">
    <description>content with complexContent then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB023" origin="Microsoft">
    <description>content with complexContent then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB024" origin="Microsoft">
    <description>content with complexContent then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB025" origin="Microsoft">
    <description>content with complexContent then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB026" origin="Microsoft">
    <description>content with complexContent then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB027" origin="Microsoft">
    <description>content with complexContent then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB028" origin="Microsoft">
    <description>content with complexContent then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB029" origin="Microsoft">
    <description>content with complexContent then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB030" origin="Microsoft">
    <description>content with complexContent then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB031" origin="Microsoft">
    <description>content with group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB032" origin="Microsoft">
    <description>content with group then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB032.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB033" origin="Microsoft">
    <description>content with group then simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB033.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB034" origin="Microsoft">
    <description>content with group then complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB034.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB035" origin="Microsoft">
    <description>content with group then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB035.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB036" origin="Microsoft">
    <description>content with group then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB036.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB037" origin="Microsoft">
    <description>content with group then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB037.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB038" origin="Microsoft">
    <description>content with group then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB039" origin="Microsoft">
    <description>content with group then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB039.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB039.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB040" origin="Microsoft">
    <description>content with group then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB040.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB040.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB041" origin="Microsoft">
    <description>content with group then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB041.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB041.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB042" origin="Microsoft">
    <description>content with group then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB042.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB042.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB043" origin="Microsoft">
    <description>content with group then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB043.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB043.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB044" origin="Microsoft">
    <description>content with group then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB044.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB045" origin="Microsoft">
    <description>content with all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB045.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB045.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB046" origin="Microsoft">
    <description>content with all then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB046.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB047" origin="Microsoft">
    <description>content with all then simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB047.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB048" origin="Microsoft">
    <description>content with all then complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB048.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB049" origin="Microsoft">
    <description>content with all then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB049.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB050" origin="Microsoft">
    <description>content with all then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB050.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB051" origin="Microsoft">
    <description>content with all then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB051.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB052" origin="Microsoft">
    <description>content with all then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB052.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB053" origin="Microsoft">
    <description>content with all then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB053.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB053.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB054" origin="Microsoft">
    <description>content with all then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB054.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB054.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB055" origin="Microsoft">
    <description>content with all then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB055.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB055.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB056" origin="Microsoft">
    <description>content with all then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB056.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB056.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB057" origin="Microsoft">
    <description>content with all then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB057.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB057.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB058" origin="Microsoft">
    <description>content with all then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB058.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB059" origin="Microsoft">
    <description>content with choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB059.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB059.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB060" origin="Microsoft">
    <description>content with choice then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB060.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB061" origin="Microsoft">
    <description>content with choice then simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB061.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB062" origin="Microsoft">
    <description>content with choice then complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB062.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB063" origin="Microsoft">
    <description>content with choice then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB063.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB064" origin="Microsoft">
    <description>content with choice then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB064.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB065" origin="Microsoft">
    <description>content with choice then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB065.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB066" origin="Microsoft">
    <description>content with choice then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB066.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB067" origin="Microsoft">
    <description>content with choice then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB067.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB067.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB068" origin="Microsoft">
    <description>content with choice then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB068.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB068.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB069" origin="Microsoft">
    <description>content with choice then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB069.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB069.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB070" origin="Microsoft">
    <description>content with choice then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB070.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB070.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB071" origin="Microsoft">
    <description>content with choice then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB071.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB071.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB072" origin="Microsoft">
    <description>content with choice then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB072.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB073" origin="Microsoft">
    <description>content with sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB073.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB073.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB074" origin="Microsoft">
    <description>content with sequence then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB074.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB075" origin="Microsoft">
    <description>content with sequence then simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB075.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB076" origin="Microsoft">
    <description>content with sequence then complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB076.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB077" origin="Microsoft">
    <description>content with sequence then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB077.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB078" origin="Microsoft">
    <description>content with sequence then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB078.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB079" origin="Microsoft">
    <description>content with sequence then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB079.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB080" origin="Microsoft">
    <description>content with sequence then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB080.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB081" origin="Microsoft">
    <description>content with sequence then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB081.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB081.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB082" origin="Microsoft">
    <description>content with sequence then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB082.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB082.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB083" origin="Microsoft">
    <description>content with sequence then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB083.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB083.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB084" origin="Microsoft">
    <description>content with sequence then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB084.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB084.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB085" origin="Microsoft">
    <description>content with sequence then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB085.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB085.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB086" origin="Microsoft">
    <description>content with sequence then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB086.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB087" origin="Microsoft">
    <description>content with attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB087.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB087.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB088" origin="Microsoft">
    <description>content with attribute then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB088.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB089" origin="Microsoft">
    <description>content with attribute then simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB089.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB090" origin="Microsoft">
    <description>content with attribute then complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB090.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB091" origin="Microsoft">
    <description>content with attribute then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB091.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB092" origin="Microsoft">
    <description>content with attribute then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB092.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB093" origin="Microsoft">
    <description>content with attribute then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB093.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB094" origin="Microsoft">
    <description>content with attribute then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB094.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB095" origin="Microsoft">
    <description>content with attribute then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB095.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB095.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB096" origin="Microsoft">
    <description>content with attribute then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB096.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB096.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB097" origin="Microsoft">
    <description>content with attribute then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB097.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB097.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB098" origin="Microsoft">
    <description>content with attribute then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB098.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB098.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB099" origin="Microsoft">
    <description>content with attribute then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB099.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB100" origin="Microsoft">
    <description>content with attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB100.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB100.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB101" origin="Microsoft">
    <description>content with attributeGroup then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB101.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB102" origin="Microsoft">
    <description>content with attributeGroup then simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB102.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB103" origin="Microsoft">
    <description>content with attributeGroup then complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB103.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB104" origin="Microsoft">
    <description>content with attributeGroup then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB104.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB105" origin="Microsoft">
    <description>content with attributeGroup then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB105.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB106" origin="Microsoft">
    <description>content with attributeGroup then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB106.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB107" origin="Microsoft">
    <description>content with attributeGroup then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB107.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB108" origin="Microsoft">
    <description>content with attributeGroup then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB108.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB108.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB109" origin="Microsoft">
    <description>content with attributeGroup then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB109.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB109.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB110" origin="Microsoft">
    <description>content with attributeGroup then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB110.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB110.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB111" origin="Microsoft">
    <description>content with attributeGroup then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB111.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB111.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB112" origin="Microsoft">
    <description>content with attributeGroup then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB112.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB113" origin="Microsoft">
    <description>content with anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB113.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB113.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctB114" origin="Microsoft">
    <description>content with anyAttribute then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB114.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB115" origin="Microsoft">
    <description>content with anyAttribute then simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB115.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB116" origin="Microsoft">
    <description>content with anyAttribute then complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB116.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB117" origin="Microsoft">
    <description>content with anyAttribute then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB117.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB118" origin="Microsoft">
    <description>content with anyAttribute then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB118.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB119" origin="Microsoft">
    <description>content with anyAttribute then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB119.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB120" origin="Microsoft">
    <description>content with anyAttribute then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB120.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB121" origin="Microsoft">
    <description>content with anyAttribute then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB121.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB122" origin="Microsoft">
    <description>content with anyAttribute then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB122.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB123" origin="Microsoft">
    <description>content with anyAttribute then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB123.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB124" origin="Microsoft">
    <description>content with anyAttribute then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB124.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctB125" origin="Microsoft">
    <description>content with anyAttribute then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctB125.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctC001" origin="Microsoft">
    <description>simpleContent with optional attribute id = 'foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctC002" origin="Microsoft">
    <description>simpleContent with optional attribute id = 'foo123' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctC003" origin="Microsoft">
    <description>simpleContent with optional attribute id = 'foo123' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctC004" origin="Microsoft">
    <description>simpleContent with optional attribute id = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctC005" origin="Microsoft">
    <description>simpleContent with optional attribute id = '123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctC006" origin="Microsoft">
    <description>attribute with non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctC007" origin="Microsoft">
    <description>simpleContent and content of annotation and restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctC008" origin="Microsoft">
    <description>simpleContent and content of extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctC009" origin="Microsoft">
    <description>simpleContent and content of annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctC010" origin="Microsoft">
    <description>simpleContent and content of extension and annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctC011" origin="Microsoft">
    <description>simpleContent and content of restriction and annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctC012" origin="Microsoft">
    <description>simpleContent and content of annotation and extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctC012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD001" origin="Microsoft">
    <description>simpleContent, content of restriction and base = 'xsd:string'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD002" origin="Microsoft">
    <description>simpleContent, content of restriction and base = defined complex type</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD003" origin="Microsoft">
    <description>simpleContent, content of restriction and base = 'xsd:something'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD004" origin="Microsoft">
    <description>simpleContent, content of restriction and base = 'xsd:anyType'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD005" origin="Microsoft">
    <description>simpleContent, content of restriction and empty content</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD006" origin="Microsoft">
    <description>simpleContent, content of restriction and content of annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD007" origin="Microsoft">
    <description>simpleContent, content of restriction and content of two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD008" origin="Microsoft">
    <description>simpleContent, content of restriction and content of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD009" origin="Microsoft">
    <description>simpleContent, content of restriction and content of two simpleTypes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD010" origin="Microsoft">
    <description>simpleContent, content of restriction and content of annotation then simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD011" origin="Microsoft">
    <description>simpleContent, content of restriction and content of simpleType then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD012" origin="Microsoft">
    <description>simpleContent, content of restriction and content of simpleType then facet</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD013" origin="Microsoft">
    <description>simpleContent, content of restriction and content of duration</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD014" origin="Microsoft">
    <description>simpleContent, content of restriction and content of encoding</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD015" origin="Microsoft">
    <description>simpleContent, content of restriction and content of enumeration</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD016" origin="Microsoft">
    <description>simpleContent, content of restriction and content of length</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD017" origin="Microsoft">
    <description>simpleContent, content of restriction and content of maxExclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD018" origin="Microsoft">
    <description>simpleContent, content of restriction and content of maxInclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD019" origin="Microsoft">
    <description>simpleContent, content of restriction and content of maxLength</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD020" origin="Microsoft">
    <description>simpleContent, content of restriction and content of minExclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD021" origin="Microsoft">
    <description>simpleContent, content of restriction and content of minInclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD022" origin="Microsoft">
    <description>simpleContent, content of restriction and content of minLength</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD023" origin="Microsoft">
    <description>simpleContent, content of restriction and content of pattern</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD024" origin="Microsoft">
    <description>simpleContent, content of restriction and content of period</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD025" origin="Microsoft">
    <description>simpleContent, content of restriction and content of totalDigits</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD025.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD026" origin="Microsoft">
    <description>simpleContent, content of restriction and content of fractionDigits</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD027" origin="Microsoft">
    <description>simpleContent, content of restriction and content of whiteSpace</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD028" origin="Microsoft">
    <description>simpleContent, content of restriction and content of two facets</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD028.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD029" origin="Microsoft">
    <description>simpleContent, content of restriction and content of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD030" origin="Microsoft">
    <description>simpleContent, content of restriction and content of two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD031" origin="Microsoft">
    <description>simpleContent, content of restriction and content of attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD032" origin="Microsoft">
    <description>simpleContent, content of restriction and content of two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD033" origin="Microsoft">
    <description>simpleContent, content of restriction and content of anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD034" origin="Microsoft">
    <description>simpleContent, content of restriction and content of two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD034.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD035" origin="Microsoft">
    <description>simpleContent, content of restriction with base='xsd:string' and content of length=5 and attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD035.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctD036" origin="Microsoft">
    <description>simpleContent, content of restriction and content of group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD036.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD037" origin="Microsoft">
    <description>simpleContent, content of restriction and content of all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD037.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD038" origin="Microsoft">
    <description>simpleContent, content of restriction and content of choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD039" origin="Microsoft">
    <description>simpleContent, content of restriction and content of sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD039.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD040" origin="Microsoft">
    <description>simpleContent, content of restriction and content of attribute then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD040.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD041" origin="Microsoft">
    <description>simpleContent, content of restriction and content of attribute then simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD041.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD042" origin="Microsoft">
    <description>simpleContent, content of restriction and content of attribute then facet</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD042.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctD043" origin="Microsoft">
    <description>simpleContent, content of restriction and content of anyAttribute then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctD043.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE001" origin="Microsoft">
    <description>simpleContent, content of extension and base='xsd:string'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctE002" origin="Microsoft">
    <description>simpleContent, content of extension and base = defined complex type whose base is simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctE003" origin="Microsoft">
    <description>simpleContent, content of extension and base = defined complex type whose base is complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE004" origin="Microsoft">
    <description>simpleContent, content of extension and base = 'xsd:anyType'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE005" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of length=5</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE006" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctE007" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctE008" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctE009" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE010" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctE011" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE012" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE013" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE014" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE015" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of attribute then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE016" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of anyAttribute then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctE017" origin="Microsoft">
    <description>simpleContent, content of extension with base='xsd:string' and content of annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctE017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctF001" origin="Microsoft">
    <description>comlexContent with optional attribute id = 'foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctF002" origin="Microsoft">
    <description>comlexContent with optional attribute id = 'foo123' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctF003" origin="Microsoft">
    <description>comlexContent with optional attribute id = 'foo123' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctF004" origin="Microsoft">
    <description>comlexContent with optional attribute id = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctF005" origin="Microsoft">
    <description>comlexContent with optional attribute id = '123'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctF006" origin="Microsoft">
    <description>complexContent with optional attribute mixed = 'true' and content of restriction then content of sequence with elements</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctF007" origin="Microsoft">
    <description>complexContent with optional attribute mixed = 'false' and content of restriction then content of sequence with elements</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctF008" origin="Microsoft">
    <description>complexContent with optional attribute mixed = 'true' and content of extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctF009" origin="Microsoft">
    <description>complexContent with optional attribute mixed = 'true' and content of extension then content of sequence with elements</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctF010" origin="Microsoft">
    <description>complexContent with optional attribute mixed = 'false' and content of extension then empty content</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctF011" origin="Microsoft">
    <description>complexContent with optional attribute mixed = 'false' and content of extension then content of sequence with elements</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctF012" origin="Microsoft">
    <description>complexContent with no content</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctF013" origin="Microsoft">
    <description>complexContent and content of annotation and restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctF014" origin="Microsoft">
    <description>complexContent and content of extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctF015" origin="Microsoft">
    <description>complexContent and content of annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctF016" origin="Microsoft">
    <description>complexContent and content of extension and annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctF017" origin="Microsoft">
    <description>complexContent and content of restriction and annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctF017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG001" origin="Microsoft">
    <description>complexContent, content of restriction and content with group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG002" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG003" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG004" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG005" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG006" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG007" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG008" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG009" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG010" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG011" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG012" origin="Microsoft">
    <description>complexContent, content of restriction and content with group then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG013" origin="Microsoft">
    <description>complexContent, content of restriction and content with all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG014" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG015" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG016" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG017" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG018" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG019" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG020" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG021" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG022" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG023" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG024" origin="Microsoft">
    <description>complexContent, content of restriction and content with all then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG025" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG025.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG026" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG027" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG028" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG029" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG030" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG031" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG032" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG033" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG034" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG035" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG035.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG036" origin="Microsoft">
    <description>complexContent, content of restriction and content with choice then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG036.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG037" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG037.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG038" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG039" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG039.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG040" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG040.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG041" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG041.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG042" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG042.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG043" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG043.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG043.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG044" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG044.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG044.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG045" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG045.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG045.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG046" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG046.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG046.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG047" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG047.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG047.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG048" origin="Microsoft">
    <description>complexContent, content of restriction and content with sequence then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG048.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG049" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG049.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG049.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG050" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG050.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG051" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG051.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG052" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG052.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG053" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG053.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG054" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG054.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG055" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG055.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG055.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG056" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG056.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG056.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG057" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG057.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG057.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG058" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG058.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG058.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG059" origin="Microsoft">
    <description>complexContent, content of restriction and content with attribute then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG059.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG060" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG060.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG060.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG061" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG061.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG062" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG062.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG063" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG063.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG064" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG064.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG065" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG065.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG066" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG066.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG066.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG067" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG067.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG067.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG068" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG068.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG068.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG069" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG069.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG069.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG070" origin="Microsoft">
    <description>complexContent, content of restriction and content with attributeGroup then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG070.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG071" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG071.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG071.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctG072" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG072.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG073" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG073.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG074" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG074.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG075" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG075.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG076" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG076.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG077" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG077.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG078" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG078.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG079" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG079.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG080" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG080.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctG081" origin="Microsoft">
    <description>complexContent, content of restriction and content with anyAttribute then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctG081.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH001" origin="Microsoft">
    <description>complexContent, content of extension and content with group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH002" origin="Microsoft">
    <description>complexContent, content of extension and content with group then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH003" origin="Microsoft">
    <description>complexContent, content of extension and content with group then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH004" origin="Microsoft">
    <description>complexContent, content of extension and content with group then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH005" origin="Microsoft">
    <description>complexContent, content of extension and content with group then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH006" origin="Microsoft">
    <description>complexContent, content of extension and content with group then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH007" origin="Microsoft">
    <description>complexContent, content of extension and content with group then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH008" origin="Microsoft">
    <description>complexContent, content of extension and content with group then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH009" origin="Microsoft">
    <description>complexContent, content of extension and content with group then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH010" origin="Microsoft">
    <description>complexContent, content of extension and content with group then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH011" origin="Microsoft">
    <description>complexContent, content of extension and content with group then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH012" origin="Microsoft">
    <description>complexContent, content of extension and content with group then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH013" origin="Microsoft">
    <description>complexContent, content of extension and content with all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH014" origin="Microsoft">
    <description>complexContent, content of extension and content with all then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH015" origin="Microsoft">
    <description>complexContent, content of extension and content with all then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH016" origin="Microsoft">
    <description>complexContent, content of extension and content with all then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH017" origin="Microsoft">
    <description>complexContent, content of extension and content with all then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH018" origin="Microsoft">
    <description>complexContent, content of extension and content with all then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH019" origin="Microsoft">
    <description>complexContent, content of extension and content with all then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH020" origin="Microsoft">
    <description>complexContent, content of extension and content with all then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH021" origin="Microsoft">
    <description>complexContent, content of extension and content with all then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH022" origin="Microsoft">
    <description>complexContent, content of extension and content with all then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH023" origin="Microsoft">
    <description>complexContent, content of extension and content with all then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH024" origin="Microsoft">
    <description>complexContent, content of extension and content with all then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH025" origin="Microsoft">
    <description>complexContent, content of extension and content with choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH025.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH026" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH027" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH028" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH029" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH030" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH031" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH032" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH033" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH034" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH035" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH035.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH036" origin="Microsoft">
    <description>complexContent, content of extension and content with choice then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH036.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH037" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH037.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH038" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH039" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH039.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH040" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH040.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH041" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH041.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH042" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH042.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH043" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH043.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH043.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH044" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH044.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH044.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH045" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH045.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH045.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH046" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH046.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH046.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH047" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH047.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH047.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH048" origin="Microsoft">
    <description>complexContent, content of extension and content with sequence then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH048.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH049" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH049.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH049.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH050" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH050.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH051" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH051.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH052" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH052.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH053" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH053.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH054" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH054.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH055" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH055.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH055.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH056" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH056.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH056.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH057" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH057.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH057.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH058" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH058.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH058.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH059" origin="Microsoft">
    <description>complexContent, content of extension and content with attribute then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH059.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH060" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH060.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH060.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH061" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH061.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH062" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH062.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH063" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH063.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH064" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH064.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH065" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH065.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH066" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH066.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH066.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH067" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH067.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH067.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH068" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH068.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH068.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH069" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH069.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH069.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH070" origin="Microsoft">
    <description>complexContent, content of extension and content with attributeGroup then two anyAttributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH070.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH071" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH071.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH071.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctH072" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH072.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH073" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute then group</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH073.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH074" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute then all</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH074.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH075" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute then choice</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH075.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH076" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute then sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH076.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH077" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH077.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH078" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute then two attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH078.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH079" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute then attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH079.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH080" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute then two attributeGroups</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH080.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH081" origin="Microsoft">
    <description>complexContent, content of extension and content with anyAttribute then anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH081.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctH082" origin="Microsoft">
    <description>complexContent, content of extension and content with group then anyAttribute using a list</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH082.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctH082.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI001" origin="Microsoft">
    <description>Two complex types with name = 'fooType'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI002" origin="Microsoft">
    <description>complexType and simpleType with name = 'fooType'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI003" origin="Microsoft">
    <description>complexType with name = 'fooType' , global attribute with name='fooType'</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI004" origin="Microsoft">
    <description>complexType with attribute final = '' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI005" origin="Microsoft">
    <description>complexType with attribute final = '' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI006" origin="Microsoft">
    <description>complexType with attribute final = '#all' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI007" origin="Microsoft">
    <description>complexType with attribute final = '#all' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI008" origin="Microsoft">
    <description>complexType with attribute final = 'restriction' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI009" origin="Microsoft">
    <description>complexType with attribute final = 'restriction' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI010" origin="Microsoft">
    <description>complexType with attribute final = 'extension' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI011" origin="Microsoft">
    <description>complexType with attribute final = 'extension' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI012" origin="Microsoft">
    <description>complexType with attribute final = 'restriction extension' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI013" origin="Microsoft">
    <description>complexType with attribute final = 'restriction extension' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI014" origin="Microsoft">
    <description>schema with finalDefault = '' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI015" origin="Microsoft">
    <description>schema with finalDefault = '' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI016" origin="Microsoft">
    <description>schema with finalDefault = '#all' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI017" origin="Microsoft">
    <description>schema with finalDefault = '#all' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI018" origin="Microsoft">
    <description>schema with finalDefault = '#all' and final='' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI019" origin="Microsoft">
    <description>schema with finalDefault = '#all' and final='' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI020" origin="Microsoft">
    <description>schema with finalDefault = 'restriction' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI021" origin="Microsoft">
    <description>schema with finalDefault = 'restriction' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI022" origin="Microsoft">
    <description>schema with finalDefault = 'restriction' and final='extension' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI023" origin="Microsoft">
    <description>schema with finalDefault = 'extension' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI024" origin="Microsoft">
    <description>schema with finalDefault = 'extension' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctI025" origin="Microsoft">
    <description>schema with finalDefault = 'extension' and final='restriction' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI025.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI026" origin="Microsoft">
    <description>schema with finalDefault = 'restriction extension' and final='restriction' , derived complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI027" origin="Microsoft">
    <description>schema with finalDefault = 'restriction extension' and final='extension' , derived complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI028" origin="Microsoft">
    <description>complexType with attribute block = '' , use xsi:type of substituted complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI028.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI029" origin="Microsoft">
    <description>complexType with attribute block = '' , use xsi:type of substituted complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI030" origin="Microsoft">
    <description>complexType with attribute block = '#all' , use xsi:type of substituted complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI030.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctI031" origin="Microsoft">
    <description>complexType with attribute block = '#all' , use xsi:type of substituted complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI031.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctI032" origin="Microsoft">
    <description>complexType with attribute block = 'restriction' , use xsi:type of substituted complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI032.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctI033" origin="Microsoft">
    <description>complexType with attribute block = 'restriction' , use xsi:type of substituted complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI034" origin="Microsoft">
    <description>complexType with attribute block = 'extension' , use xsi:type of substituted complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI035" origin="Microsoft">
    <description>complexType with attribute block = 'extension' , use xsi:type of substituted complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI035.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctI036" origin="Microsoft">
    <description>schema with blockDefault = '' , use xsi:type of substituted complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI036.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI036.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI037" origin="Microsoft">
    <description>schema with blockDefault = '' , use xsi:type of substituted complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI037.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI038" origin="Microsoft">
    <description>schema with blockDefault = '#all' , use xsi:type of substituted complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI038.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI038.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctI039" origin="Microsoft">
    <description>schema with blockDefault = '#all' , use xsi:type of substituted complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI039.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI039.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctI040" origin="Microsoft">
    <description>schema with blockDefault = '#all' and block='' , use xsi:type of substituted complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI040.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI040.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI041" origin="Microsoft">
    <description>schema with blockDefault = '#all' and block='' , use xsi:type of substituted complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI041.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI041.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI042" origin="Microsoft">
    <description>schema with blockDefault = 'restriction' , use xsi:type of substituted complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI042.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI042.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctI043" origin="Microsoft">
    <description>schema with blockDefault = 'restriction' , use xsi:type of substituted complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI043.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI043.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI044" origin="Microsoft">
    <description>schema with blockDefault = 'restriction' and block='extension' , use xsi:type of substituted complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI044.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI044.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI045" origin="Microsoft">
    <description>schema with blockDefault = 'extension' , use xsi:type of substituted complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI045.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI045.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctI046" origin="Microsoft">
    <description>schema with blockDefault = 'extension' , use xsi:type of substituted complexType by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI046.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI046.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI047" origin="Microsoft">
    <description>schema with blockDefault = 'extension' and block='restriction' , use xsi:type of substituted complexType by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI047.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI047.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctI048" origin="Microsoft">
    <description>complexType with attribute abstract = 'true' , instance document element has type as complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI048.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI048.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctI049" origin="Microsoft">
    <description>complexType with attribute abstract = 'true' , instance document element has xsi:type as complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI049.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI049.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctI050" origin="Microsoft">
    <description>complexType with attribute abstract = 'true' , derived complexType from abstract used by instance document element</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI050.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctI050.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctJ001" origin="Microsoft">
    <description>complexContent with base = a complexType definition</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctJ001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctJ001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctJ002" origin="Microsoft">
    <description>complexContent with base = a simpleType definition</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctJ002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctJ003" origin="Microsoft">
    <description>complexContent with base = internal type</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctJ003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctK001" origin="Microsoft">
    <description>simpleContent with base = a complexType definition whose parent base is a simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctK001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctK001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctK002" origin="Microsoft">
    <description>simpleContent with base = a complexType definition whose parent base is a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctK002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctL001" origin="Microsoft">
    <description>content is empty. instance document element has text</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctL002" origin="Microsoft">
    <description>content is empty. instance document element has element children</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctL003" origin="Microsoft">
    <description>content is empty. instance document element is empty</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL004" origin="Microsoft">
    <description>simpleContent. instance document element has element children</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctL005" origin="Microsoft">
    <description>content is element only. instance document element has element children</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL006" origin="Microsoft">
    <description>content is element only. instance document element has character information</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctL007" origin="Microsoft">
    <description>content is element only. instance document element only whitespace</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL008" origin="Microsoft">
    <description>content is element only. instance document elements in same order as type definition</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL009" origin="Microsoft">
    <description>content is element only. instance document elements are in a different order from type definition</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctL010" origin="Microsoft">
    <description>content is element only. instance document element has element children not in schema</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctL011" origin="Microsoft">
    <description>content is mixed. instance document elements in same order as type definition</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL012" origin="Microsoft">
    <description>content is mixed. instance document elements are in a different order from type definition</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctL013" origin="Microsoft">
    <description>content has attributes defined. instance document has attributes missing</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctL014" origin="Microsoft">
    <description>content has attributes defined. instance document has attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL015" origin="Microsoft">
    <description>content has attribute wildcard, processContents = 'skip' instance document has attributes missing</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL016" origin="Microsoft">
    <description>content has attribute wildcard, processContents = 'skip' instance document has attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL017" origin="Microsoft">
    <description>content has attribute wildcard, processContents = 'lax' instance document has attributes missing</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL018" origin="Microsoft">
    <description>content has attribute wildcard, processContents = 'lax' instance document has attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL019" origin="Microsoft">
    <description>content has attribute wildcard, processContents = 'strict' instance document has attributes missing</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL020" origin="Microsoft">
    <description>content has attribute wildcard, processContents = 'strict' instance document has attributes but namespace does have definition</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL020.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="ctL021" origin="Microsoft">
    <description>content has attribute wildcard, processContents = 'strict' instance document has attributes and namespace has definition</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctL021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctL022" origin="Microsoft">
    <description>Regression #67200 - ability to use abstract complexType as xsi:type using inline schemas</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="bug67200.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="bug67200.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctM001" origin="Microsoft">
    <description>complexType with base type a simpleType. derivation = restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctM001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctM002" origin="Microsoft">
    <description>complexType with base type a simpleType. derivation = extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctM002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctM002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctM003" origin="Microsoft">
    <description>two attribute use pairs have same name and target namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctM003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctM004" origin="Microsoft">
    <description>two attributes with different names both have types derived from ID</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctM004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctN001" origin="Microsoft">
    <description>derivation=extension. final of base type not extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctN001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctN001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctN002" origin="Microsoft">
    <description>derivation=extension. final of base type is extension</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctN002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctN003" origin="Microsoft">
    <description>derivation=extension. Attribute wildcard ##local in base type. Derived type has wildcard with ##any namespace constraint.</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctN003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctN003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctN004" origin="Microsoft">
    <description>derivation=extension. Attribute wildcard ##any in base type. Derived type has wildcard with ##local namespace constraint.</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctN004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctN004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctO001" origin="Microsoft">
    <description>derivation=restriction. final base type not restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctO001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctO001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctO002" origin="Microsoft">
    <description>derivation=restriction. final base type is restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctO002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctO003" origin="Microsoft">
    <description>derivation=restriction. Attribute wildcard in base type. Derived type has attribute that is valid with respect to wildcard</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctO003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctO003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctO004" origin="Microsoft">
    <description>derivation=restriction. Attribute wildcard in base type. Derived type has attribute that is not valid with respect to wildcard</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctO004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctO005" origin="Microsoft">
    <description>derivation=restriction. Derived type has Attribute Wildcard. Base type does not have attribute wildcard</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctO005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="ctO006" origin="Microsoft">
    <description>derivation=restriction. Derived type has Attribute Wildcard. Derived wildcard namespace constraint is a subset of base</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctO006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctO006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="ctO007" origin="Microsoft">
    <description>derivation=restriction. Derived type has Attribute Wildcard. Derived wildcard namespace constraint is not a subset of base</description>
    <files>
      <file tsDir="msxsdtest" folder="complexType" fileName="ctO007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemA001" origin="Microsoft">
    <description>Empty Element</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemA002" origin="Microsoft">
    <description>Element with name='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemA003" origin="Microsoft">
    <description>Element with name='_foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemA004" origin="Microsoft">
    <description>Element with name='name'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemA005" origin="Microsoft">
    <description>Element with name='_foo-2.5??'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemA006" origin="Microsoft">
    <description>Declare a dupe element with the same name</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemA007" origin="Microsoft">
    <description>Name the element with an existing non-element name</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA007.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemA009" origin="Microsoft">
    <description>Element with name='foo:bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemA010" origin="Microsoft">
    <description>Element with name=':bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemA011" origin="Microsoft">
    <description>Element with name='foo:'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemA012" origin="Microsoft">
    <description>Element with name=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemA013" origin="Microsoft">
    <description>Element with name=' '</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemA014" origin="Microsoft">
    <description>Element with name='-2.5foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemA015" origin="Microsoft">
    <description>Element with name='xml'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA015.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemA016" origin="Microsoft">
    <description>Element with name='xmlns'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA016.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemA017" origin="Microsoft">
    <description>Element with name='xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemA017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemB001" origin="Microsoft">
    <description>Element with abstract='true'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemB001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemB002" origin="Microsoft">
    <description>Element with abstract='false'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemB002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemB003" origin="Microsoft">
    <description>Element with abstract='True'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemB003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemB004" origin="Microsoft">
    <description>Element with abstract='False'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemB004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemB005" origin="Microsoft">
    <description>Element with abstract=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemB005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemB006" origin="Microsoft">
    <description>Element with abstract='boolean'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemB006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemB007" origin="Microsoft">
    <description>Element with abstract='1'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemB007.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemB008" origin="Microsoft">
    <description>Element with abstract='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemB008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemB009" origin="Microsoft">
    <description>Element with abstract='abstract'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemB009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemB010" origin="Microsoft">
    <description>Element with abstract='true false'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemB010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemC001" origin="Microsoft">
    <description>Element with block='#all'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemC002" origin="Microsoft">
    <description>Element with block='extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemC003" origin="Microsoft">
    <description>Element with block='restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemC004" origin="Microsoft">
    <description>Element with block='substitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemC005" origin="Microsoft">
    <description>Element with block='extension restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemC006" origin="Microsoft">
    <description>Element with block='restriction substitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemC007" origin="Microsoft">
    <description>Element with block='substitution extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC007.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemC008" origin="Microsoft">
    <description>Element with block='extension restriction substitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemC009" origin="Microsoft">
    <description>Element with block='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemC010" origin="Microsoft">
    <description>Element with block='#All'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemC011" origin="Microsoft">
    <description>Element with block='Extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemC012" origin="Microsoft">
    <description>Element with block='Restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemC013" origin="Microsoft">
    <description>Element with block='Subsitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemC014" origin="Microsoft">
    <description>Element with block='#all extension restriction substitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemC015" origin="Microsoft">
    <description>Element with block='extension foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemC016" origin="Microsoft">
    <description>Element with block='restriction foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemC017" origin="Microsoft">
    <description>Element with block='substitution foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemC018" origin="Microsoft">
    <description>Element with block=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC018.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemC020" origin="Microsoft">
    <description>Clash with final='extension' and block='extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemC020.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemD001" origin="Microsoft">
    <description>Element with default='foo' and the content is textOnly</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemD001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemD002" origin="Microsoft">
    <description>Element with default='foo' and the content is simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemD002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemD003" origin="Microsoft">
    <description>Clash with fixed='foo' and default='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemD003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemD004" origin="Microsoft">
    <description>Element type is complexType and default is present</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemD004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemD005" origin="Microsoft">
    <description>Element with default='foo' and the content is not a textOnly</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemD005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemD006" origin="Microsoft">
    <description>Element with default=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemD006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemE001" origin="Microsoft">
    <description>Element with substitutionGroup='foo' where foo is a pre-defined element</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemE001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemE002" origin="Microsoft">
    <description>Element with substitutionGroup='substitutionGroup'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemE002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemE003" origin="Microsoft">
    <description>Element with substitutionGroup='_foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemE003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemE004" origin="Microsoft">
    <description>Element with substitutionGroup='_foo-2.5??'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemE004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemE005" origin="Microsoft">
    <description>Element with substitutionGroup='foo' where foo is derived from simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemE005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemE006" origin="Microsoft">
    <description>Element with substitutionGroup='-foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemE006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemE007" origin="Microsoft">
    <description>Element with substitutionGroup=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemE007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemE008" origin="Microsoft">
    <description>Element with substitutionGroup='foo' where element foo doesn't exist</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemE008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemE009" origin="Microsoft">
    <description>Element with substitutionGroup='foo' where foo directly pointing to a simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemE009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF001" origin="Microsoft">
    <description>Element with final='#all'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemF002" origin="Microsoft">
    <description>Element with final='extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemF003" origin="Microsoft">
    <description>Element with final='restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemF004" origin="Microsoft">
    <description>Element with final='substitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF005" origin="Microsoft">
    <description>Element with final='extension restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemF006" origin="Microsoft">
    <description>Element with final='restriction substitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF007" origin="Microsoft">
    <description>Element with final='substitution extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF008" origin="Microsoft">
    <description>Element with final='extension restriction substitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF009" origin="Microsoft">
    <description>Element with final='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF010" origin="Microsoft">
    <description>Element with final='#All'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF011" origin="Microsoft">
    <description>Element with final='Extension'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF012" origin="Microsoft">
    <description>Element with final='Restriction'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF013" origin="Microsoft">
    <description>Element with final='Subsitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF014" origin="Microsoft">
    <description>Element with final='#all extension restriction substitution'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF015" origin="Microsoft">
    <description>Element with final='extension foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF016" origin="Microsoft">
    <description>Element with final='restriction foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF017" origin="Microsoft">
    <description>Element with final='substitution foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemF018" origin="Microsoft">
    <description>Element with final=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemF018.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemG001" origin="Microsoft">
    <description>Element with fixed='foo' and the content is textOnly</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemG001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemG002" origin="Microsoft">
    <description>Element with fixed='foo' and the content is simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemG002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemG003" origin="Microsoft">
    <description>Element type is complexType and fixed is present</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemG003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemG004" origin="Microsoft">
    <description>Element with fixed='foo' and the content is not a textOnly</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemG004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemG005" origin="Microsoft">
    <description>Element with fixed=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemG005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemH001" origin="Microsoft">
    <description>Element with its schema elementFormDefault='qualified'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemH001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemH002" origin="Microsoft">
    <description>Element with its schema elementFormDefault='unqualified'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemH002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemH003" origin="Microsoft">
    <description>Element with its schema elementFormDefault=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemH003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemH004" origin="Microsoft">
    <description>Element with its schema elementFormDefault='Qualified'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemH004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemH005" origin="Microsoft">
    <description>Element with its schema elementFormDefault='Unqualified'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemH005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemH006" origin="Microsoft">
    <description>Element with its schema elementFormDefault='qualified unqualified'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemH006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemI001" origin="Microsoft">
    <description>Element with id='foo25'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemI001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemI002" origin="Microsoft">
    <description>Element with id='_foo-2.5'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemI002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemI003" origin="Microsoft">
    <description>Element with id='25'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemI003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemI004" origin="Microsoft">
    <description>Element with id=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemI004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemI005" origin="Microsoft">
    <description>Duplicate ID='foo25' where foo25 is already exists</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemI005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemJ001" origin="Microsoft">
    <description>Element with maxOccurs='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ002" origin="Microsoft">
    <description>Element with maxOccurs='10'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ003" origin="Microsoft">
    <description>Element with maxOccurs='32767'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ004" origin="Microsoft">
    <description>Element with maxOccurs='unbounded'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ005" origin="Microsoft">
    <description>Element with maxOccurs='010'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ006" origin="Microsoft">
    <description>Element with maxOccurs=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemJ007" origin="Microsoft">
    <description>Element with maxOccurs='-1'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemJ008" origin="Microsoft">
    <description>Element with maxOccurs='Unbounded'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemJ009" origin="Microsoft">
    <description>Element with minOccurs='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ010" origin="Microsoft">
    <description>Element with minOccurs='10'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ011" origin="Microsoft">
    <description>Element with minOccurs='32767'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ012" origin="Microsoft">
    <description>Element with minOccurs='unbounded'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemJ013" origin="Microsoft">
    <description>Element with minOccurs='010'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ014" origin="Microsoft">
    <description>Element with minOccurs=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemJ015" origin="Microsoft">
    <description>Element with minOccurs='-1'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemJ016" origin="Microsoft">
    <description>Element with minOccurs='Unbounded'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemJ017" origin="Microsoft">
    <description>Element with minOccurs='0' maxOccurs='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ018" origin="Microsoft">
    <description>Element with minOccurs='1' maxOccurs='2'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ018.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemJ019" origin="Microsoft">
    <description>Element with minOccurs='2' maxOccurs='1'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemJ020" origin="Microsoft">
    <description>Element with minOccurs='unbounded' maxOccurs='unbounded'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemJ021" origin="Microsoft">
    <description>Element with minOccurs='0' maxOccurs='9'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemJ021.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemK001" origin="Microsoft">
    <description>Element with nillable='true'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemK001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemK002" origin="Microsoft">
    <description>Element with nillable='false'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemK002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemK003" origin="Microsoft">
    <description>Element with nillable=''</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemK003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemK004" origin="Microsoft">
    <description>Element with nillable='True'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemK004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemK005" origin="Microsoft">
    <description>Element with nillable='False'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemK005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemK006" origin="Microsoft">
    <description>Element with nillable='true false'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemK006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemK007" origin="Microsoft">
    <description>Element using nullable attribute, invalid cas.</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemK007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemL001" origin="Microsoft">
    <description>Element with ref='foo' with foo is a declared element</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemL001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemL002" origin="Microsoft">
    <description>Element with ref='foo' with foo is an attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemL002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemL003" origin="Microsoft">
    <description>Element with ref='foo' refering to itself</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemL003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemL004" origin="Microsoft">
    <description>Element with ref='foo' 'foo' is circular referenced</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemL004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemL005" origin="Microsoft">
    <description>Element with ref='foo' , element and attribute both are declared as 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemL005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemM001" origin="Microsoft">
    <description>Element with type='foo' with foo is a declared type</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemM001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemM002" origin="Microsoft">
    <description>Element with type='foo' with foo is an attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemM002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemM003" origin="Microsoft">
    <description>Element with type='foo', foo is circular referenced</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemM003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemM004" origin="Microsoft">
    <description>Element with type='foo', type and attribute both are declared as foo</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemM004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemM005" origin="Microsoft">
    <description>Clash with ref='foo' and type='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemM005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemN001" origin="Microsoft">
    <description>Element with key element</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemN001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemN002" origin="Microsoft">
    <description>Element with keyref element</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemN002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemN003" origin="Microsoft">
    <description>Element with unique element</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemN003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemN004" origin="Microsoft">
    <description>Element with an attribute that has a non-schema namespace, a:b='c' where xmlns:a='foo' in xsd:schema</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemN004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemN005" origin="Microsoft">
    <description>Element with a non-schema namespace a:b=c</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemN005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemN006" origin="Microsoft">
    <description>Element with an attribute foo='bar' where foo is a random attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemN006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemO001" origin="Microsoft">
    <description>Document with element's ref to an element with abstract=true</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemO002" origin="Microsoft">
    <description>Document with element with simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemO003" origin="Microsoft">
    <description>Document with element with anonymous simpleType, no type on element</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemO004" origin="Microsoft">
    <description>Document with element with complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemO005" origin="Microsoft">
    <description>Document with element with anonymous complexType, no type on element</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemO006" origin="Microsoft">
    <description>Document with element with nillable = true in xsd andDocument's nil = true in xml</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemO007" origin="Microsoft">
    <description>Document with element with nillable = true and Document's null = true but element has content</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemO008" origin="Microsoft">
    <description>Document with element with nillable = true andDocument's null = false in xml</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemO009" origin="Microsoft">
    <description>Document with element with nillable = true</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemO010" origin="Microsoft">
    <description>Document with element with nillable = false andDocument's null = true in xml</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemO011" origin="Microsoft">
    <description>Document with element with nillable = false andDocument's null = false in xml</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemO012" origin="Microsoft">
    <description>Document with element with nillable = false</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemO012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemO012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemP001" origin="Microsoft">
    <description>Element with default and fixed present</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemP001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemP002" origin="Microsoft">
    <description>Element with complexType parent with default and fixed present</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemP002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemP003" origin="Microsoft">
    <description>Element with complexType parent and name</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemP003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemP004" origin="Microsoft">
    <description>Element with complexType parent and ref</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemP004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemP005" origin="Microsoft">
    <description>Element with complexType parent and nothing else</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemP005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemP006" origin="Microsoft">
    <description>Element with complexType parent, and ref and name</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemP006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemP007" origin="Microsoft">
    <description>Element with complexType parent, complexType child and ref</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemP007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemP008" origin="Microsoft">
    <description>Element with complexType parent, simpleType child and ref</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemP008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemP009" origin="Microsoft">
    <description>Element with complexType parent, type and ref</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemP009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemQ001" origin="Microsoft">
    <description>Element with just annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemQ002" origin="Microsoft">
    <description>Element with annotation and type</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemQ003" origin="Microsoft">
    <description>Element with annotation and simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemQ004" origin="Microsoft">
    <description>Element with simpleType and annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemQ005" origin="Microsoft">
    <description>Element with annotation and complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemQ006" origin="Microsoft">
    <description>Element with complexType and annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemQ007" origin="Microsoft">
    <description>Document with default minOccurs and no occurences</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemQ008" origin="Microsoft">
    <description>Document with default maxOccurs and 1 occurrence</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemQ009" origin="Microsoft">
    <description>Document with default maxOccurs and 2 occurrences</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemQ010" origin="Microsoft">
    <description>Document with minOccurs = 1 and no occurences</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemQ011" origin="Microsoft">
    <description>Document with minOccurs = 1 and 1 occurrence</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemQ012" origin="Microsoft">
    <description>Document with minOccurs = 1 and 2 occurrences</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemQ013" origin="Microsoft">
    <description>Document with minOccurs = 1 and maxOccurs = 2 and 2 occurrences</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemQ014" origin="Microsoft">
    <description>Document with minOccurs = 1 and maxOccurs = 2 and 3 occurrences</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ014.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemQ015" origin="Microsoft">
    <description>Document with minOccurs = 1 and maxOccurs = unbounded and 3 occurrences</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemQ016" origin="Microsoft">
    <description>Document with element with nillable = true and fixed=Hello</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ016.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemQ017" origin="Microsoft">
    <description>Document with fixed=Hello andDocument contains Hello</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemQ018" origin="Microsoft">
    <description>Document with fixed=Hello andDocument contains Hello World!</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ018.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemQ019" origin="Microsoft">
    <description>Document with fixed=Hello andDocument contains nothing</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemQ020" origin="Microsoft">
    <description>Document with default=Hello andDocument contains Hello</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemQ021" origin="Microsoft">
    <description>Document with default=Hello andDocument contains Hello World!</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemQ022" origin="Microsoft">
    <description>Document with default=Hello andDocument contains nothing</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemQ022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemR001" origin="Microsoft">
    <description>Valid Document for Element with form=qualified and explicitly qualified elements</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemR001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemR001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemR002" origin="Microsoft">
    <description>Valid Document for Element with form=qualified and default qualified elements</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemR002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemR002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemR003" origin="Microsoft">
    <description>Valid Document for Element with form=qualified and unqualified elements</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemR003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemR004" origin="Microsoft">
    <description>Valid Document for Element with schema's elementFormDefault=qualified and explicitly qualified elements</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemR004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemR004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemR005" origin="Microsoft">
    <description>Valid Document for Element with schema's elementFormDefault=qualified and default qualified elements</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemR005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemR005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemR006" origin="Microsoft">
    <description>Valid Document for Element with schema's elementFormDefault=qualified and unqualified elements</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemR006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemS001" origin="Microsoft">
    <description>Element with final=restriction and an element affliation by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemS001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemS002" origin="Microsoft">
    <description>Element with final=restriction and an element affliation by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemS002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemS002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemS003" origin="Microsoft">
    <description>Element with final=extension and an element affliation by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemS003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemS003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemS004" origin="Microsoft">
    <description>Element with final=extension and an element affliation by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemS004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemS005" origin="Microsoft">
    <description>Element with final=#all and an element affliation by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemS005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemS006" origin="Microsoft">
    <description>Element with final=#all and an element affliation by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemS006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemS007" origin="Microsoft">
    <description>Element with final='' and an element affliation by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemS007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemS007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemS008" origin="Microsoft">
    <description>Element with final='' and an element affliation by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemS008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemS008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT001" origin="Microsoft">
    <description>Document with Element with block=restriction and a subsitution of a derivation by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT002" origin="Microsoft">
    <description>Document with Element with block=restriction and a subsitution of a derivation by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT003" origin="Microsoft">
    <description>Document with Element with block=extension and a subsitution of a derivation by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT004" origin="Microsoft">
    <description>Document with Element with block=extension and a subsitution of a derivation by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT005" origin="Microsoft">
    <description>Document with Element with block='#all' and a subsitution of a derivation by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT006" origin="Microsoft">
    <description>Document with Element with block='#all' and a subsitution of a derivation by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT007" origin="Microsoft">
    <description>Document with Element with block='' and a subsitution of a derivation by restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT008" origin="Microsoft">
    <description>Document with Element with block='' and a subsitution of a derivation by extension</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT009" origin="Microsoft">
    <description>Element with block='list'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemT010" origin="Microsoft">
    <description>Element with block='union'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="elemT011" origin="Microsoft">
    <description>schema with blockDefault='#all' and a list used in instant XML</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT012" origin="Microsoft">
    <description>Element with block='#all' and a union used in instant XML</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT013" origin="Microsoft">
    <description>schame with blockDefault='#all' and a union used in instant XML</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT014" origin="Microsoft">
    <description>schema with block='#all' and, element with block='', a union used in instant XML</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT015" origin="Microsoft">
    <description>schema with block='#all' and, element with block='', a list used in instant XML</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT016" origin="Microsoft">
    <description>Element type=simpleType A, block='restriction', and instant XMLhas xsi:type=A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT017" origin="Microsoft">
    <description>Element type=simpleType A, block='restriction', and instant XMLhas xsi:type=B (a different type)</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT017.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT018" origin="Microsoft">
    <description>Element type=simpleType A, block='restriction', and instant XMLhas xsi:type=restriction of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT018.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT019" origin="Microsoft">
    <description>Element type=simpleType A, block='restriction', and instant XMLhas xsi:type=base of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT022" origin="Microsoft">
    <description>Element type=simpleType A, block='restriction', and instant XMLhas xsi:type=list of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT024" origin="Microsoft">
    <description>Element type=complexType A, block='restriction', and instant XMLhas xsi:type=restriction of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT024.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT025" origin="Microsoft">
    <description>Element type=complexType A, block='restriction', and instant XMLhas xsi:type=extension of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT025.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT026" origin="Microsoft">
    <description>Element type=ur-Type, block='restriction', and instant XMLhas xsi:type=union of simpleType A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT027" origin="Microsoft">
    <description>Element type=ur-Type, block='restriction', and instant XMLhas xsi:type=union of simpleType A and B</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT028" origin="Microsoft">
    <description>Element type=ur-Type, block='restriction', and instant XMLhas xsi:type=List of simpleType A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT028.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT029" origin="Microsoft">
    <description>Element type=ur-Type, block='restriction', and instant XMLhas xsi:type=List of the Union of simpleType A and B</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT030" origin="Microsoft">
    <description>Element type=simpleType A, block='extension', and instant XMLhas xsi:type=A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT031" origin="Microsoft">
    <description>Element type=simpleType A, block='extension', and instant XMLhas xsi:type=B (a different type)</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT031.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT032" origin="Microsoft">
    <description>Element type=simpleType A, block='extension', and instant XMLhas xsi:type=restriction of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT033" origin="Microsoft">
    <description>Element type=simpleType A, block='extension', and instant XMLhas xsi:type=base of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT033.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT038" origin="Microsoft">
    <description>Element type=complexType A, block='extension', and instant XMLhas xsi:type=restriction of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT038.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT038.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT039" origin="Microsoft">
    <description>Element type=complexType A, block='extension', and instant XMLhas xsi:type=extension of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT039.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT039.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT040" origin="Microsoft">
    <description>Element type=ur-Type, block='extension', and instant XMLhas xsi:type=union of simpleType A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT040.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT040.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT041" origin="Microsoft">
    <description>Element type=ur-Type, block='extension', and instant XMLhas xsi:type=union of simpleType A and B</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT041.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT041.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT042" origin="Microsoft">
    <description>Element type=ur-Type, block='extension', and instant XMLhas xsi:type=List of simpleType A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT042.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT042.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT043" origin="Microsoft">
    <description>Element type=ur-Type, block='extension', and instant XMLhas xsi:type=List of the Union of simpleType A and B</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT043.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT043.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT044" origin="Microsoft">
    <description>Element type=simpleType A, block='#all', and instant XMLhas xsi:type=A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT044.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT044.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT045" origin="Microsoft">
    <description>Element type=simpleType A, block='#all', and instant XMLhas xsi:type=B (a different type)</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT045.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT045.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT046" origin="Microsoft">
    <description>Element type=simpleType A, block='#all', and instant XMLhas xsi:type=restriction of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT046.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT046.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT047" origin="Microsoft">
    <description>Element type=simpleType A, block='#all', and instant XMLhas xsi:type=base of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT047.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT047.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT048" origin="Microsoft">
    <description>Element type=simpleType A, block='#all', and instant XMLhas xsi:type=Union of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT048.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT048.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT049" origin="Microsoft">
    <description>Element type=simpleType A, block='#all', and instant XMLhas xsi:type=Union of A and B</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT049.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT049.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT050" origin="Microsoft">
    <description>Element type=simpleType A, block='#all', and instant XMLhas xsi:type=list of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT050.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT050.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT051" origin="Microsoft">
    <description>Element type=simpleType A, block='#all', and instant XMLhas xsi:type=list of the Union A and B</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT051.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT051.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT052" origin="Microsoft">
    <description>Element type=complexType A, block='#all', and instant XMLhas xsi:type=restriction of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT052.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT052.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT053" origin="Microsoft">
    <description>Element type=complexType A, block='#all', and instant XMLhas xsi:type=extension of A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT053.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT053.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT054" origin="Microsoft">
    <description>Element type=ur-Type, block='#all', and instant XMLhas xsi:type=union of simpleType A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT054.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT054.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT055" origin="Microsoft">
    <description>Element type=ur-Type, block='#all', and instant XMLhas xsi:type=union of simpleType A and B</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT055.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT055.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT056" origin="Microsoft">
    <description>Element type=ur-Type, block='#all', and instant XMLhas xsi:type=List of simpleType A</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT056.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT056.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT057" origin="Microsoft">
    <description>Element type=ur-Type, block='#all', and instant XMLhas xsi:type=List of the Union of simpleType A and B</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT057.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT057.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemT058" origin="Microsoft">
    <description>several elements with different blocks and valid instance</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT058.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT058.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemT074" origin="Microsoft">
    <description>Element type=Union-AB, block=restriction, and instant XMLhas xsi:type=A type derived from a type in the Union</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemT074.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemT074.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemU001" origin="Microsoft">
    <description>regular expression: restriction on string '\d'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU002" origin="Microsoft">
    <description>regular expression: restriction on string '\s\d'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU003" origin="Microsoft">
    <description>regular expression: restriction on string '\s\w'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU004" origin="Microsoft">
    <description>regular expression: restriction on string 'Espan&amp;#xF1;ola'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU005" origin="Microsoft">
    <description>regular expression: restriction on string '\p{Lu}'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU006" origin="Microsoft">
    <description>regular expression: restriction on string '\p{IsGreek}'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU007" origin="Microsoft">
    <description>regular expression: restriction on string '\P{IsGreek}'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU008" origin="Microsoft">
    <description>regular expression: restriction on string 'a*x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU009" origin="Microsoft">
    <description>regular expression: restriction on string 'a?x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU010" origin="Microsoft">
    <description>regular expression: restriction on string 'a+x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU011" origin="Microsoft">
    <description>regular expression: restriction on string '(a|b)+x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU012" origin="Microsoft">
    <description>regular expression: restriction on string '[abcde]x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU013" origin="Microsoft">
    <description>regular expression: restriction on string '[a-e]x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU014" origin="Microsoft">
    <description>regular expression: restriction on string '[-ae]x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU015" origin="Microsoft">
    <description>regular expression: restriction on string '[ae-]x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU017" origin="Microsoft">
    <description>regular expression: restriction on string '[^0-9]x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU018" origin="Microsoft">
    <description>regular expression: restriction on string '\Dx'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU019" origin="Microsoft">
    <description>regular expression: restriction on string '.x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU020" origin="Microsoft">
    <description>regular expression: restriction on string '.*abc.*'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU021" origin="Microsoft">
    <description>regular expression: restriction on string 'ab{2}x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU022" origin="Microsoft">
    <description>regular expression: restriction on string 'ab{2,4}x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU023" origin="Microsoft">
    <description>regular expression: restriction on string 'ab{2,}x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU024" origin="Microsoft">
    <description>regular expression: restriction on string '(ab){2}x'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU024.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemU025" origin="Microsoft">
    <description>regular expression: restriction on string 'chapter \d'</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemU025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemU025.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemZ001" origin="Microsoft">
    <description>70881 - XmlSchema: instance element with xsi:nil='true' and xsi:type='xsd:string' causes Unknown error</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemZ001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemZ001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="elemZ002" origin="Microsoft">
    <description>67493 - xsd: xsi:type should allowed predefined types as valid valu.</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemZ002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemZ002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemZ003" origin="Microsoft">
    <description>72898 - subsitutionGroup has problems with deep chains</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemZ003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="element" fileName="elemZ003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="elemZ004" origin="Microsoft">
    <description>maxOccurs fails to take values more than int (2147483647)</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemZ004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="elemZ005" origin="Microsoft">
    <description>validation of number data types doesn't work for top-level element declarations</description>
    <files>
      <file tsDir="msxsdtest" folder="element" fileName="elemZ005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupA001" origin="Microsoft">
    <description>Test id: group with an id</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupA002" origin="Microsoft">
    <description>Test id: group without an id</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupA003" origin="Microsoft">
    <description>Test id: two global groups with same id</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupA004" origin="Microsoft">
    <description>Test id: two groups with same id, one from global, one inside a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupA005" origin="Microsoft">
    <description>Test id: two groups with same id, one from complexType, one inside choice</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupA006" origin="Microsoft">
    <description>Test id: two groups with same id, one from restriction and one from redefine</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupA007" origin="Microsoft">
    <description>Test id: two groups with same id, one from choice and one from imported</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupA008" origin="Microsoft">
    <description>Test id: two groups with same id, one from imported xsd and the other from included xsd</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupA009" origin="Microsoft">
    <description>Test id:, id=''</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupA010" origin="Microsoft">
    <description>Test id:, id='1'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupA011" origin="Microsoft">
    <description>Test id:, id='xmlns'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupA012" origin="Microsoft">
    <description>Test id:, id='a:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupA012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupB001" origin="Microsoft">
    <description>Test ref: (ref is not allowed on top level), parent is schema, ref='global group'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupB002v" origin="Microsoft">
    <description>Test ref:, parent is extension, ref='global group'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupB002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupB003v" origin="Microsoft">
    <description>Test ref:, parent is restriction, ref='global group'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupB003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupB004v" origin="Microsoft">
    <description>Test ref:, parent is sequence, ref='global group'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupB004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupB005v" origin="Microsoft">
    <description>Test ref:, parent is choice, ref='global group'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupB005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupB006v" origin="Microsoft">
    <description>Test ref:, parent is complexType, ref='global group'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupB006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupB007" origin="Microsoft">
    <description>Test ref: (ref is not allowed on top level), parent is redefine, ref='global group'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupB008" origin="Microsoft">
    <description>Test ref:, parent is extension, ref='global attributeGroup'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupB009v" origin="Microsoft">
    <description>Test ref:, parent is extension, ref='global group from imported xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupB009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupB010v" origin="Microsoft">
    <description>Test ref:, parent is extension, ref='global group from included xsd'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupB010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupB011" origin="Microsoft">
    <description>Test ref:, parent is extension, ref='global complexType'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupB012" origin="Microsoft">
    <description>Test ref: circular ref is not allowed out side of redefine, parent is sequence, ref='the root parent group's name'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupB013" origin="Microsoft">
    <description>Test ref: circular ref is not allowed out side of redefine, parent is choice, ref='the root parent group's name'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupB014" origin="Microsoft">
    <description>Test ref: circular ref is not allowed out side of redefine, parent is extension, ref='the root parent group's name'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupB015" origin="Microsoft">
    <description>Test ref: circular ref is not allowed out side of redefine, parent is restriction, ref='the root parent group's name'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupB016" origin="Microsoft">
    <description>Test ref: circular ref is not allowed out side of redefine, parent is restriction, reference a global group 'A', which has a choice that reference another globle group 'B', which as a sequence that reference 'A'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupB017" origin="Microsoft">
    <description>Test ref: reference a global group to restrict another complex type (a,b) to (a), parent is restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupB017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupC001" origin="Microsoft">
    <description>Test name: two global groups with same name</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupC002" origin="Microsoft">
    <description>Test name: group without an name</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupC003" origin="Microsoft">
    <description>Test name: two groups with same name, one from global one from redefine</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupC004" origin="Microsoft">
    <description>Test name: name attribute is only allowed in toplevel, parent is extension</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupC005" origin="Microsoft">
    <description>Test name: name attribute is only allowed in toplevel, parent is restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupC006" origin="Microsoft">
    <description>Test name: name attribute is only allowed in toplevel, parent is sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupC007" origin="Microsoft">
    <description>Test name: name attribute is only allowed in toplevel, parent is choice</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupC008" origin="Microsoft">
    <description>Test name: name attribute is only allowed in toplevel, parent is complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupC009" origin="Microsoft">
    <description>Test name:, name=''</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupC010" origin="Microsoft">
    <description>Test name:, name='1'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupC011" origin="Microsoft">
    <description>Test name:, name='xmlns'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupC012" origin="Microsoft">
    <description>Test name:, name='a:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupC012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupD001" origin="Microsoft">
    <description>Test particles: parent is schema can't have minOccurs, minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupD001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupD002" origin="Microsoft">
    <description>Test particles: parent is redefine can't have minOccurs, minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupD002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupD003" origin="Microsoft">
    <description>Test particles: parent is schema can't have maxOccurs, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupD003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupD004" origin="Microsoft">
    <description>Test particles: parent is redefine can't have maxOccurs, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupD004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupE001" origin="Microsoft">
    <description>parent is extension: check that minOccurs default is 1, minOccurs=absent, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupE001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupE002" origin="Microsoft">
    <description>parent is extension: check that maxOccurs default is 1, minOccurs=2, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupE002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupE003v" origin="Microsoft">
    <description>parent is extension: check that minOccurs default is 1, elements in instant XML = 0, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupE003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupE003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupE004v" origin="Microsoft">
    <description>parent is extension: check that minOccurs default is 1, elements in instant XML = 1, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupE004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupE004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupE005v" origin="Microsoft">
    <description>parent is extension: check that maxOccurs default is 1, elements in instant XML = 2, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupE005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupE005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupF001v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=0, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF002v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=1, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF003v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=2, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupF004v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=0, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF005v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=1, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF006v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=2, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupF007v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=0, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF008v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=1, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupF009v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=0, minOccurs=0, maxOccurs=999999999999999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF010v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=0, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupF011v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=1, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF012v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=2, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupF013v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=0, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupF014v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=1, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF015v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=2, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupF016v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=0, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF016.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupF017v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=1, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF018v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=2, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF019v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=3, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupF020" origin="Microsoft">
    <description>parent is extension: unbounded is not allowed as minOccurs, minOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupF021v" origin="Microsoft">
    <description>parent is extension: elements in instant XML=3, maxOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupF021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupF022" origin="Microsoft">
    <description>parent is extension: minOccurs=2, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupF023" origin="Microsoft">
    <description>parent is extension: minOccurs=1, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupF024" origin="Microsoft">
    <description>parent is extension: minOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupF025" origin="Microsoft">
    <description>parent is extension: maxOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupF025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupG001" origin="Microsoft">
    <description>parent is restriction: check that minOccurs default is 1, minOccurs=absent, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupG001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupG002" origin="Microsoft">
    <description>parent is restriction: check that maxOccurs default is 1, minOccurs=2, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupG002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupG003v" origin="Microsoft">
    <description>parent is restriction: check that minOccurs default is 1, elements in instant XML = 0, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupG003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupG003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupG004v" origin="Microsoft">
    <description>parent is restriction: check that minOccurs default is 1, elements in instant XML = 1, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupG004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupG004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupG005v" origin="Microsoft">
    <description>parent is restriction: check that maxOccurs default is 1, elements in instant XML = 2, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupG005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupG005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupH001v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=0, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH002v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=1, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH003v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=2, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupH004v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=0, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH005v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=1, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH006v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=2, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupH007v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=0, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH008v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=1, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupH009v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=0, minOccurs=0, maxOccurs=999999999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH010v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=0, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupH011v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=1, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH012v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=2, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupH013v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=0, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupH014v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=1, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH015v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=2, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupH016v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=0, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH016.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupH017v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=1, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH018v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=2, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH019v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=3, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupH020" origin="Microsoft">
    <description>parent is restriction: unbounded is not allowed as minOccurs, minOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupH021v" origin="Microsoft">
    <description>parent is restriction: elements in instant XML=3, maxOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupH021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupH022" origin="Microsoft">
    <description>parent is restriction: minOccurs=2, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupH023" origin="Microsoft">
    <description>parent is restriction: minOccurs=1, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupH024" origin="Microsoft">
    <description>parent is restriction: minOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupH025" origin="Microsoft">
    <description>parent is restriction: maxOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupH025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupI001" origin="Microsoft">
    <description>parent is sequence: check that minOccurs default is 1, minOccurs=absent, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupI001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupI002" origin="Microsoft">
    <description>parent is sequence: check that maxOccurs default is 1, minOccurs=2, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupI002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupI003v" origin="Microsoft">
    <description>parent is sequence: check that minOccurs default is 1, elements in instant XML = 0, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupI003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupI003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupI004v" origin="Microsoft">
    <description>parent is sequence: check that minOccurs default is 1, elements in instant XML = 1, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupI004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupI004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupI005v" origin="Microsoft">
    <description>parent is sequence: check that maxOccurs default is 1, elements in instant XML = 2, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupI005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupI005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupJ001v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=0, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ002v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=1, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ003v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=2, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupJ004v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=0, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ005v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=1, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ006v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=2, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupJ007v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=0, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ008v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=1, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupJ009v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=0, minOccurs=0, maxOccurs=99999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ010v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=0, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupJ011v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=1, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ012v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=2, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupJ013v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=0, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupJ014v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=1, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ015v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=2, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupJ016v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=0, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ016.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupJ017v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=1, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ018v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=2, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ019v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=3, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupJ020" origin="Microsoft">
    <description>parent is sequence: unbounded is not allowed as minOccurs, minOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupJ021v" origin="Microsoft">
    <description>parent is sequence: elements in instant XML=3, maxOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupJ022" origin="Microsoft">
    <description>parent is sequence: minOccurs=2, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupJ023" origin="Microsoft">
    <description>parent is sequence: minOccurs=1, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupJ024" origin="Microsoft">
    <description>parent is sequence: minOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupJ025" origin="Microsoft">
    <description>parent is sequence: maxOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupJ025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupK001" origin="Microsoft">
    <description>parent is choice: check that minOccurs default is 1, minOccurs=absent, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupK001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupK002" origin="Microsoft">
    <description>parent is choice: check that maxOccurs default is 1, minOccurs=2, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupK002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupK003v" origin="Microsoft">
    <description>parent is choice: check that minOccurs default is 1, elements in instant XML = 0, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupK003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupK003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupK004v" origin="Microsoft">
    <description>parent is choice: check that minOccurs default is 1, elements in instant XML = 1, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupK004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupK004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupK005v" origin="Microsoft">
    <description>parent is choice: check that maxOccurs default is 1, elements in instant XML = 2, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupK005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupK005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupL001v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=0, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL002v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=1, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL003v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=2, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupL004v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=0, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL005v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=1, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL006v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=2, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupL007" origin="Microsoft">
    <description>parent is choice: elements in instant XML=0, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL008v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=1, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupL009v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=0, minOccurs=0, maxOccurs=999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL010v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=0, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupL011v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=1, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL012v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=2, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupL013v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=0, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupL014v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=1, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL015v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=2, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupL016v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=0, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL016.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupL017v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=1, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL018v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=2, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL019v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=3, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupL020" origin="Microsoft">
    <description>parent is choice: unbounded is not allowed as minOccurs, minOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupL021v" origin="Microsoft">
    <description>parent is choice: elements in instant XML=3, maxOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupL021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupL022" origin="Microsoft">
    <description>parent is choice: minOccurs=2, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupL023" origin="Microsoft">
    <description>parent is choice: minOccurs=1, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupL024" origin="Microsoft">
    <description>parent is choice: minOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupL025" origin="Microsoft">
    <description>parent is choice: maxOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupL025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupM001" origin="Microsoft">
    <description>parent is complexType: check that minOccurs default is 1, minOccurs=absent, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupM001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupM002" origin="Microsoft">
    <description>parent is complexType: check that maxOccurs default is 1, minOccurs=2, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupM002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupM003v" origin="Microsoft">
    <description>parent is complexType: check that minOccurs default is 1, elements in instant XML = 0, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupM003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupM003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupM004v" origin="Microsoft">
    <description>parent is complexType: check that minOccurs default is 1, elements in instant XML = 1, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupM004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupM004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupM005v" origin="Microsoft">
    <description>parent is complexType: check that maxOccurs default is 1, elements in instant XML = 2, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupM005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupM005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupN001v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=0, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN002v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=1, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN003v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=2, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupN004v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=0, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN005v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=1, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN006v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=2, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupN007v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=0, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN008v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=1, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupN009v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=0, minOccurs=0, maxOccurs=999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN010v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=0, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupN011v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=1, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN012v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=2, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupN013v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=0, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupN014v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=1, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN015v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=2, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupN016v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=0, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN016.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupN017v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=1, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN018v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=2, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN019v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=3, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupN020" origin="Microsoft">
    <description>parent is complexType: unbounded is not allowed as minOccurs, minOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupN021v" origin="Microsoft">
    <description>parent is complexType: elements in instant XML=3, maxOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupN021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupN022" origin="Microsoft">
    <description>parent is complexType: minOccurs=2, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupN023" origin="Microsoft">
    <description>parent is complexType: minOccurs=1, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupN024" origin="Microsoft">
    <description>parent is complexType: minOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupN025" origin="Microsoft">
    <description>parent is complexType: maxOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupN025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO001" origin="Microsoft">
    <description>Test content: annotation, one annotation as child node</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupO002" origin="Microsoft">
    <description>Test content: annotation, two annotation as child nodes</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO003" origin="Microsoft">
    <description>Test content: annotation must be the first node if present, two children, sequence follow by annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO004v" origin="Microsoft">
    <description>Test content: annotation follow by all</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupO004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupO005v" origin="Microsoft">
    <description>Test content: (xml instant is invalid) annotation follow by all</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupO005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupO006v" origin="Microsoft">
    <description>Test content: annotation follow by choice</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupO006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupO007v" origin="Microsoft">
    <description>Test content: (xml instant is invalid) annotation follow by choice</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupO007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupO008v" origin="Microsoft">
    <description>Test content: annotation follow by sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupO008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="groupO009v" origin="Microsoft">
    <description>Test content: (xml instant is invalid) annotation follow by sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="group" fileName="groupO009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="groupO010" origin="Microsoft">
    <description>Test content: annotation follow by element</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO011" origin="Microsoft">
    <description>Test content: annotation follow by complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO012" origin="Microsoft">
    <description>Test content: annotation follow by simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO013" origin="Microsoft">
    <description>Test content: annotation follow by attribute decl</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO014" origin="Microsoft">
    <description>Test content: child node is a sequence with a child group, which has another sequence with a child group, which has another choice with a child group</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="groupO015" origin="Microsoft">
    <description>Test content: only one is allow (all | choice | sequence), all follow by choice</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO016" origin="Microsoft">
    <description>Test content: only one is allow (all | choice | sequence), all follow by sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO017" origin="Microsoft">
    <description>Test content: only one is allow (all | choice | sequence), choice follow by sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO018" origin="Microsoft">
    <description>Test content: only one is allow (all | choice | sequence), sequence follow by all</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO019" origin="Microsoft">
    <description>Test content: only one is allow (all | choice | sequence), choice follow by all</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO020" origin="Microsoft">
    <description>Test content: only one is allow (all | choice | sequence), all follow by all</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO021" origin="Microsoft">
    <description>Test content: only one is allow (all | choice | sequence), choice follow by choice</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO022" origin="Microsoft">
    <description>Test content: only one is allow (all | choice | sequence), sequence follow by sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO023" origin="Microsoft">
    <description>Test parent: parent is simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO024" origin="Microsoft">
    <description>Test parent: parent is element</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO025" origin="Microsoft">
    <description>Test parent: parent is attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO026" origin="Microsoft">
    <description>Test parent: parent is any</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="groupO027" origin="Microsoft">
    <description>Test parent: parent is group</description>
    <files>
      <file tsDir="msxsdtest" folder="group" fileName="groupO027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA001" origin="Microsoft">
    <description>unique Declaration with optional attribute id = 'foo123' , name attribute = 'idName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA002" origin="Microsoft">
    <description>unique Declaration with optional attribute id = 'foo123' , name attribute = 'idName' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA003" origin="Microsoft">
    <description>unique Declaration with optional attribute id = 'foo123' , name attribute = 'idName' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA004" origin="Microsoft">
    <description>unique Declaration with optional attribute id = 'foo123' , name attribute = 'idName' , an imported object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA005" origin="Microsoft">
    <description>unique Declaration with optional attribute id = 'foo123' , name attribute = 'idName' , a redefined object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA006" origin="Microsoft">
    <description>unique Declaration with optional attribute id = '' , name attribute = 'idName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA007" origin="Microsoft">
    <description>unique Declaration with optional attribute id = '123' , name attribute = 'idName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA008" origin="Microsoft">
    <description>unique Declaration with optional attribute id = 'foo123' , name attribute='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA009" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA010" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , attribute object with a name='fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA011" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , element object with a name='fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA012" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , simpleType object with a name='fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA013" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , complexType object with a name='fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA014" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , group object with a name='fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA015" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , notation object with a name='fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA015.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA016" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , another unique idConstraint object with a name='fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA017" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , another unique idConstraint object in a different targetNamespace with a name='fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA018" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , another key idConstraint object with a name='fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA019" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , another keyref idConstraint object with a name='fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA020" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , object is defined globally</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA021" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , object is a child of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA022" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , object is a child of element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA022.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA023" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , object is a child of complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA024" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , object is a child of attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA025" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , object is a child of group</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA026" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , object is a child of choice</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA027" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , object is a child of all</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA028" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , object is a child of sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA029" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'fooID' , object is a child of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA030" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = 'a:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA031" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA032" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = '1foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA032.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA033" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = '_foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA033.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA034" origin="Microsoft">
    <description>unique Declaration with mandatory attribute name = '_1'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA034.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA035" origin="Microsoft">
    <description>unique Declaration with id, name and refer attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA035.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA036" origin="Microsoft">
    <description>unique Declaration with attribute of non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA036.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA037" origin="Microsoft">
    <description>unique element, content of single annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA037.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA038" origin="Microsoft">
    <description>unique element, content with two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA039" origin="Microsoft">
    <description>unique element, content of selector</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA039.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA040" origin="Microsoft">
    <description>unique element, content of selector and field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA040.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA041" origin="Microsoft">
    <description>unique element, content of annotation then selector and then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA041.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA042" origin="Microsoft">
    <description>unique element, content of selector then annotation and then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA042.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA043" origin="Microsoft">
    <description>unique element, content of selector then field and then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA043.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA044" origin="Microsoft">
    <description>unique element, content of annotation then field and then selector</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA044.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA045" origin="Microsoft">
    <description>unique element, content of selector and then two fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA045.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idA046" origin="Microsoft">
    <description>unique element, content of two selectors and then a field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA046.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA047" origin="Microsoft">
    <description>unique element, content of field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA047.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA048" origin="Microsoft">
    <description>unique element, content of annotation then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA048.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA049" origin="Microsoft">
    <description>unique element, content of two fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA049.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA050" origin="Microsoft">
    <description>unique element, content of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA050.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA051" origin="Microsoft">
    <description>unique element, content of element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA051.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA052" origin="Microsoft">
    <description>unique element, content of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA052.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA053" origin="Microsoft">
    <description>unique element, content of complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA053.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA054" origin="Microsoft">
    <description>unique element, content of unique</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA054.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA055" origin="Microsoft">
    <description>unique element, content of key</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA055.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA056" origin="Microsoft">
    <description>unique element, content of keyref</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA056.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA057" origin="Microsoft">
    <description>unique element, content of all</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA057.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA058" origin="Microsoft">
    <description>unique element, content of choice</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA058.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA059" origin="Microsoft">
    <description>unique element, content of sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA059.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idA060" origin="Microsoft">
    <description>unique element, content of any</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idA060.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB001" origin="Microsoft">
    <description>key Declaration with optional attribute id = 'foo123' , name attribute = 'keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB002" origin="Microsoft">
    <description>key Declaration with optional attribute id = 'foo123' , name attribute = 'keyName' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB003" origin="Microsoft">
    <description>key Declaration with optional attribute id = 'foo123' , name attribute = 'keyName' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB004" origin="Microsoft">
    <description>key Declaration with optional attribute id = 'foo123' , name attribute = 'keyName' , an imported object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB005" origin="Microsoft">
    <description>key Declaration with optional attribute id = 'foo123' , name attribute = 'keyName' , a redefined object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB006" origin="Microsoft">
    <description>key Declaration with optional attribute id = '' , name attribute = 'keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB007" origin="Microsoft">
    <description>key Declaration with optional attribute id = '123' , name attribute = 'keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB008" origin="Microsoft">
    <description>key Declaration with optional attribute id = 'foo123' , name attribute='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB009" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB010" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , attribute object with a name='keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB011" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , element object with a name='keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB012" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , simpleType object with a name='keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB013" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , complexType object with a name='keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB014" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , group object with a name='keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB015" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , notation object with a name='keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB015.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB016" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , another unique idConstraint object with a name='keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB017" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , another key idConstraint object with a name='keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB018" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , another key idConstraint object in a different targetNamespace with a name='keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB018.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB019" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , another keyref idConstraint object with a name='keyName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB020" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , object is defined globally</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB021" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , object is a child of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB022" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , object is a child of element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB022.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB023" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , object is a child of complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB024" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , object is a child of attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB025" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , object is a child of group</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB026" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , object is a child of choice</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB027" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , object is a child of all</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB028" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , object is a child of sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB029" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'keyName' , object is a child of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB030" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = 'a:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB031" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB032" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = '1foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB032.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB033" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = '_foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB033.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB034" origin="Microsoft">
    <description>key Declaration with mandatory attribute name = '_1'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB034.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB035" origin="Microsoft">
    <description>key Declaration with id, name and refer attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB035.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB036" origin="Microsoft">
    <description>key Declaration with attribute of non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB036.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB037" origin="Microsoft">
    <description>key element, content of single annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB037.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB038" origin="Microsoft">
    <description>key element, content with two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB039" origin="Microsoft">
    <description>key element, content of selector</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB039.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB040" origin="Microsoft">
    <description>key element, content of selector and field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB040.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB041" origin="Microsoft">
    <description>key element, content of annotation then selector and then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB041.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB042" origin="Microsoft">
    <description>key element, content of selector then annotation and then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB042.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB043" origin="Microsoft">
    <description>key element, content of selector then field and then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB043.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB044" origin="Microsoft">
    <description>key element, content of annotation then field and then selector</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB044.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB045" origin="Microsoft">
    <description>key element, content of selector and then two fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB045.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idB046" origin="Microsoft">
    <description>key element, content of two selectors and then a field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB046.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB047" origin="Microsoft">
    <description>key element, content of field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB047.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB048" origin="Microsoft">
    <description>key element, content of annotation then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB048.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB049" origin="Microsoft">
    <description>key element, content of two fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB049.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB050" origin="Microsoft">
    <description>key element, content of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB050.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB051" origin="Microsoft">
    <description>key element, content of element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB051.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB052" origin="Microsoft">
    <description>key element, content of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB052.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB053" origin="Microsoft">
    <description>key element, content of complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB053.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB054" origin="Microsoft">
    <description>key element, content of unique</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB054.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB055" origin="Microsoft">
    <description>key element, content of key</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB055.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB056" origin="Microsoft">
    <description>key element, content of keyref</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB056.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB057" origin="Microsoft">
    <description>key element, content of all</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB057.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB058" origin="Microsoft">
    <description>key element, content of choice</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB058.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB059" origin="Microsoft">
    <description>key element, content of sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB059.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idB060" origin="Microsoft">
    <description>key element, content of any</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idB060.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC001" origin="Microsoft">
    <description>keyref Declaration with optional attribute id = 'foo123' , name attribute = 'keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC002" origin="Microsoft">
    <description>keyref Declaration with optional attribute id = 'foo123' , name attribute = 'keyrefName' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC003" origin="Microsoft">
    <description>keyref Declaration with optional attribute id = 'foo123' , name attribute = 'keyrefName' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC004" origin="Microsoft">
    <description>keyref Declaration with optional attribute id = 'foo123' , name attribute = 'keyrefName' , an imported object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC005" origin="Microsoft">
    <description>keyref Declaration with optional attribute id = 'foo123' , name attribute = 'keyrefName' , a redefined object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC006" origin="Microsoft">
    <description>keyref Declaration with optional attribute id = '' , name attribute = 'keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC007" origin="Microsoft">
    <description>keyref Declaration with optional attribute id = '123' , name attribute = 'keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC008" origin="Microsoft">
    <description>keyref Declaration with optional attribute id = 'foo123' , name attribute='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC009" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC010" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , attribute object with a name='keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC011" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , element object with a name='keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC012" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , simpleType object with a name='keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC013" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , complexType object with a name='keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC014" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , group object with a name='keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC015" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , notation object with a name='keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC015.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC016" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , another unique idConstraint object with a name='keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC017" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , another key idConstraint object with a name='keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC018" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , another keyref idConstraint object with a name='keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC019" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , another keyref idConstraint object in a different targetNamespace with a name='keyrefName'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC019.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC020" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , object is defined globally</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC021" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , object is a child of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC022" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , object is a child of element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC022.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC023" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , object is a child of complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC024" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , object is a child of attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC025" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , object is a child of group</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC026" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , object is a child of choice</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC027" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , object is a child of all</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC028" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , object is a child of sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC029" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'keyrefName' , object is a child of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC030" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = 'a:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC031" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC032" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = '1foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC032.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC033" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = '_foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC033.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC034" origin="Microsoft">
    <description>keyref Declaration with mandatory attribute name = '_1'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC034.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC035" origin="Microsoft">
    <description>keyref Declaration with id, name and refer (referenced key element exists in local namespace) attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC035.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC036" origin="Microsoft">
    <description>keyref Declaration with id, name and refer (referenced key element exists in target namespace) attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC036.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC038" origin="Microsoft">
    <description>keyref Declaration with id, name and refer (referenced key element does not exist) attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC039" origin="Microsoft">
    <description>keyref Declaration with attribute of non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC039.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC040" origin="Microsoft">
    <description>keyref element, content of single annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC040.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC041" origin="Microsoft">
    <description>keyref element, content with two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC041.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC042" origin="Microsoft">
    <description>keyref element, content of selector</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC042.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC043" origin="Microsoft">
    <description>keyref element, content of selector and field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC043.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC044" origin="Microsoft">
    <description>keyref element, content of annotation then selector and then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC044.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC045" origin="Microsoft">
    <description>keyref element, content of selector then annotation and then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC045.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC046" origin="Microsoft">
    <description>keyref element, content of selector then field and then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC046.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC047" origin="Microsoft">
    <description>keyref element, content of annotation then field and then selector</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC047.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC048" origin="Microsoft">
    <description>keyref element, content of selector and then two fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC048.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idC049" origin="Microsoft">
    <description>keyref element, content of two selectors and then a field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC049.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC050" origin="Microsoft">
    <description>keyref element, content of field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC050.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC051" origin="Microsoft">
    <description>keyref element, content of annotation then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC051.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC052" origin="Microsoft">
    <description>keyref element, content of two fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC052.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC053" origin="Microsoft">
    <description>keyref element, content of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC053.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC054" origin="Microsoft">
    <description>keyref element, content of element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC054.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC055" origin="Microsoft">
    <description>keyref element, content of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC055.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC056" origin="Microsoft">
    <description>keyref element, content of complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC056.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC057" origin="Microsoft">
    <description>keyref element, content of unique</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC057.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC058" origin="Microsoft">
    <description>keyref element, content of key</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC058.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC059" origin="Microsoft">
    <description>keyref element, content of keyref</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC059.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC060" origin="Microsoft">
    <description>keyref element, content of all</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC060.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC061" origin="Microsoft">
    <description>keyref element, content of choice</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC061.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC062" origin="Microsoft">
    <description>keyref element, content of sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC062.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idC063" origin="Microsoft">
    <description>keyref element, content of any</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idC063.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD001" origin="Microsoft">
    <description>selector Declaration with optional attribute id = 'foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idD002" origin="Microsoft">
    <description>selector Declaration with optional attribute id = 'foo123' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD003" origin="Microsoft">
    <description>selector Declaration with optional attribute id = 'foo123' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD004" origin="Microsoft">
    <description>selector Declaration with optional attribute id = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD005" origin="Microsoft">
    <description>selector Declaration with optional attribute id = '123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD006" origin="Microsoft">
    <description>selector Declaration with attribute name = 'fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD007" origin="Microsoft">
    <description>selector is defined globally</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD008" origin="Microsoft">
    <description>selector is a child of unique</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idD009" origin="Microsoft">
    <description>selector is a child of key</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idD010" origin="Microsoft">
    <description>selector is a child of keyref</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idD011" origin="Microsoft">
    <description>selector is a child of element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD012" origin="Microsoft">
    <description>selector Declaration with mandatory attribute xpath = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD013" origin="Microsoft">
    <description>selector Declaration with mandatory attribute xpath contains valid Xpath subset</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idD014" origin="Microsoft">
    <description>selector Declaration with mandatory attribute xpath contains invalid Xpath subset</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD015" origin="Microsoft">
    <description>selector Declaration with attribute of non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD015.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idD016" origin="Microsoft">
    <description>selector element, content of single annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD016.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idD017" origin="Microsoft">
    <description>selector element, content with two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD018" origin="Microsoft">
    <description>selector element, content of selector</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD019" origin="Microsoft">
    <description>selector element, content of selector and field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD020" origin="Microsoft">
    <description>selector element, content of field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD021" origin="Microsoft">
    <description>selector element, content of annotation then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD022" origin="Microsoft">
    <description>selector element, content of two fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD023" origin="Microsoft">
    <description>selector element, content of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD024" origin="Microsoft">
    <description>selector element, content of element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD025" origin="Microsoft">
    <description>selector element, content of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD026" origin="Microsoft">
    <description>selector element, content of complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD027" origin="Microsoft">
    <description>selector element, content of unique</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD028" origin="Microsoft">
    <description>selector element, content of key</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD029" origin="Microsoft">
    <description>selector element, content of keyref</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD030" origin="Microsoft">
    <description>selector element, content of all</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD031" origin="Microsoft">
    <description>selector element, content of choice</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD032" origin="Microsoft">
    <description>selector element, content of sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD032.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idD033" origin="Microsoft">
    <description>selector element, content of any</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idD033.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE001" origin="Microsoft">
    <description>field Declaration with optional attribute id = 'foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idE002" origin="Microsoft">
    <description>field Declaration with optional attribute id = 'foo123' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE003" origin="Microsoft">
    <description>field Declaration with optional attribute id = 'foo123' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE004" origin="Microsoft">
    <description>field Declaration with optional attribute id = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE005" origin="Microsoft">
    <description>field Declaration with optional attribute id = '123'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE006" origin="Microsoft">
    <description>field Declaration with attribute name = 'fooID'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE007" origin="Microsoft">
    <description>field is defined globally</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE008" origin="Microsoft">
    <description>field is a child of unique</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idE009" origin="Microsoft">
    <description>field is a child of key</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idE010" origin="Microsoft">
    <description>field is a child of keyref</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idE011" origin="Microsoft">
    <description>field is a child of element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE012" origin="Microsoft">
    <description>field Declaration with mandatory attribute xpath = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE013" origin="Microsoft">
    <description>field Declaration with mandatory attribute xpath contains valid Xpath subset</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idE014" origin="Microsoft">
    <description>field Declaration with mandatory attribute xpath contains invalid Xpath subset</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE015" origin="Microsoft">
    <description>field Declaration with attribute of non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE015.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idE016" origin="Microsoft">
    <description>field element, content of single annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE016.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idE017" origin="Microsoft">
    <description>field element, content with two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE018" origin="Microsoft">
    <description>field element, content of selector</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE019" origin="Microsoft">
    <description>field element, content of selector and field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE020" origin="Microsoft">
    <description>field element, content of field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE021" origin="Microsoft">
    <description>field element, content of annotation then field</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE022" origin="Microsoft">
    <description>field element, content of two fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE023" origin="Microsoft">
    <description>field element, content of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE024" origin="Microsoft">
    <description>field element, content of element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE025" origin="Microsoft">
    <description>field element, content of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE026" origin="Microsoft">
    <description>field element, content of complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE027" origin="Microsoft">
    <description>field element, content of unique</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE028" origin="Microsoft">
    <description>field element, content of key</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE029" origin="Microsoft">
    <description>field element, content of keyref</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE030" origin="Microsoft">
    <description>field element, content of all</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE031" origin="Microsoft">
    <description>field element, content of choice</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE032" origin="Microsoft">
    <description>field element, content of sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE032.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idE033" origin="Microsoft">
    <description>field element, content of any</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idE033.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idF001" origin="Microsoft">
    <description>unique category, selector element evaluates to a node-set</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF003" origin="Microsoft">
    <description>unique category, field element evaluates to an empty-node set</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF004" origin="Microsoft">
    <description>unique category, field element evaluates to a node-set with only one member</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF005" origin="Microsoft">
    <description>unique category, field element evaluates to a node-set with more than one member</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idF006" origin="Microsoft">
    <description>unique category, field element evaluates to a node-set with a member that is not a simple type</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idF007" origin="Microsoft">
    <description>unique category, all qualified node set members are unique</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF008" origin="Microsoft">
    <description>unique category, not all qualified node set members are unique</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idF009" origin="Microsoft">
    <description>unique category, qualified node set contains members with an element declaration whose {nillable} is true.</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF010" origin="Microsoft">
    <description>unique category, instance member (a)=3.0, number; instance member (b)=3, number</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idF011" origin="Microsoft">
    <description>unique category, instance member (a)=3.0, string; instance member (b)=3, string</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF012" origin="Microsoft">
    <description>unique category, instance member (a)=1, boolean; instance member (b)=1, number</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF013" origin="Microsoft">
    <description>unique category, instance member (a)=1, float; instance member (b)=1, decimal</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF014" origin="Microsoft">
    <description>unique category, instance member (a)=1, float; instance member (b)=1, unsignedByte</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF015" origin="Microsoft">
    <description>unique category, instance member (a)=1, decimal; instance member (b)=1, unsignedByte</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idF016" origin="Microsoft">
    <description>unique category, instance member (a)=test, string; instance member (b)='', string defined using default='test'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF016.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idF017" origin="Microsoft">
    <description>unique category, instance member (a)=test, string; instance member (b)='', string defined using fixed='test'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF017.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idF018" origin="Microsoft">
    <description>unique category, instance member (a)=nil, string; instance member (b)=nil</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF018.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idF019" origin="Microsoft">
    <description>unique category, qualified node set defined with the use of multiple field schema elements pointing to only elements</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF020" origin="Microsoft">
    <description>unique category, qualified node set defined with the use of multiple field schema elements pointing to only attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF021" origin="Microsoft">
    <description>unique category, qualified node set defined with the use of multiple field schema elements pointing to a mix of elements and attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF022" origin="Microsoft">
    <description>unique category, selector points to element within targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF023" origin="Microsoft">
    <description>unique category, selector points to element outside of targetNamespace in a non-imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF024" origin="Microsoft">
    <description>unique category, selector points to element from imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF024.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF025" origin="Microsoft">
    <description>unique category, selector points to element from redefined schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF025.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF026" origin="Microsoft">
    <description>unique category, selector points to element redefined by use of substitutionGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF027" origin="Microsoft">
    <description>unique category, field points to element within targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF028" origin="Microsoft">
    <description>unique category, field points to element outside targetNamespace in non-imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF028.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF029" origin="Microsoft">
    <description>unique category, field points to element from imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF030" origin="Microsoft">
    <description>unique category, field points to element from redefined schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF031" origin="Microsoft">
    <description>unique category, field points to element redefined by use of substitutionGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF032" origin="Microsoft">
    <description>unique category, field points to attribute within targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF033" origin="Microsoft">
    <description>unique category, field points to attribute from imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF034" origin="Microsoft">
    <description>unique category, field points to attribute from redefined schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF035" origin="Microsoft">
    <description>unique category, field points to attribute outside targetNamespace in non-imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF035.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idF036" origin="Microsoft">
    <description>unique category, field points to attribute used only within xsi:type substitution</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF036.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idF036.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG001" origin="Microsoft">
    <description>key category, selector element evaluates to a node-set</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG003" origin="Microsoft">
    <description>key category, field element evaluates to an empty-node set</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idG004" origin="Microsoft">
    <description>key category, field element evaluates to a node-set with only one member</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG005" origin="Microsoft">
    <description>key category, field element evaluates to a node-set with more than one member</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idG006" origin="Microsoft">
    <description>key category, field element evaluates to a node-set with a member that is not a simple type</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idG007" origin="Microsoft">
    <description>key category, all target node set members exist in qualified node set</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG008" origin="Microsoft">
    <description>key category, some target node set members do not exist in qualified node set</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idG009" origin="Microsoft">
    <description>key category, qualified node set contains members with an element declaration whose {nillable} is true.</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idG010" origin="Microsoft">
    <description>key category, qualified node set contains members are that are not unique.</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idG011" origin="Microsoft">
    <description>key category, instance member (a)=test, string; instance member (b)='', string defined using default='test'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idG012" origin="Microsoft">
    <description>key category, instance member (a)=test, string; instance member (b)='', string defined using fixed='test'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idG013" origin="Microsoft">
    <description>key category, qualified node set defined with the use of multiple field schema elements pointing to only elements</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG014" origin="Microsoft">
    <description>key category, qualified node set defined with the use of multiple field schema elements pointing to only attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG015" origin="Microsoft">
    <description>key category, qualified node set defined with the use of multiple field schema elements pointing to a mix of elements and attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG016" origin="Microsoft">
    <description>key category, selector points to element within targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG017" origin="Microsoft">
    <description>key category, selector points to element outside of targetNamespace in a non-imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG018" origin="Microsoft">
    <description>key category, selector points to element from imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG019" origin="Microsoft">
    <description>key category, selector points to element from redefined schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG020" origin="Microsoft">
    <description>key category, selector points to element redefined by use of substitutionGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG020.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idG021" origin="Microsoft">
    <description>key category, field points to element within targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG022" origin="Microsoft">
    <description>key category, field points to element outside targetNamespace in non-imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG023" origin="Microsoft">
    <description>key category, field points to element from imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG024" origin="Microsoft">
    <description>key category, field points to element from redefined schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG024.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG025" origin="Microsoft">
    <description>key category, field points to element redefined by use of substitutionGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG025.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idG026" origin="Microsoft">
    <description>key category, field points to attribute within targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG027" origin="Microsoft">
    <description>key category, field points to attribute from imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG028" origin="Microsoft">
    <description>key category, field points to attribute from redefined schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG028.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG029" origin="Microsoft">
    <description>key category, field points to attribute outside targetNamespace in non-imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idG030" origin="Microsoft">
    <description>key category, field points to attribute used only within xsi:type substitution</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idG030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH001" origin="Microsoft">
    <description>keyref category, selector element evaluates to a node-set</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH003" origin="Microsoft">
    <description>keyref category, field element evaluates to an empty-node set</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH004" origin="Microsoft">
    <description>keyref category, field element evaluates to a node-set with only one member</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH005" origin="Microsoft">
    <description>keyref category, field element evaluates to a node-set with more than one member</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idH006" origin="Microsoft">
    <description>keyref category, field element evaluates to a node-set with a member that is not a simple type</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idH007" origin="Microsoft">
    <description>keyref category, keyref refers to existing key element defined prior to keyref</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH008" origin="Microsoft">
    <description>keyref category, keyref refers to existing key element defined post to keyref</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH009" origin="Microsoft">
    <description>keyref category, keyref refers to unique element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH010" origin="Microsoft">
    <description>keyref category, keyref refers to unique element whose value is nil</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idH011" origin="Microsoft">
    <description>keyref category, keyref refers to a non-existing key element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idH012" origin="Microsoft">
    <description>keyref category, keyref fields are defined in a different order than referred key fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idH013" origin="Microsoft">
    <description>keyref category, keyref has more field definitions than are defined in referred key fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idH014" origin="Microsoft">
    <description>keyref category, keyref has less field definitions than are defined in referred key fields</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idH015" origin="Microsoft">
    <description>keyref category, instance member (a)=test, string; instance member (b)='', string defined using default='test'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH016" origin="Microsoft">
    <description>keyref category, instance member (a)=test, string; instance member (b)='', string defined using fixed='test'</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH017" origin="Microsoft">
    <description>keyref category, qualified node set defined with the use of multiple field schema elements pointing to only elements</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH018" origin="Microsoft">
    <description>keyref category, qualified node set defined with the use of multiple field schema elements pointing to only attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH019" origin="Microsoft">
    <description>keyref category, qualified node set defined with the use of multiple field schema elements pointing to a mix of elements and attributes</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH020" origin="Microsoft">
    <description>keyref category, selector points to element within targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH021" origin="Microsoft">
    <description>keyref category, selector points to element outside of targetNamespace in a non-imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH022" origin="Microsoft">
    <description>keyref category, selector points to element from imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH023" origin="Microsoft">
    <description>keyref category, selector points to element from redefined schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH024" origin="Microsoft">
    <description>keyref category, selector points to element redefined by use of substitutionGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH024.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH025" origin="Microsoft">
    <description>keyref category, field points to element within targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH025.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH026" origin="Microsoft">
    <description>keyref category, field points to element outside targetNamespace in non-imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH027" origin="Microsoft">
    <description>keyref category, field points to element from imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH028" origin="Microsoft">
    <description>keyref category, field points to element from redefined schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH028.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH029" origin="Microsoft">
    <description>keyref category, field points to element redefined by use of substitutionGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH030" origin="Microsoft">
    <description>keyref category, field points to attribute within targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH031" origin="Microsoft">
    <description>keyref category, field points to attribute from imported schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH032" origin="Microsoft">
    <description>keyref category, field points to attribute from redefined schema</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH034" origin="Microsoft">
    <description>keyref category, field points to attribute used only within xsi:type substitution</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idH035" origin="Microsoft">
    <description>keyref category, keyref refering to a keyref object instead of unique or key</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idH035.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI001" origin="Microsoft">
    <description>selector xpath='' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI002" origin="Microsoft">
    <description>selector xpath='.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI003" origin="Microsoft">
    <description>selector xpath='/' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI004" origin="Microsoft">
    <description>selector xpath='//' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI005" origin="Microsoft">
    <description>selector xpath='|' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI006" origin="Microsoft">
    <description>selector xpath='child::' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI007" origin="Microsoft">
    <description>selector xpath='| qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI008" origin="Microsoft">
    <description>selector xpath='qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI009" origin="Microsoft">
    <description>selector xpath='child::qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI010" origin="Microsoft">
    <description>selector xpath='qname' , field contains * . Prefix is undefined</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI011" origin="Microsoft">
    <description>selector xpath='*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI012" origin="Microsoft">
    <description>selector xpath='ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI013" origin="Microsoft">
    <description>selector xpath='child::ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI014" origin="Microsoft">
    <description>selector xpath='ncname :*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI015" origin="Microsoft">
    <description>selector xpath='ncname: *' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI016" origin="Microsoft">
    <description>selector xpath='ncname : *' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI017" origin="Microsoft">
    <description>selector xpath=' ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI018" origin="Microsoft">
    <description>selector xpath='.//' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI019" origin="Microsoft">
    <description>selector xpath='.//.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI019.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI020" origin="Microsoft">
    <description>selector xpath='.// .' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI020.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI021" origin="Microsoft">
    <description>selector xpath='. //.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI021.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI022" origin="Microsoft">
    <description>selector xpath='./ /.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI023" origin="Microsoft">
    <description>selector xpath='child: :qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI024" origin="Microsoft">
    <description>selector xpath='child ::qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI024.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI025" origin="Microsoft">
    <description>selector xpath='child:: qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI025.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI026" origin="Microsoft">
    <description>selector xpath=' .//.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI026.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI027" origin="Microsoft">
    <description>selector xpath='.//qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI027.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI028" origin="Microsoft">
    <description>selector xpath='.//.//qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI029" origin="Microsoft">
    <description>selector xpath='.//*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI029.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI030" origin="Microsoft">
    <description>selector xpath='.//ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI030.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI031" origin="Microsoft">
    <description>selector xpath='./ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI031.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI032" origin="Microsoft">
    <description>selector xpath='.//./.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI032.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI033" origin="Microsoft">
    <description>selector xpath='.//./qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI033.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI034" origin="Microsoft">
    <description>selector xpath='.//./*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI034.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI035" origin="Microsoft">
    <description>selector xpath='.//./ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI035.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI036" origin="Microsoft">
    <description>selector xpath='.//qname/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI036.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI037" origin="Microsoft">
    <description>selector xpath='.//qname1/qname2' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI037.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI038" origin="Microsoft">
    <description>selector xpath='.//qname1/.//qname2' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI039" origin="Microsoft">
    <description>selector xpath='.//qname/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI039.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI040" origin="Microsoft">
    <description>selector xpath='.//qname/ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI040.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI041" origin="Microsoft">
    <description>selector xpath='.//*/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI041.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI042" origin="Microsoft">
    <description>selector xpath='.//*/qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI042.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI043" origin="Microsoft">
    <description>selector xpath='.//*/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI043.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI044" origin="Microsoft">
    <description>selector xpath='.//*/ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI044.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI045" origin="Microsoft">
    <description>selector xpath='.//ncname:*/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI045.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI046" origin="Microsoft">
    <description>selector xpath='.//ncname:*/qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI046.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI047" origin="Microsoft">
    <description>selector xpath='.//ncname:*/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI047.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI048" origin="Microsoft">
    <description>selector xpath='.//ncname1:*/ncname2:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI048.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI049" origin="Microsoft">
    <description>selector xpath='. | .' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI049.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI050" origin="Microsoft">
    <description>selector xpath='. | qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI050.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI051" origin="Microsoft">
    <description>selector xpath='. | *' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI051.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI052" origin="Microsoft">
    <description>selector xpath='. | ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI052.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI053" origin="Microsoft">
    <description>selector xpath='. | .//.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI053.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI054" origin="Microsoft">
    <description>selector xpath='. | .//qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI054.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI055" origin="Microsoft">
    <description>selector xpath='. | .//*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI055.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI056" origin="Microsoft">
    <description>selector xpath='. | .//ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI056.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI057" origin="Microsoft">
    <description>selector xpath='. | .//./.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI057.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI058" origin="Microsoft">
    <description>selector xpath='. | .//./qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI058.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI059" origin="Microsoft">
    <description>selector xpath='. | .//./*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI059.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI060" origin="Microsoft">
    <description>selector xpath='. | .//./ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI060.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI061" origin="Microsoft">
    <description>selector xpath='. | .//qname/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI061.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI062" origin="Microsoft">
    <description>selector xpath='. | .//qname1/qname2' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI062.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI063" origin="Microsoft">
    <description>selector xpath='. | .//qname/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI063.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI064" origin="Microsoft">
    <description>selector xpath='. | .//qname/ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI064.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI065" origin="Microsoft">
    <description>selector xpath='. | .//*/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI065.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI066" origin="Microsoft">
    <description>selector xpath='. | .//*/qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI066.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI067" origin="Microsoft">
    <description>selector xpath='. | .//*/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI067.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI068" origin="Microsoft">
    <description>selector xpath='. | .//*/ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI068.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI069" origin="Microsoft">
    <description>selector xpath='. | .//ncname:*/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI069.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI070" origin="Microsoft">
    <description>selector xpath='. | .//ncname:*/qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI070.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI071" origin="Microsoft">
    <description>selector xpath='. | .//ncname:*/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI071.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI072" origin="Microsoft">
    <description>selector xpath='. | .//ncname1:*/ncname2:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI072.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI073" origin="Microsoft">
    <description>selector xpath='qname1 | .' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI073.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI074" origin="Microsoft">
    <description>selector xpath='qname1 | qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI074.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI075" origin="Microsoft">
    <description>selector xpath='qname1 | *' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI075.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI076" origin="Microsoft">
    <description>selector xpath='qname1 | ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI076.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI077" origin="Microsoft">
    <description>selector xpath='qname1 | .//.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI077.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI078" origin="Microsoft">
    <description>selector xpath='qname1 | .//qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI078.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI079" origin="Microsoft">
    <description>selector xpath='qname1 | .//*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI079.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI080" origin="Microsoft">
    <description>selector xpath='qname1 | .//ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI080.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI081" origin="Microsoft">
    <description>selector xpath='qname1 | .//./.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI081.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI082" origin="Microsoft">
    <description>selector xpath='qname1 | .//./qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI082.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI083" origin="Microsoft">
    <description>selector xpath='qname1 | .//./*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI083.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI084" origin="Microsoft">
    <description>selector xpath='qname1 | .//./ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI084.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI085" origin="Microsoft">
    <description>selector xpath='qname1 | .//qname/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI085.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI086" origin="Microsoft">
    <description>selector xpath='qname1 | .//qname1/qname2' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI086.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI087" origin="Microsoft">
    <description>selector xpath='qname1 | .//qname/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI087.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI088" origin="Microsoft">
    <description>selector xpath='qname1 | .//qname/ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI088.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI089" origin="Microsoft">
    <description>selector xpath='qname1 | .//*/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI089.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI090" origin="Microsoft">
    <description>selector xpath='qname1 | .//*/qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI090.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI091" origin="Microsoft">
    <description>selector xpath='qname1 | .//*/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI091.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI092" origin="Microsoft">
    <description>selector xpath='qname1 | .//*/ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI092.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI093" origin="Microsoft">
    <description>selector xpath='qname1 | .//ncname:*/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI093.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI094" origin="Microsoft">
    <description>selector xpath='qname1 | .//ncname:*/qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI094.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI095" origin="Microsoft">
    <description>selector xpath='qname1 | .//ncname:*/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI095.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI096" origin="Microsoft">
    <description>selector xpath='qname1 | .//ncname1:*/ncname2:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI096.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI097" origin="Microsoft">
    <description>selector xpath='* | .' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI097.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI098" origin="Microsoft">
    <description>selector xpath='* | qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI098.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI099" origin="Microsoft">
    <description>selector xpath='* | *' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI099.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI100" origin="Microsoft">
    <description>selector xpath='* | ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI100.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI101" origin="Microsoft">
    <description>selector xpath='* | .//.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI101.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI102" origin="Microsoft">
    <description>selector xpath='* | .//qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI102.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI103" origin="Microsoft">
    <description>selector xpath='* | .//*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI103.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI104" origin="Microsoft">
    <description>selector xpath='* | .//ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI104.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI105" origin="Microsoft">
    <description>selector xpath='* | .//./.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI105.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI106" origin="Microsoft">
    <description>selector xpath='* | .//./qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI106.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI107" origin="Microsoft">
    <description>selector xpath='* | .//./*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI107.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI108" origin="Microsoft">
    <description>selector xpath='* | .//./ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI108.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI109" origin="Microsoft">
    <description>selector xpath='* | .//qname/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI109.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI110" origin="Microsoft">
    <description>selector xpath='* | .//qname1/qname2' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI110.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI111" origin="Microsoft">
    <description>selector xpath='* | .//qname/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI111.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI112" origin="Microsoft">
    <description>selector xpath='* | .//qname/ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI112.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI113" origin="Microsoft">
    <description>selector xpath='* | .//*/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI113.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI114" origin="Microsoft">
    <description>selector xpath='* | .//*/qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI114.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI115" origin="Microsoft">
    <description>selector xpath='* | .//*/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI115.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI116" origin="Microsoft">
    <description>selector xpath='* | .//*/ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI116.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI117" origin="Microsoft">
    <description>selector xpath='* | .//ncname:*/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI117.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI118" origin="Microsoft">
    <description>selector xpath='* | .//ncname:*/qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI118.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI119" origin="Microsoft">
    <description>selector xpath='* | .//ncname:*/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI119.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI120" origin="Microsoft">
    <description>selector xpath='* | .//ncname1:*/ncname2:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI120.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI121" origin="Microsoft">
    <description>selector xpath='ncname1:* | .' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI121.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI122" origin="Microsoft">
    <description>selector xpath='ncname1:* | qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI122.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI123" origin="Microsoft">
    <description>selector xpath='ncname1:* | *' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI123.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI124" origin="Microsoft">
    <description>selector xpath='ncname1:* | ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI124.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI125" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI125.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI126" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI126.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI127" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI127.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI128" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI128.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI129" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//./.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI129.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI130" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//./qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI130.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI131" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//./*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI131.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI132" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//./ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI132.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI133" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//qname/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI133.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI134" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//qname1/qname2' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI134.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI135" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//qname/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI135.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI136" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//qname/ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI136.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI137" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//*/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI137.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI138" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//*/qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI138.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI139" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//*/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI139.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI140" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//*/ncname:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI140.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI141" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//ncname:*/.' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI141.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI142" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//ncname:*/qname' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI142.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI143" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//ncname:*/*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI143.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI144" origin="Microsoft">
    <description>selector xpath='ncname1:* | .//ncname1:*/ncname2:*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI144.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idI145" origin="Microsoft">
    <description>selector xpath='self::*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI145.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI146" origin="Microsoft">
    <description>selector xpath='descendant-or-self::*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI146.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI147" origin="Microsoft">
    <description>selector xpath='descendant::*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI147.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI148" origin="Microsoft">
    <description>selector xpath='attribute::*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI148.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI149" origin="Microsoft">
    <description>selector xpath='@*' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI149.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI150" origin="Microsoft">
    <description>selector xpath='self::node()' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI150.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI151" origin="Microsoft">
    <description>selector xpath='qname[type='predicate']' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI151.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idI152" origin="Microsoft">
    <description>selector xpath='qname[predicate]' , field contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idI152.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ001" origin="Microsoft">
    <description>field xpath='' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ002" origin="Microsoft">
    <description>field xpath='@' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ003" origin="Microsoft">
    <description>field xpath='attribute::' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ004" origin="Microsoft">
    <description>field xpath='.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ005" origin="Microsoft">
    <description>field xpath='/' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ006" origin="Microsoft">
    <description>field xpath='//' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ007" origin="Microsoft">
    <description>field xpath='|' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ008" origin="Microsoft">
    <description>field xpath='| qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ009" origin="Microsoft">
    <description>field xpath='qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ010" origin="Microsoft">
    <description>field xpath='child::qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ011" origin="Microsoft">
    <description>field xpath='qname' , selector contains * . Prefix is undefined</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ012" origin="Microsoft">
    <description>field xpath='*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ013" origin="Microsoft">
    <description>field xpath='ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ014" origin="Microsoft">
    <description>field xpath='child::ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ015" origin="Microsoft">
    <description>field xpath='ncname :*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ016" origin="Microsoft">
    <description>field xpath='ncname: *' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ017" origin="Microsoft">
    <description>field xpath='ncname : *' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ018" origin="Microsoft">
    <description>field xpath=' ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ018.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ019" origin="Microsoft">
    <description>field xpath='@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ019.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ020" origin="Microsoft">
    <description>field xpath='attribute::qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ020.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ021" origin="Microsoft">
    <description>field xpath='@ *' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ021.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ022" origin="Microsoft">
    <description>field xpath='@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ022.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ023" origin="Microsoft">
    <description>field xpath='attribute::*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ023.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ024" origin="Microsoft">
    <description>field xpath='@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ024.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ025" origin="Microsoft">
    <description>field xpath='.///@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ026" origin="Microsoft">
    <description>field xpath='.//' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ027" origin="Microsoft">
    <description>field xpath='.//.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ027.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ028" origin="Microsoft">
    <description>field xpath='.// .' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ028.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ029" origin="Microsoft">
    <description>field xpath='. //.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ029.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ030" origin="Microsoft">
    <description>field xpath='./ /.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ031" origin="Microsoft">
    <description>field xpath=' .//.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ031.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ032" origin="Microsoft">
    <description>field xpath='attribute: :qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ032.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ033" origin="Microsoft">
    <description>field xpath='attribute ::qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ033.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ034" origin="Microsoft">
    <description>field xpath='attribute:: qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ034.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ035" origin="Microsoft">
    <description>field xpath='.//qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ035.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ036" origin="Microsoft">
    <description>field xpath='.//.//qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ036.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ037" origin="Microsoft">
    <description>field xpath='.//*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ037.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ038" origin="Microsoft">
    <description>field xpath='.//ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ038.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ039" origin="Microsoft">
    <description>field xpath='.//@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ039.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ040" origin="Microsoft">
    <description>field xpath='.//@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ040.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ041" origin="Microsoft">
    <description>field xpath='.//@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ041.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ042" origin="Microsoft">
    <description>field xpath='./ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ042.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ043" origin="Microsoft">
    <description>field xpath='.//./.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ043.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ044" origin="Microsoft">
    <description>field xpath='.//./qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ044.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ045" origin="Microsoft">
    <description>field xpath='.//./*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ045.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ046" origin="Microsoft">
    <description>field xpath='.//./ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ046.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ047" origin="Microsoft">
    <description>field xpath='.//./@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ047.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ048" origin="Microsoft">
    <description>field xpath='.//./@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ048.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ049" origin="Microsoft">
    <description>field xpath='.//./@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ049.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ050" origin="Microsoft">
    <description>field xpath='.//qname/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ050.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ051" origin="Microsoft">
    <description>field xpath='.//qname1/qname2' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ051.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ052" origin="Microsoft">
    <description>field xpath='.//qname1/.//qname2' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ052.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ053" origin="Microsoft">
    <description>field xpath='.//qname/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ053.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ054" origin="Microsoft">
    <description>field xpath='.//qname/ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ054.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ055" origin="Microsoft">
    <description>field xpath='.//qname1/@qname2' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ055.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ056" origin="Microsoft">
    <description>field xpath='.//qname1/.//@qname2' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ056.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ057" origin="Microsoft">
    <description>field xpath='.//qname/@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ057.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ058" origin="Microsoft">
    <description>field xpath='.//qname/@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ058.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ059" origin="Microsoft">
    <description>field xpath='.//*/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ059.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ060" origin="Microsoft">
    <description>field xpath='.//*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ060.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ061" origin="Microsoft">
    <description>field xpath='.//*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ061.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ062" origin="Microsoft">
    <description>field xpath='.//*/ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ062.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ063" origin="Microsoft">
    <description>field xpath='.//*/@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ063.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ064" origin="Microsoft">
    <description>field xpath='.//*/@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ064.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ065" origin="Microsoft">
    <description>field xpath='.//*/@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ065.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ066" origin="Microsoft">
    <description>field xpath='.//ncname:*/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ066.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ067" origin="Microsoft">
    <description>field xpath='.//ncname:*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ067.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ068" origin="Microsoft">
    <description>field xpath='.//ncname:*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ068.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ069" origin="Microsoft">
    <description>field xpath='.//ncname1:*/ncname2:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ069.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ070" origin="Microsoft">
    <description>field xpath='.//ncname:*/@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ070.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ071" origin="Microsoft">
    <description>field xpath='.//ncname:*/@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ071.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ072" origin="Microsoft">
    <description>field xpath='.//ncname1:*/@ncname2:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ072.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ073" origin="Microsoft">
    <description>field xpath='. | .' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ073.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ074" origin="Microsoft">
    <description>field xpath='. | qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ074.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ075" origin="Microsoft">
    <description>field xpath='. | *' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ075.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ076" origin="Microsoft">
    <description>field xpath='. | ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ076.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ077" origin="Microsoft">
    <description>field xpath='. | @qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ077.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ078" origin="Microsoft">
    <description>field xpath='. | @*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ078.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ079" origin="Microsoft">
    <description>field xpath='. | @ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ079.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ080" origin="Microsoft">
    <description>field xpath='. | .//.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ080.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ081" origin="Microsoft">
    <description>field xpath='. | .//qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ081.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ082" origin="Microsoft">
    <description>field xpath='. | .//*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ082.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ083" origin="Microsoft">
    <description>field xpath='. | .//ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ083.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ084" origin="Microsoft">
    <description>field xpath='. | .//@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ084.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ085" origin="Microsoft">
    <description>field xpath='. | .//@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ085.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ086" origin="Microsoft">
    <description>field xpath='. | .//@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ086.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ087" origin="Microsoft">
    <description>field xpath='. | .//./.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ087.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ088" origin="Microsoft">
    <description>field xpath='. | .//./qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ088.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ089" origin="Microsoft">
    <description>field xpath='. | .//./*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ089.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ090" origin="Microsoft">
    <description>field xpath='. | .//./ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ090.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ091" origin="Microsoft">
    <description>field xpath='. | .//./@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ091.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ092" origin="Microsoft">
    <description>field xpath='. | .//./@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ092.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ093" origin="Microsoft">
    <description>field xpath='. | .//./@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ093.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ094" origin="Microsoft">
    <description>field xpath='. | .//qname/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ094.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ095" origin="Microsoft">
    <description>field xpath='. | .//qname1/qname2' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ095.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ096" origin="Microsoft">
    <description>field xpath='. | .//qname/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ096.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ097" origin="Microsoft">
    <description>field xpath='. | .//qname/ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ097.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ098" origin="Microsoft">
    <description>field xpath='. | .//qname1/@qname2' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ098.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ099" origin="Microsoft">
    <description>field xpath='. | .//qname/@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ099.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ100" origin="Microsoft">
    <description>field xpath='. | .//qname/@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ100.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ101" origin="Microsoft">
    <description>field xpath='. | .//*/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ101.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ102" origin="Microsoft">
    <description>field xpath='. | .//*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ102.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ103" origin="Microsoft">
    <description>field xpath='. | .//*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ103.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ104" origin="Microsoft">
    <description>field xpath='. | .//*/ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ104.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ105" origin="Microsoft">
    <description>field xpath='. | .//*/@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ105.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ106" origin="Microsoft">
    <description>field xpath='. | .//*/@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ106.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ107" origin="Microsoft">
    <description>field xpath='. | .//*/@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ107.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ108" origin="Microsoft">
    <description>field xpath='. | .//ncname:*/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ108.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ109" origin="Microsoft">
    <description>field xpath='. | .//ncname:*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ109.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ110" origin="Microsoft">
    <description>field xpath='. | .//ncname:*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ110.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ111" origin="Microsoft">
    <description>field xpath='. | .//ncname1:*/ncname2:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ111.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ112" origin="Microsoft">
    <description>field xpath='. | .//ncname:*/@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ112.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ113" origin="Microsoft">
    <description>field xpath='. | .//ncname:*/@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ113.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ114" origin="Microsoft">
    <description>field xpath='. | .//ncname1:*/@ncname2:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ114.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ115" origin="Microsoft">
    <description>field xpath='qname1 | .' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ115.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ116" origin="Microsoft">
    <description>field xpath='qname1 | qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ116.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ117" origin="Microsoft">
    <description>field xpath='qname1 | *' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ117.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ118" origin="Microsoft">
    <description>field xpath='qname1 | ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ118.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ119" origin="Microsoft">
    <description>field xpath='qname1 | @qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ119.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ120" origin="Microsoft">
    <description>field xpath='qname1 | @*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ120.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ121" origin="Microsoft">
    <description>field xpath='qname1 | @ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ121.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ122" origin="Microsoft">
    <description>field xpath='@qname1 | @qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ122.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ123" origin="Microsoft">
    <description>field xpath='@qname1 | @*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ123.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ124" origin="Microsoft">
    <description>field xpath='@qname1 | @ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ124.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ125" origin="Microsoft">
    <description>field xpath='qname1 | .//.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ125.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ126" origin="Microsoft">
    <description>field xpath='qname1 | .//qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ126.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ127" origin="Microsoft">
    <description>field xpath='qname1 | .//*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ127.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ128" origin="Microsoft">
    <description>field xpath='qname1 | .//ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ128.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ129" origin="Microsoft">
    <description>field xpath='qname1 | .//./.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ129.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ130" origin="Microsoft">
    <description>field xpath='qname1 | .//./qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ130.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ131" origin="Microsoft">
    <description>field xpath='qname1 | .//./*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ131.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ132" origin="Microsoft">
    <description>field xpath='qname1 | .//./ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ132.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ133" origin="Microsoft">
    <description>field xpath='qname1 | .//qname/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ133.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ134" origin="Microsoft">
    <description>field xpath='qname1 | .//qname1/qname2' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ134.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ135" origin="Microsoft">
    <description>field xpath='qname1 | .//qname/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ135.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ136" origin="Microsoft">
    <description>field xpath='qname1 | .//qname/ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ136.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ137" origin="Microsoft">
    <description>field xpath='qname1 | .//*/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ137.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ138" origin="Microsoft">
    <description>field xpath='qname1 | .//*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ138.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ139" origin="Microsoft">
    <description>field xpath='qname1 | .//*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ139.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ140" origin="Microsoft">
    <description>field xpath='qname1 | .//*/ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ140.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ141" origin="Microsoft">
    <description>field xpath='qname1 | .//ncname:*/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ141.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ142" origin="Microsoft">
    <description>field xpath='qname1 | .//ncname:*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ142.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ143" origin="Microsoft">
    <description>field xpath='qname1 | .//ncname:*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ143.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ144" origin="Microsoft">
    <description>field xpath='qname1 | .//ncname1:*/ncname2:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ144.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ145" origin="Microsoft">
    <description>field xpath='* | .' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ145.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ146" origin="Microsoft">
    <description>field xpath='* | qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ146.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ147" origin="Microsoft">
    <description>field xpath='* | *' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ147.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ148" origin="Microsoft">
    <description>field xpath='* | ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ148.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ149" origin="Microsoft">
    <description>field xpath='* | @qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ149.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ150" origin="Microsoft">
    <description>field xpath='* | @*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ150.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ151" origin="Microsoft">
    <description>field xpath='* | @ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ151.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ152" origin="Microsoft">
    <description>field xpath='@* | qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ152.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ153" origin="Microsoft">
    <description>field xpath='@* | *' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ153.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ154" origin="Microsoft">
    <description>field xpath='@* | ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ154.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ155" origin="Microsoft">
    <description>field xpath='* | .//.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ155.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ156" origin="Microsoft">
    <description>field xpath='* | .//qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ156.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ157" origin="Microsoft">
    <description>field xpath='* | .//*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ157.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ158" origin="Microsoft">
    <description>field xpath='* | .//ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ158.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ159" origin="Microsoft">
    <description>field xpath='* | .//./.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ159.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ160" origin="Microsoft">
    <description>field xpath='* | .//./qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ160.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ161" origin="Microsoft">
    <description>field xpath='* | .//./*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ161.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ162" origin="Microsoft">
    <description>field xpath='* | .//./ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ162.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ163" origin="Microsoft">
    <description>field xpath='* | .//qname/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ163.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ164" origin="Microsoft">
    <description>field xpath='* | .//qname1/qname2' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ164.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ165" origin="Microsoft">
    <description>field xpath='* | .//qname/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ165.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ166" origin="Microsoft">
    <description>field xpath='* | .//qname/ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ166.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ167" origin="Microsoft">
    <description>field xpath='* | .//*/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ167.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ168" origin="Microsoft">
    <description>field xpath='* | .//*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ168.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ169" origin="Microsoft">
    <description>field xpath='* | .//*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ169.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ170" origin="Microsoft">
    <description>field xpath='* | .//*/ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ170.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ171" origin="Microsoft">
    <description>field xpath='* | .//ncname:*/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ171.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ172" origin="Microsoft">
    <description>field xpath='* | .//ncname:*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ172.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ173" origin="Microsoft">
    <description>field xpath='* | .//ncname:*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ173.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ174" origin="Microsoft">
    <description>field xpath='* | .//ncname1:*/ncname2:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ174.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ175" origin="Microsoft">
    <description>field xpath='ncname1:* | .' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ175.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ176" origin="Microsoft">
    <description>field xpath='ncname1:* | qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ176.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ177" origin="Microsoft">
    <description>field xpath='ncname1:* | *' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ177.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ178" origin="Microsoft">
    <description>field xpath='ncname1:* | ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ178.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ179" origin="Microsoft">
    <description>field xpath='ncname1:* | .//.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ179.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ180" origin="Microsoft">
    <description>field xpath='ncname1:* | .//qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ180.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ181" origin="Microsoft">
    <description>field xpath='ncname1:* | .//*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ181.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ182" origin="Microsoft">
    <description>field xpath='ncname1:* | .//ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ182.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ183" origin="Microsoft">
    <description>field xpath='ncname1:* | .//./.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ183.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ184" origin="Microsoft">
    <description>field xpath='ncname1:* | .//./qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ184.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ185" origin="Microsoft">
    <description>field xpath='ncname1:* | .//./*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ185.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ186" origin="Microsoft">
    <description>field xpath='ncname1:* | .//./ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ186.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ187" origin="Microsoft">
    <description>field xpath='ncname1:* | .//qname/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ187.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ188" origin="Microsoft">
    <description>field xpath='ncname1:* | .//qname1/qname2' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ188.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ189" origin="Microsoft">
    <description>field xpath='ncname1:* | .//qname/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ189.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ190" origin="Microsoft">
    <description>field xpath='ncname1:* | .//qname/ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ190.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ191" origin="Microsoft">
    <description>field xpath='ncname1:* | .//*/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ191.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ192" origin="Microsoft">
    <description>field xpath='ncname1:* | .//*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ192.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ193" origin="Microsoft">
    <description>field xpath='ncname1:* | .//*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ193.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ194" origin="Microsoft">
    <description>field xpath='ncname1:* | .//*/ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ194.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ195" origin="Microsoft">
    <description>field xpath='ncname1:* | .//ncname:*/.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ195.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ196" origin="Microsoft">
    <description>field xpath='ncname1:* | .//ncname:*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ196.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ197" origin="Microsoft">
    <description>field xpath='ncname1:* | .//ncname:*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ197.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ198" origin="Microsoft">
    <description>field xpath='ncname:* | .//ncname1:*/ncname2:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ198.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ199" origin="Microsoft">
    <description>field xpath='ncname1:* | .//ncname:*/@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ199.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ200" origin="Microsoft">
    <description>field xpath='ncname1:* | .//ncname:*/@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ200.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ201" origin="Microsoft">
    <description>field xpath='ncname:* | .//ncname1:*/@ncname2:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ201.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ202" origin="Microsoft">
    <description>field xpath='@ncname1:* | .//ncname:*/qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ202.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ203" origin="Microsoft">
    <description>field xpath='@ncname1:* | .//ncname:*/*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ203.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ204" origin="Microsoft">
    <description>field xpath='@ncname:* | .//ncname1:*/ncname2:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ204.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="idJ205" origin="Microsoft">
    <description>field xpath='self::*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ205.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ206" origin="Microsoft">
    <description>field xpath='descendant-or-self::*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ206.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ207" origin="Microsoft">
    <description>field xpath='descendant::*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ207.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ208" origin="Microsoft">
    <description>field xpath='self::node()' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ208.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ209" origin="Microsoft">
    <description>field xpath='qname[type='predicate']' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ209.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idJ210" origin="Microsoft">
    <description>field xpath='qname[predicate]' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idJ210.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idK001" origin="Microsoft">
    <description>keyref fields locating an attribute refers to a key locating an element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK002" origin="Microsoft">
    <description>keyref fields locating an attribute refers to a unique locating an element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK003" origin="Microsoft">
    <description>keyref fields locating an attribute subject to normalization refers to a key locating an element that is not normalized , prenormalization values are the same</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idK004" origin="Microsoft">
    <description>keyref fields locating an attribute subject to normalization refers to a key locating an element that is not normalized , postnormalization values are the same</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK005" origin="Microsoft">
    <description>keyref fields locating an element refers to a key locating an attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK006" origin="Microsoft">
    <description>keyref fields locating an element refers to a unique locating an attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK007" origin="Microsoft">
    <description>keyref fields locating an attribute refers to a key locating an attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK008" origin="Microsoft">
    <description>keyref fields locating an attribute refers to a unique locating an attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK009" origin="Microsoft">
    <description>keyref fields locating an element refers to a key locating an element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK010" origin="Microsoft">
    <description>keyref fields locating an element refers to a unique locating an element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK011" origin="Microsoft">
    <description>constraint locating an element that is of complexType/simpleContent</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK012" origin="Microsoft">
    <description>constraint locating an element that is of complexType/complexContent</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idK013" origin="Microsoft">
    <description>constraint locating an element that is of simpleType/restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK014" origin="Microsoft">
    <description>constraint locating an element that is of simpleType/list</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK015" origin="Microsoft">
    <description>constraint locating an element that is of simpleType/union</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idK016" origin="Microsoft">
    <description>keys and keyref defined locally outside of each other's scope</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idK017" origin="Microsoft">
    <description>keyref defined locally within key scope</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idK017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL001" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL002" origin="Microsoft">
    <description>Test invalid XML for unique definition, field xpath='.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL003" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL004" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='child::qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL005" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='.//qname' , selector contains qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL006" origin="Microsoft">
    <description>Test invalid XML for unique definition, field xpath='qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL007" origin="Microsoft">
    <description>Test invalid XML for unique definition, field xpath='.//qname' , selector contains qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL008" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL009" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='*' , selector contains .//qname</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL010" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='child::*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL011" origin="Microsoft">
    <description>Test invalid XML for unique definition, field xpath='*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL012" origin="Microsoft">
    <description>Test invalid XML for unique definition, field xpath='*' , selector contains .//qname</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL013" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL014" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='child::ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL015" origin="Microsoft">
    <description>Test invalid XML for unique definition, field xpath='ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL016" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL017" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='attribute::qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL018" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='attribute::qname' , selector contains .//qname1/qname2</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL019" origin="Microsoft">
    <description>Test invalid XML for unique definition, field xpath='@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL020" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL021" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='attribute::*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL022" origin="Microsoft">
    <description>Test invalid XML for unique definition, field xpath='@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL022.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL023" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL024" origin="Microsoft">
    <description>Test valid XML for unique definition, field xpath='attribute::ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL024.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL025" origin="Microsoft">
    <description>Test invalid XML for unique definition, field xpath='@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL025.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL026" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL027" origin="Microsoft">
    <description>Test invalid XML for key definition, field xpath='.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL027.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL028" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL028.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL029" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='child::qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL030" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='.//qname' , selector contains qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL031" origin="Microsoft">
    <description>Test invalid XML for key definition, field xpath='qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL031.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL032" origin="Microsoft">
    <description>Test invalid XML for key definition, field xpath='.//qname' , selector contains qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL032.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL033" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL034" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='*' , selector contains .//qname</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL035" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='child::*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL035.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL036" origin="Microsoft">
    <description>Test invalid XML for key definition, field xpath='*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL036.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL036.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL037" origin="Microsoft">
    <description>Test invalid XML for key definition, field xpath='*' , selector contains .//qname</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL037.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL038" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL038.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL038.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL039" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='child::ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL039.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL039.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL040" origin="Microsoft">
    <description>Test invalid XML for key definition, field xpath='ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL040.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL040.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL041" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL041.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL041.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL042" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='attribute::qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL042.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL042.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL043" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='attribute::qname' , selector contains .//qname1/qname2</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL043.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL043.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL044" origin="Microsoft">
    <description>Test invalid XML for key definition, field xpath='@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL044.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL044.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL045" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL045.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL045.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL046" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='attribute::*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL046.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL046.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL047" origin="Microsoft">
    <description>Test invalid XML for key definition, field xpath='@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL047.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL047.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL048" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL048.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL048.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL049" origin="Microsoft">
    <description>Test valid XML for key definition, field xpath='attribute::ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL049.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL049.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL050" origin="Microsoft">
    <description>Test invalid XML for key definition, field xpath='@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL050.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL050.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL051" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL051.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL051.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL052" origin="Microsoft">
    <description>Test invalid XML for keyref definition, field xpath='.' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL052.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL052.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL053" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL053.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL053.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL054" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='child::qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL054.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL054.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL055" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='.//qname' , selector contains qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL055.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL055.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL056" origin="Microsoft">
    <description>Test invalid XML for keyref definition, field xpath='qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL056.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL056.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL057" origin="Microsoft">
    <description>Test invalid XML for keyref definition, field xpath='.//qname' , selector contains qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL057.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL057.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL058" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL058.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL058.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL059" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='*' , selector contains .//qname</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL059.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL059.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL060" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='child::*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL060.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL060.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL061" origin="Microsoft">
    <description>Test invalid XML for keyref definition, field xpath='*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL061.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL061.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL062" origin="Microsoft">
    <description>Test invalid XML for keyref definition, field xpath='*' , selector contains .//qname</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL062.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL062.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL063" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL063.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL063.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL064" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='child::ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL064.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL064.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL065" origin="Microsoft">
    <description>Test invalid XML for keyref definition, field xpath='ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL065.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL065.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL066" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL066.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL066.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL067" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='attribute::qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL067.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL067.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL068" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='attribute::qname' , selector contains .//qname1/qname2</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL068.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL068.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL069" origin="Microsoft">
    <description>Test invalid XML for keyref definition, field xpath='@qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL069.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL069.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL070" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL070.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL070.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL071" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='attribute::*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL071.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL071.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL072" origin="Microsoft">
    <description>Test invalid XML for keyref definition, field xpath='@*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL072.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL072.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL073" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL073.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL073.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL074" origin="Microsoft">
    <description>Test valid XML for keyref definition, field xpath='attribute::ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL074.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL074.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL075" origin="Microsoft">
    <description>Test invalid XML for keyref definition, field xpath='@ncname:*' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL075.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL075.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL076" origin="Microsoft">
    <description>Test multiple field statements field xpath='. ; qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL076.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL076.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL077" origin="Microsoft">
    <description>Test multiple field statements field xpath='. ; qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL077.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL077.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL078" origin="Microsoft">
    <description>Test multiple field statements field xpath='qname ; qname1' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL078.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL078.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL079" origin="Microsoft">
    <description>Test multiple field statements field xpath='qname ; qname1' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL079.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL079.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL080" origin="Microsoft">
    <description>Test multiple field statements field xpath='* ; qname' , selector contains *, keyref with field='*' will fail because it allow only single node.</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL080.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL080.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL081" origin="Microsoft">
    <description>Test multiple field statements field xpath='* ; qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL081.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL081.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL082" origin="Microsoft">
    <description>Test multiple field statements field xpath='ncname:* ; qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL082.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL082.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL083" origin="Microsoft">
    <description>Test multiple field statements field xpath='ncname:* ; qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL083.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL083.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL084" origin="Microsoft">
    <description>Test multiple field statements field xpath='@qname ; qname1' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL084.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL084.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL085" origin="Microsoft">
    <description>Test multiple field statements field xpath='@qname ; qname1' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL085.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL085.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL086" origin="Microsoft">
    <description>Test multiple field statements field xpath='@* ; qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL086.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL086.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL087" origin="Microsoft">
    <description>Test multiple field statements field xpath='@* ; qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL087.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL087.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL088" origin="Microsoft">
    <description>Test multiple field statements field xpath='@ncname:* ; qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL088.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL088.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL089" origin="Microsoft">
    <description>Test multiple field statements field xpath='@ncname:* ;qname' , selector contains *</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL089.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL089.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL090" origin="Microsoft">
    <description>Test for path | path of selector field xpath='.' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL090.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL090.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL091" origin="Microsoft">
    <description>Test for path | path of selector field xpath='.' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL091.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL091.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL092" origin="Microsoft">
    <description>Test for path | path of selector field xpath='qname' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL092.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL092.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL093" origin="Microsoft">
    <description>Test for path | path of selector field xpath='qname' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL093.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL093.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL094" origin="Microsoft">
    <description>Test for path | path of selector field xpath='*' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL094.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL094.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL095" origin="Microsoft">
    <description>Test for path | path of selector field xpath='*' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL095.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL095.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL096" origin="Microsoft">
    <description>Test for path | path of selector field xpath='ncname:*' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL096.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL096.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL097" origin="Microsoft">
    <description>Test for path | path of selector field xpath='ncname:*' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL097.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL097.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL098" origin="Microsoft">
    <description>Test for path | path of selector field xpath='@qname' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL098.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL098.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL099" origin="Microsoft">
    <description>Test for path | path of selector field xpath='@qname' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL099.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL099.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL100" origin="Microsoft">
    <description>Test for path | path of selector field xpath='@*' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL100.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL100.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL101" origin="Microsoft">
    <description>Test for path | path of selector field xpath='@*' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL101.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL101.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idL102" origin="Microsoft">
    <description>Test for path | path of selector field xpath='@ncname:*' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL102.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL102.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idL103" origin="Microsoft">
    <description>Test for path | path of selector field xpath='@ncname:*' , selector contains qname | qname1</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL103.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idL103.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idZ001" origin="Microsoft">
    <description>70955 - NullReference when identityConstraint key attempting to validate missing element</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idZ001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idZ001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idZ002" origin="Microsoft">
    <description>70981 - invalid line numbers in XPath validation errors</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idZ002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idZ002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idZ003" origin="Microsoft">
    <description>71410 - XSD - Order of elements in content model of XmlSchemaElement not enforced during validation</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idZ003.xml" role="schema" validity="0"/>
    </files>
  </test>
  <test id="idZ004" origin="Microsoft">
    <description>71477 - XSD IdentityConstraint: placing IC on undeclared element in instance document throws NullReferenceException</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idZ004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint" fileName="idZ004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_string (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_string.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_string_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_normalizedString (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_normalizedString.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_string_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_token (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_token.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_string_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_language (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_language.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_string_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_Name (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_Name.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_string_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_NCName (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_NCName.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_string_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_ID (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_ID.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_string_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_IDREF (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_IDREF.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_string_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_NMTOKEN (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_NMTOKEN.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_string_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_dateTime" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_dateTime (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_dateTime.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_dateTime.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_time" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_time (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_time.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_time.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_date" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_date (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_date.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_date.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_gYearMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_gYearMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_gYearMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_gYearMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_gYear" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_gYear (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_gYear.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_gYear.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_gMonthDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_gMonthDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_gMonthDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_gMonthDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_gDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_gDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_gDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_gDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_string_gMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_string_gMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_gMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_string_gMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_string (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_string.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_normalizedString_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_normalizedString (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_normalizedString.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_normalizedString_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_token (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_token.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_normalizedString_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_language (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_language.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_normalizedString_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_Name (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_Name.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_normalizedString_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_NCName (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_NCName.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_normalizedString_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_ID (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_ID.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_normalizedString_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_IDREF (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_IDREF.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_normalizedString_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_NMTOKEN (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_NMTOKEN.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_normalizedString_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_dateTime" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_dateTime (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_dateTime.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_dateTime.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_time" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_time (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_time.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_time.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_date" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_date (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_date.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_date.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_gYearMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_gYearMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_gYearMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_gYearMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_gYear" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_gYear (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_gYear.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_gYear.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_gMonthDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_gMonthDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_gMonthDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_gMonthDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_gDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_gDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_gDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_gDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_normalizedString_gMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_normalizedString_gMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_gMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_normalizedString_gMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_string (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_string.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_token_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_normalizedString (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_normalizedString.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_token_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_token (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_token.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_token_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_language (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_language.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_token_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_Name (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_Name.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_token_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_NCName (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_NCName.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_token_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_ID (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_ID.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_token_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_IDREF (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_IDREF.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_token_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_NMTOKEN (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_NMTOKEN.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_token_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_dateTime" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_dateTime (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_dateTime.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_dateTime.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_time" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_time (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_time.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_time.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_date" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_date (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_date.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_date.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_gYearMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_gYearMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_gYearMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_gYearMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_gYear" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_gYear (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_gYear.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_gYear.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_gMonthDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_gMonthDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_gMonthDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_gMonthDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_gDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_gDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_gDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_gDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_token_gMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_token_gMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_gMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_token_gMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_language_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_string (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_string.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_language_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_normalizedString (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_normalizedString.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_language_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_token (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_token.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_language_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_language (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_language.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_language_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_Name (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_Name.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_language_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_NCName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_NCName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_language_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_ID (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_language_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_IDREF (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_IDREF.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_language_IDREFS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_IDREFS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_IDREFS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_IDREFS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_language_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_language_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_language_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_language_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_language_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_language_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_language_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_Name_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_string (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_string.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_Name_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_normalizedString (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_normalizedString.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_Name_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_token (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_token.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_Name_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_language (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_language.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_Name_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_Name (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_Name.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_Name_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_NCName (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_NCName.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_Name_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_ID (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_ID.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_Name_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_IDREF (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_IDREF.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_Name_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_Name_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_Name_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_Name_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_Name_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_Name_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_Name_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_Name_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_Name_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NCName_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_string (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_string.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NCName_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_normalizedString (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_normalizedString.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NCName_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_token (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_token.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NCName_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_language (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_language.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NCName_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_Name (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_Name.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NCName_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_NCName (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_NCName.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NCName_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_ID (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_ID.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NCName_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_IDREF (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_IDREF.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NCName_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NCName_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NCName_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NCName_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NCName_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NCName_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NCName_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NCName_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NCName_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_string (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_string.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_ID_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_normalizedString (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_normalizedString.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_ID_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_token (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_token.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_ID_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_language (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_language.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_Name (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_Name.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_ID_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_NCName (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_NCName.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_ID_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_ID (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_IDREF (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_IDREF.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_IDREFS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_IDREFS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_IDREFS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_IDREFS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_ID_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_ID_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_ID_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREF_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_string (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_string.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_IDREF_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_normalizedString (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_normalizedString.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_IDREF_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_token (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_token.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_IDREF_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_language (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_language.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREF_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_Name (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_Name.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_IDREF_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_NCName (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_NCName.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_IDREF_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_ID (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREF_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_IDREF (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_IDREF.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_IDREF_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREF_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREF_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREF_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREF_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREF_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREF_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREF_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREF_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREFS_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREFS_language (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_language.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREFS_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREFS_ID (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREFS_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREFS_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREFS_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREFS_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREFS_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREFS_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREFS_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREFS_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREFS_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREFS_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREFS_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREFS_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_IDREFS_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_IDREFS_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_IDREFS_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_string (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_string.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_normalizedString (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_normalizedString.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_token (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_token.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_language (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_language.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_Name (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_Name.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_NCName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_NCName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_ID (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_IDREF (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_IDREF.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_IDREFS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_IDREFS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_IDREFS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_IDREFS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_NMTOKEN (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_NMTOKEN.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_dateTime" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_dateTime (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_dateTime.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_dateTime.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_time" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_time (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_time.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_time.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_date" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_date (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_date.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_date.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_gYearMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_gYearMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_gYearMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_gYearMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_gYear" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_gYear (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_gYear.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_gYear.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_gMonthDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_gMonthDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_gMonthDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_gMonthDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_gDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_gDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_gDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_gDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKEN_gMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKEN_gMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_gMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKEN_gMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_language (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_language.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_Name (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_Name.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_NCName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_NCName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_ID (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_IDREF (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_IDREF.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_IDREFS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_IDREFS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_IDREFS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_IDREFS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_dateTime" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_dateTime (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_dateTime.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_dateTime.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_time" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_time (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_time.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_time.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_date" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_date (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_date.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_date.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_gYearMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_gYearMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_gYearMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_gYearMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_gYear" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_gYear (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_gYear.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_gYear.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_gMonthDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_gMonthDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_gMonthDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_gMonthDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_gDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_gDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_gDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_gDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NMTOKENS_gMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NMTOKENS_gMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_gMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NMTOKENS_gMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_Name (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_Name.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_NCName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_NCName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_ID (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_IDREF (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_IDREF.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_IDREFS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_IDREFS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_IDREFS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_IDREFS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_boolean (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_boolean.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_boolean_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_boolean_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_boolean_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_boolean_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_base64Binary_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_base64Binary_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_base64Binary_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_hexBinary_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_hexBinary_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_hexBinary_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_float (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_float.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_float_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_float_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_float_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_float_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_nonPositiveInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_nonPositiveInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_negativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_negativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_long (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_long.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_int (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_int.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_short (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_short.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_byte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_byte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_nonNegativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_nonNegativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_positiveInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_positiveInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_unsignedLong (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_unsignedLong.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_unsignedInt (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_unsignedInt.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_unsignedShort (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_unsignedShort.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_unsignedByte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_unsignedByte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_decimal_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_decimal_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_decimal_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_decimal_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_nonPositiveInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_nonPositiveInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_negativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_negativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_long (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_long.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_int (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_int.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_short (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_short.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_byte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_byte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_nonNegativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_nonNegativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_positiveInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_positiveInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_unsignedLong (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_unsignedLong.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_unsignedInt (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_unsignedInt.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_unsignedShort (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_unsignedShort.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_unsignedByte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_unsignedByte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_integer_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_integer_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_integer_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_integer_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_nonPositiveInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_nonPositiveInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_negativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_negativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonPositiveInteger_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonPositiveInteger_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonPositiveInteger_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_negativeInteger_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_negativeInteger_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_nonPositiveInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_nonPositiveInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_negativeInteger_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_negativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_negativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_negativeInteger_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_negativeInteger_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_negativeInteger_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_negativeInteger_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_long_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_long_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_long (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_long.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_long_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_int (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_int.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_long_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_short (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_short.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_long_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_byte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_byte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_long_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_long_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_long_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_long_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_int_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_int_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_long (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_long.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_int_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_int (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_int.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_int_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_short (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_short.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_int_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_byte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_byte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_int_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_int_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_int_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_int_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_short_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_short_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_long (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_long.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_short_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_int (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_int.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_short_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_short (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_short.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_short_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_byte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_byte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_short_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_short_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_short_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_short_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_byte_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_byte_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_long (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_long.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_byte_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_int (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_int.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_byte_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_short (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_short.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_byte_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_byte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_byte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_byte_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_byte_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_byte_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_byte_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_nonNegativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_nonNegativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_positiveInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_positiveInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_unsignedLong (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_unsignedLong.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_unsignedInt (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_unsignedInt.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_unsignedShort (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_unsignedShort.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_unsignedByte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_unsignedByte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_nonNegativeInteger_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_nonNegativeInteger_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_nonNegativeInteger_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_positiveInteger_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_positiveInteger_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_nonNegativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_nonNegativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_positiveInteger_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_positiveInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_positiveInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_positiveInteger_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_positiveInteger_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_positiveInteger_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_positiveInteger_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedLong_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedLong_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_nonNegativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_nonNegativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedLong_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_unsignedLong (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_unsignedLong.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedLong_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_unsignedInt (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_unsignedInt.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedLong_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_unsignedShort (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_unsignedShort.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedLong_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_unsignedByte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_unsignedByte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedLong_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedLong_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedLong_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedLong_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedInt_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedInt_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_nonNegativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_nonNegativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedInt_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_unsignedLong (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_unsignedLong.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedInt_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_unsignedInt (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_unsignedInt.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedInt_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_unsignedShort (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_unsignedShort.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedInt_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_unsignedByte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_unsignedByte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedInt_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedInt_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedInt_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedInt_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedShort_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedShort_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_nonNegativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_nonNegativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedShort_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_unsignedLong (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_unsignedLong.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedShort_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_unsignedInt (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_unsignedInt.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedShort_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_unsignedShort (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_unsignedShort.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedShort_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_unsignedByte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_unsignedByte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedShort_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedShort_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedShort_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedShort_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_decimal (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_decimal.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedByte_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_integer (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_integer.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedByte_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_nonNegativeInteger (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_nonNegativeInteger.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedByte_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_unsignedLong (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_unsignedLong.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedByte_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_unsignedInt (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_unsignedInt.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedByte_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_unsignedShort (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_unsignedShort.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedByte_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_unsignedByte (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_unsignedByte.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_unsignedByte_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_unsignedByte_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_unsignedByte_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_unsignedByte_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_double_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_double (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_double.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_double_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_double_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_double_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_language (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_language.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_Name (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_Name.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_NCName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_NCName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_ID (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_IDREF (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_IDREF.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_IDREFS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_IDREFS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_IDREFS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_IDREFS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_base64Binary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_base64Binary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_base64Binary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_base64Binary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_hexBinary" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_hexBinary (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_hexBinary.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_hexBinary.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_float" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_float (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_float.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_decimal" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_decimal (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_decimal.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_decimal.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_integer" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_integer (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_integer.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_integer.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_nonPositiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_nonPositiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_nonPositiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_nonPositiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_negativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_negativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_negativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_negativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_long" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_long (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_long.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_long.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_int" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_int (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_int.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_short" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_short (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_short.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_short.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_byte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_byte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_byte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_byte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_nonNegativeInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_nonNegativeInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_nonNegativeInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_nonNegativeInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_positiveInteger" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_positiveInteger (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_positiveInteger.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_positiveInteger.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_unsignedLong" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_unsignedLong (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_unsignedLong.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_unsignedLong.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_unsignedInt" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_unsignedInt (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_unsignedInt.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_unsignedInt.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_unsignedShort" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_unsignedShort (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_unsignedShort.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_unsignedShort.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_unsignedByte" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_unsignedByte (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_unsignedByte.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_unsignedByte.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_double" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_double (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_double.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_double.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_anyURI (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_anyURI.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_anyURI_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_dateTime" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_dateTime (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_dateTime.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_dateTime.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_time" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_time (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_time.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_time.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_date" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_date (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_date.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_date.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_gYearMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_gYearMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_gYearMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_gYearMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_gYear" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_gYear (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_gYear.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_gYear.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_gMonthDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_gMonthDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_gMonthDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_gMonthDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_gDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_gDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_gDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_gDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_anyURI_gMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_anyURI_gMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_gMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_anyURI_gMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_language (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_language.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_Name (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_Name.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_NCName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_NCName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_ID (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_IDREF (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_IDREF.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_IDREFS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_IDREFS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_IDREFS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_IDREFS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_QName_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_QName (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_QName.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_QName_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_QName_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_QName_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_language" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_language (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_language.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_language.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_Name (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_Name.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_NCName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_NCName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_ID (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_IDREF (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_IDREF.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_IDREFS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_IDREFS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_IDREFS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_IDREFS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_boolean" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_boolean (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_boolean.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_boolean.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_NOTATION_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_NOTATION (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_NOTATION.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_NOTATION_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_NOTATION_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_NOTATION_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_Name" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_Name (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_Name.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_Name.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_NCName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_NCName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_NCName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_NCName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_ID" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_ID (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_ID.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_ID.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_IDREF" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_IDREF (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_IDREF.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_IDREF.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_IDREFS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_IDREFS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_IDREFS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_IDREFS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_QName" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_QName (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_QName.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_QName.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_NOTATION" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_NOTATION (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_NOTATION.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_NOTATION.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_duration (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_duration.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_duration_dateTime" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_dateTime (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_dateTime.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_dateTime.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_time" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_time (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_time.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_time.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_date" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_date (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_date.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_date.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_gYearMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_gYearMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_gYearMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_gYearMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_gYear" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_gYear (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_gYear.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_gYear.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_gMonthDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_gMonthDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_gMonthDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_gMonthDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_gDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_gDay (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_gDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_gDay.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_duration_gMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_duration_gMonth (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_gMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_duration_gMonth.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_dateTime_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_dateTime_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_dateTime_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_dateTime_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_dateTime_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_dateTime_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_dateTime_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_dateTime_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_dateTime_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_dateTime_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_dateTime_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_dateTime_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_dateTime_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_dateTime_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_dateTime_dateTime" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_dateTime_dateTime (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_dateTime.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_dateTime.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_dateTime_date" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_dateTime_date (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_date.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_dateTime_date.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_time_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_time_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_time_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_time_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_time_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_time_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_time_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_time_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_time_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_time_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_time_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_time_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_time_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_time_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_time_time" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_time_time (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_time.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_time_time.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_date_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_date_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_date_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_date_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_date_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_date_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_date_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_date_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_date_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_date_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_date_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_date_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_date_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_date_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_date_dateTime" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_date_dateTime (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_dateTime.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_dateTime.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_date_date" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_date_date (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_date.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_date_date.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_gYearMonth_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYearMonth_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYearMonth_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYearMonth_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYearMonth_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYearMonth_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYearMonth_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYearMonth_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYearMonth_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYearMonth_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYearMonth_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYearMonth_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYearMonth_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYearMonth_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYearMonth_gYearMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYearMonth_gYearMonth (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_gYearMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYearMonth_gYearMonth.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_gYear_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYear_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYear_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYear_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYear_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYear_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYear_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYear_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYear_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYear_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYear_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYear_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYear_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYear_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gYear_gYear" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gYear_gYear (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_gYear.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gYear_gYear.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_gMonthDay_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonthDay_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonthDay_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonthDay_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonthDay_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonthDay_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonthDay_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonthDay_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonthDay_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonthDay_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonthDay_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonthDay_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonthDay_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonthDay_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonthDay_gMonthDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonthDay_gMonthDay (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_gMonthDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonthDay_gMonthDay.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_gDay_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gDay_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gDay_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gDay_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gDay_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gDay_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gDay_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gDay_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gDay_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gDay_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gDay_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gDay_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gDay_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gDay_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gDay_gDay" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gDay_gDay (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_gDay.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gDay_gDay.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="idc_gMonth_string" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonth_string (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_string.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_string.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonth_normalizedString" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonth_normalizedString (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_normalizedString.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_normalizedString.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonth_token" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonth_token (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_token.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_token.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonth_NMTOKEN" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonth_NMTOKEN (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_NMTOKEN.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_NMTOKEN.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonth_NMTOKENS" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonth_NMTOKENS (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_NMTOKENS.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_NMTOKENS.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonth_anyURI" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonth_anyURI (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_anyURI.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_anyURI.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonth_duration" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonth_duration (invalid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_duration.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_duration.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="idc_gMonth_gMonth" origin="Microsoft">
    <description>Testing key/key on cross datatypes, idc_gMonth_gMonth (valid). All ancestor/descendant derived types of a given datatypes is valid unless the derivation types are different (such as IDREF_IDREFS).</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_gMonth.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="idc_gMonth_gMonth.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="str_int_int" origin="Microsoft">
    <description>derived type of an int from a base type int</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="str_int_int.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="str_int_int.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="str_float_float" origin="Microsoft">
    <description>derived type of a float from a base type float</description>
    <files>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="str_float_float.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="identityConstraint/idc_datatypes" fileName="str_float_float.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgA001" origin="Microsoft">
    <description>all: id, id='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgA002" origin="Microsoft">
    <description>all: id, id=''</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA003" origin="Microsoft">
    <description>all: id, id='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA004" origin="Microsoft">
    <description>all: id, id='-999'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA005" origin="Microsoft">
    <description>all: id, id='a:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA006" origin="Microsoft">
    <description>all: id, two 'all' with same id, one from complexType, one from restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA007" origin="Microsoft">
    <description>all: id, two 'all' with same id, one from complexType, one from extension</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA008" origin="Microsoft">
    <description>all: id, two 'all' with same id, one from complexType, one from group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA009" origin="Microsoft">
    <description>all: id, two 'all' with same id, one from restriction, one from extension</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA010" origin="Microsoft">
    <description>all: id, two 'all' with same id, one from restriction, one from group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA011" origin="Microsoft">
    <description>all: id, two 'all' with same id, one from extension, one from group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA012" origin="Microsoft">
    <description>all: id, two 'all' with same id, both in complexType ( complextype, has an 'all', and a 'group'), the 'group' has an 'all' [NOTE: this fails because complexType doesn't allow 'all' AND 'group' as siblings. Case created but probably not necessary]</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA013" origin="Microsoft">
    <description>all: with name as attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA014" origin="Microsoft">
    <description>all: with parent complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgA015" origin="Microsoft">
    <description>all: with parent restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgA016" origin="Microsoft">
    <description>all: with parent extension</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgA017" origin="Microsoft">
    <description>all: with parent group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgA018" origin="Microsoft">
    <description>all: with parent choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgA019" origin="Microsoft">
    <description>all: with parent sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgA019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAa001" origin="Microsoft">
    <description>all: minOccurs = empty</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAa002" origin="Microsoft">
    <description>all: minOccurs = -1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAa003" origin="Microsoft">
    <description>all: minOccurs = 0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgAa004" origin="Microsoft">
    <description>all: minOccurs = 2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAa005" origin="Microsoft">
    <description>all: minOccurs = *</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAa006" origin="Microsoft">
    <description>all: minOccurs = 9999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAa007" origin="Microsoft">
    <description>all: minOccurs = unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAa008" origin="Microsoft">
    <description>all: minOccurs = a</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAa009" origin="Microsoft">
    <description>all: minOccurs = ?</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAa010" origin="Microsoft">
    <description>all: minOccurs = &amp;</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAa010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAb001" origin="Microsoft">
    <description>all: maxOccurs = empty</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAb001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAb002" origin="Microsoft">
    <description>all: maxOccurs = -1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAb002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAb003" origin="Microsoft">
    <description>all: maxOccurs = 0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAb003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAb004" origin="Microsoft">
    <description>all: maxOccurs = 2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAb004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAb005" origin="Microsoft">
    <description>all: maxOccurs = *</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAb005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAb006" origin="Microsoft">
    <description>all: maxOccurs = 9999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAb006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAb007" origin="Microsoft">
    <description>all: maxOccurs = unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAb007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAb008" origin="Microsoft">
    <description>all: maxOccurs = a</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAb008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAb009" origin="Microsoft">
    <description>all: maxOccurs = ?</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAb009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgAb010" origin="Microsoft">
    <description>all: maxOccurs = &amp;</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgAb010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgB001" origin="Microsoft">
    <description>all: with no child node</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgB002" origin="Microsoft">
    <description>all: with one annotation only</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgB003" origin="Microsoft">
    <description>all: with two annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgB004" origin="Microsoft">
    <description>all: with annotation follow by 1 element</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgB006" origin="Microsoft">
    <description>all: with one element only</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgB007" origin="Microsoft">
    <description>all: with element follow by annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgB008" origin="Microsoft">
    <description>all: with childNode other than annotation or element, child node is simpletype</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgB009" origin="Microsoft">
    <description>all: with childNode other than annotation or element, child node is group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgB010" origin="Microsoft">
    <description>all: with childNode other than annotation or element, child node is complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgB010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgC001" origin="Microsoft">
    <description>all: check that minOccurs default is 1, elements in instant XML = 0, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgC002" origin="Microsoft">
    <description>all: check that minOccurs default is 1, elements in instant XML = 1, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgC003" origin="Microsoft">
    <description>all: check that maxOccurs default is 1, elements in instant XML = 2, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgC004" origin="Microsoft">
    <description>all: minOccurs can have value of 0 or 1 max occurs can only have 1 as value, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgC005" origin="Microsoft">
    <description>all: elements in instant XML=0, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgC006" origin="Microsoft">
    <description>all: elements in instant XML=1, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgC007" origin="Microsoft">
    <description>all: elements in instant XML=2, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgC008" origin="Microsoft">
    <description>all: minOccurs can have value of 0 or 1 max occurs can only have 1 as value, minOccurs=2, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgC009" origin="Microsoft">
    <description>all: minOccurs can have value of 0 or 1 max occurs can only have 1 as value, minOccurs=absent, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgC010" origin="Microsoft">
    <description>all: elements in instant XML=0, minOccurs=absent, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgC011" origin="Microsoft">
    <description>all: elements in instant XML=1, minOccurs=absent, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgC012" origin="Microsoft">
    <description>all: elements in instant XML=2, minOccurs=absent, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgC013" origin="Microsoft">
    <description>, minOccurs=absent, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgC014" origin="Microsoft">
    <description>all with default minOccurs and maxOccurs with optional element children</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgC014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgD001" origin="Microsoft">
    <description>all: with any attribute with no schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgD001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgD001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgD005" origin="Microsoft">
    <description>sequence: with any attribute with no schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgD005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgD005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgD009" origin="Microsoft">
    <description>choice: with any attribute with no schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgD009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgD009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgD013" origin="Microsoft">
    <description>RAID#67552 - test using of minOccurs=0 and allowing elements to not exists</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgD013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgD013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgE001" origin="Microsoft">
    <description>sequence: id, id='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgE002" origin="Microsoft">
    <description>sequence: id, id=''</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE003" origin="Microsoft">
    <description>sequence: id, id='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE004" origin="Microsoft">
    <description>sequence: id, id='-1'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE005" origin="Microsoft">
    <description>sequence: id, id='a:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE006" origin="Microsoft">
    <description>sequence: id, two 'sequence' with same id, one from complexType, one from restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE007" origin="Microsoft">
    <description>sequence: id, two 'sequence' with same id, one from complexType, one from extension</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE008" origin="Microsoft">
    <description>sequence: id, two 'sequence' with same id, one from complexType, one from group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE009" origin="Microsoft">
    <description>sequence: id, two 'sequence' with same id, one from restriction, one from extension</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE010" origin="Microsoft">
    <description>sequence: id, two 'sequence' with same id, one from restriction, one from group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE011" origin="Microsoft">
    <description>sequence: id, two 'sequence' with same id, one from extension, one from group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE012" origin="Microsoft">
    <description>sequence: id, two 'sequence' with same id, both in complexType ( complextype, has an 'all', and a 'group'), the 'group' has an 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgE013" origin="Microsoft">
    <description>sequence: with parent complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgE014" origin="Microsoft">
    <description>sequence: with parent restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgE015" origin="Microsoft">
    <description>sequence: with parent extension</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgE016" origin="Microsoft">
    <description>sequence: with parent group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgE017" origin="Microsoft">
    <description>sequence: with parent choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgE018" origin="Microsoft">
    <description>sequence: with parent sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgE018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgEa001" origin="Microsoft">
    <description>sequence: minOccurs = empty</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEa001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEa002" origin="Microsoft">
    <description>sequence: minOccurs = -1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEa002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEa003" origin="Microsoft">
    <description>sequence: minOccurs = *</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEa003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEa004" origin="Microsoft">
    <description>sequence: minOccurs = unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEa004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEa005" origin="Microsoft">
    <description>sequence: minOccurs = 9999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEa005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEa006" origin="Microsoft">
    <description>sequence: minOccurs = a</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEa006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEa007" origin="Microsoft">
    <description>sequence: minOccurs = ?</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEa007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEa008" origin="Microsoft">
    <description>sequence: minOccurs = &amp;</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEa008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEb001" origin="Microsoft">
    <description>sequence: maxOccurs = empty</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEb001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEb002" origin="Microsoft">
    <description>sequence: maxOccurs = -1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEb002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEb003" origin="Microsoft">
    <description>sequence: maxOccurs = *</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEb003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEb004" origin="Microsoft">
    <description>sequence: maxOccurs = unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEb004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEb004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgEb005" origin="Microsoft">
    <description>sequence: maxOccurs = 8</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEb005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEb005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgEb006" origin="Microsoft">
    <description>sequence: maxOccurs = a</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEb006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEb007" origin="Microsoft">
    <description>sequence: maxOccurs = ?</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEb007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgEb008" origin="Microsoft">
    <description>sequence: maxOccurs = &amp;</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgEb008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgF001" origin="Microsoft">
    <description>sequence: with no child node</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF002" origin="Microsoft">
    <description>sequence: with one annotation only</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF003" origin="Microsoft">
    <description>sequence: with two annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgF004" origin="Microsoft">
    <description>sequence: with children annotation, element</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF005" origin="Microsoft">
    <description>sequence: with children annotation, group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF006" origin="Microsoft">
    <description>sequence: with children annotation, choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF007" origin="Microsoft">
    <description>sequence: with children annotation, sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF008" origin="Microsoft">
    <description>sequence: with children annotation, any</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF009" origin="Microsoft">
    <description>sequence: with children annotation, element, group, choice, sequence, any</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF010" origin="Microsoft">
    <description>sequence: with children element, any, sequence, choice, group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF011" origin="Microsoft">
    <description>sequence: with children group, any, choice, element, sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF012" origin="Microsoft">
    <description>sequence: with children choice, any, group, sequence, element</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF013" origin="Microsoft">
    <description>sequence: with children sequence, group, choice, element, any</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF014" origin="Microsoft">
    <description>sequence: with children any, sequence, group, element, choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF015" origin="Microsoft">
    <description>sequence: with children 4 elements, 4 groups</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF016" origin="Microsoft">
    <description>sequence: with children 4 groups, 4 choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF017" origin="Microsoft">
    <description>sequence: with children 4 choice, 4 sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF018" origin="Microsoft">
    <description>sequence: with children 4 sequence, 4 any</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF019" origin="Microsoft">
    <description>sequence: with children 4 any, 4 elements</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgF020" origin="Microsoft">
    <description>sequence: with children element, annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgF021" origin="Microsoft">
    <description>sequence: with children group, annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgF022" origin="Microsoft">
    <description>sequence: with children choice, annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgF023" origin="Microsoft">
    <description>sequence: with children sequence, annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgF023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgG001" origin="Microsoft">
    <description>sequence: check that minOccurs default is 1, minOccurs=absent, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG002" origin="Microsoft">
    <description>sequence: check that maxOccurs default is 1, minOccurs=2, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgG003" origin="Microsoft">
    <description>sequence: check that minOccurs default is 1, elements in instant XML = 0, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG004" origin="Microsoft">
    <description>sequence: check that minOccurs default is 1, elements in instant XML = 1, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG005" origin="Microsoft">
    <description>sequence: check that maxOccurs default is 1, elements in instant XML = 2, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG006" origin="Microsoft">
    <description>sequence: elements in instant XML=0, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG007" origin="Microsoft">
    <description>sequence: elements in instant XML=1, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG008" origin="Microsoft">
    <description>sequence: elements in instant XML=2, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG009" origin="Microsoft">
    <description>sequence: elements in instant XML=0, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG010" origin="Microsoft">
    <description>sequence: elements in instant XML=1, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG011" origin="Microsoft">
    <description>sequence: elements in instant XML=2, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG012" origin="Microsoft">
    <description>sequence: elements in instant XML=0, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG013" origin="Microsoft">
    <description>sequence: elements in instant XML=1, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG014" origin="Microsoft">
    <description>sequence: elements in instant XML=0, minOccurs=0, maxOccurs=999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG015" origin="Microsoft">
    <description>sequence: elements in instant XML=0, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG016" origin="Microsoft">
    <description>sequence: elements in instant XML=1, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG017" origin="Microsoft">
    <description>sequence: elements in instant XML=2, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG017.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG018" origin="Microsoft">
    <description>sequence: elements in instant XML=0, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG018.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG019" origin="Microsoft">
    <description>sequence: elements in instant XML=1, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG020" origin="Microsoft">
    <description>sequence: elements in instant XML=2, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG020.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG021" origin="Microsoft">
    <description>sequence: elements in instant XML=0, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG021.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG022" origin="Microsoft">
    <description>sequence: elements in instant XML=1, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG023" origin="Microsoft">
    <description>sequence: elements in instant XML=2, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG024" origin="Microsoft">
    <description>sequence: elements in instant XML=3, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG024.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgG025" origin="Microsoft">
    <description>sequence: unbounded is not allowed as minOccurs, minOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgG026" origin="Microsoft">
    <description>sequence: elements in instant XML=3, maxOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgG027" origin="Microsoft">
    <description>sequence: minOccurs=2, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgG028" origin="Microsoft">
    <description>sequence: minOccurs=1, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgG029" origin="Microsoft">
    <description>sequence: minOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgG030" origin="Microsoft">
    <description>sequence: maxOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgG030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH001" origin="Microsoft">
    <description>choice: id, id='foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgH002" origin="Microsoft">
    <description>choice: id, id=''</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH003" origin="Microsoft">
    <description>choice: id, id='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH004" origin="Microsoft">
    <description>choice: id, id='-1'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH005" origin="Microsoft">
    <description>choice: id, id='a:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH006" origin="Microsoft">
    <description>choice: id, two 'choice' with same id, one from complexType, one from restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH007" origin="Microsoft">
    <description>choice: id, two 'choice' with same id, one from complexType, one from extension</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH008" origin="Microsoft">
    <description>choice: id, two 'choice' with same id, one from complexType, one from group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH009" origin="Microsoft">
    <description>choice: id, two 'choice' with same id, one from restriction, one from extension</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH010" origin="Microsoft">
    <description>choice: id, two 'choice' with same id, one from restriction, one from group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH011" origin="Microsoft">
    <description>choice: id, two 'choice' with same id, one from extension, one from group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH012" origin="Microsoft">
    <description>choice: id, two 'choice' with same id, both in complexType ( complextype, has an 'all', and a 'group'), the 'group' has an 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgH013" origin="Microsoft">
    <description>choice: with parent complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgH014" origin="Microsoft">
    <description>choice: with parent restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgH015" origin="Microsoft">
    <description>choice: with parent extension</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgH016" origin="Microsoft">
    <description>choice: with parent group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgH017" origin="Microsoft">
    <description>choice: with parent choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgH018" origin="Microsoft">
    <description>choice: with parent sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgH018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgHa001" origin="Microsoft">
    <description>choice: minOccurs = empty</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHa001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHa002" origin="Microsoft">
    <description>choice: minOccurs = -1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHa002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHa003" origin="Microsoft">
    <description>choice: minOccurs = *</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHa003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHa004" origin="Microsoft">
    <description>choice: minOccurs = unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHa004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHa005" origin="Microsoft">
    <description>choice: minOccurs = 9999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHa005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHa006" origin="Microsoft">
    <description>choice: minOccurs = a</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHa006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHa007" origin="Microsoft">
    <description>choice: minOccurs = ?</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHa007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHa008" origin="Microsoft">
    <description>choice: minOccurs = &amp;</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHa008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHb001" origin="Microsoft">
    <description>choice: maxOccurs = empty</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHb001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHb002" origin="Microsoft">
    <description>choice: maxOccurs = -1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHb002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHb003" origin="Microsoft">
    <description>choice: maxOccurs = *</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHb003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHb004" origin="Microsoft">
    <description>choice: maxOccurs = unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHb004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHb004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgHb005" origin="Microsoft">
    <description>choice: maxOccurs = 5</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHb005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHb005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgHb006" origin="Microsoft">
    <description>choice: maxOccurs = a</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHb006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHb007" origin="Microsoft">
    <description>choice: maxOccurs = ?</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHb007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgHb008" origin="Microsoft">
    <description>choice: maxOccurs = &amp;</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgHb008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgI001" origin="Microsoft">
    <description>choice: with no child node</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI002" origin="Microsoft">
    <description>choice: with one annotation only</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI003" origin="Microsoft">
    <description>choice: with two annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgI004" origin="Microsoft">
    <description>choice: with children annotation, element</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI005" origin="Microsoft">
    <description>choice: with children annotation, group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI006" origin="Microsoft">
    <description>choice: with children annotation, choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI007" origin="Microsoft">
    <description>choice: with children annotation, sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI008" origin="Microsoft">
    <description>choice: with children annotation, any</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI009" origin="Microsoft">
    <description>choice: with children annotation, element, group, choice, sequence, any</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI010" origin="Microsoft">
    <description>choice: with children element, any, sequence, choice, group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI011" origin="Microsoft">
    <description>choice: with children group, any, choice, element, sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI012" origin="Microsoft">
    <description>choice: with children choice, any, group, sequence, element</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI013" origin="Microsoft">
    <description>choice: with children sequence, group, choice, element, any</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI014" origin="Microsoft">
    <description>choice: with children any, sequence, group, element, choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI015" origin="Microsoft">
    <description>choice: with children 4 elements, 4 groups</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI016" origin="Microsoft">
    <description>choice: with children 4 groups, 4 choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI017" origin="Microsoft">
    <description>choice: with children 4 choice, 4 sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI018" origin="Microsoft">
    <description>choice: with children 4 sequence, 4 any</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI019" origin="Microsoft">
    <description>choice: with children 4 any, 4 elements</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgI020" origin="Microsoft">
    <description>choice: with children element, annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgI021" origin="Microsoft">
    <description>choice: with children group, annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgI022" origin="Microsoft">
    <description>choice: with children choice, annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgI023" origin="Microsoft">
    <description>choice: with children sequence, annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgI023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgJ001" origin="Microsoft">
    <description>choice: check that minOccurs default is 1, minOccurs=absent, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ002" origin="Microsoft">
    <description>choice: check that maxOccurs default is 1, minOccurs=2, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgJ003" origin="Microsoft">
    <description>choice: check that minOccurs default is 1, elements in instant XML = 0, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ004" origin="Microsoft">
    <description>choice: check that minOccurs default is 1, elements in instant XML = 1, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ005" origin="Microsoft">
    <description>choice: check that maxOccurs default is 1, elements in instant XML = 2, minOccurs=absent, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ006" origin="Microsoft">
    <description>choice: elements in instant XML=0, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ007" origin="Microsoft">
    <description>choice: elements in instant XML=1, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ008" origin="Microsoft">
    <description>choice: elements in instant XML=2, minOccurs=0, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ009" origin="Microsoft">
    <description>choice: elements in instant XML=0, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ010" origin="Microsoft">
    <description>choice: elements in instant XML=1, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ011" origin="Microsoft">
    <description>choice: elements in instant XML=2, minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ012" origin="Microsoft">
    <description>choice: elements in instant XML=0, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ013" origin="Microsoft">
    <description>choice: elements in instant XML=1, minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ014" origin="Microsoft">
    <description>choice: elements in instant XML=0, minOccurs=0, maxOccurs=999999999</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ015" origin="Microsoft">
    <description>choice: elements in instant XML=0, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ016" origin="Microsoft">
    <description>choice: elements in instant XML=1, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ017" origin="Microsoft">
    <description>choice: elements in instant XML=2, minOccurs=1, maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ017.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ018" origin="Microsoft">
    <description>choice: elements in instant XML=0, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ018.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ019" origin="Microsoft">
    <description>choice: elements in instant XML=1, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ020" origin="Microsoft">
    <description>choice: elements in instant XML=2, minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ020.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ021" origin="Microsoft">
    <description>choice: elements in instant XML=0, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ021.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ022" origin="Microsoft">
    <description>choice: elements in instant XML=1, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ023" origin="Microsoft">
    <description>choice: elements in instant XML=2, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ024" origin="Microsoft">
    <description>choice: elements in instant XML=3, minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ024.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgJ025" origin="Microsoft">
    <description>choice: unbounded is not allowed as minOccurs, minOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgJ026" origin="Microsoft">
    <description>choice: elements in instant XML=3, maxOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgJ027" origin="Microsoft">
    <description>choice: minOccurs=2, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgJ028" origin="Microsoft">
    <description>choice: minOccurs=1, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgJ029" origin="Microsoft">
    <description>choice: minOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgJ030" origin="Microsoft">
    <description>choice: maxOccurs=-1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgJ030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgK001" origin="Microsoft">
    <description>sequence: with NO elements (max=min=absent), 0 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgK002" origin="Microsoft">
    <description>sequence: with NO elements, 1 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgK003" origin="Microsoft">
    <description>sequence: with 1 elements, 0 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgK004" origin="Microsoft">
    <description>sequence: with 1 elements, 1 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgK005" origin="Microsoft">
    <description>sequence: with 1 elements, 2 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgK006" origin="Microsoft">
    <description>sequence: with 2 elements, only the 1st element is specified in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgK007" origin="Microsoft">
    <description>sequence: with 2 elements, the elements are not in the defined order</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgK008" origin="Microsoft">
    <description>sequence: with 2 elements, 3 elements is specified in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgK009" origin="Microsoft">
    <description>sequence: with 5 elements, all elements appeared and are in defined order</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgK010" origin="Microsoft">
    <description>sequence: with 5 elements, the last 2 elements are not in the defined order</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgK010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgL001" origin="Microsoft">
    <description>choice: with NO elements (max=min=absent), 0 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgL002" origin="Microsoft">
    <description>choice: with NO elements, 1 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgL003" origin="Microsoft">
    <description>choice: with 1 elements, 0 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgL004" origin="Microsoft">
    <description>choice: with 1 elements, 1 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgL005" origin="Microsoft">
    <description>choice: with 1 elements, 2 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgL006" origin="Microsoft">
    <description>choice: with 2 elements, 1 element in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgL007" origin="Microsoft">
    <description>choice: with 2 elements, 2 element in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgL008" origin="Microsoft">
    <description>choice: with 5 elements, 0 element in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgL009" origin="Microsoft">
    <description>choice: with 5 elements, 1 element in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgL010" origin="Microsoft">
    <description>choice: with 5 elements, an undefined element in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgL010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgM002" origin="Microsoft">
    <description>all: with no elements 1 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgM003" origin="Microsoft">
    <description>all: with 1 elements 0 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgM004" origin="Microsoft">
    <description>all: with 1 elements 1 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgM005" origin="Microsoft">
    <description>all: with 1 elements 2 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgM006" origin="Microsoft">
    <description>all: with 2 elements 0 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgM007" origin="Microsoft">
    <description>all: with 2 elements 1 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgM008" origin="Microsoft">
    <description>all: with 2 elements 2 element is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgM009" origin="Microsoft">
    <description>all: with 2 elements 2 element in different order is in the instant XML doc</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgM010" origin="Microsoft">
    <description>all: with 2 elements instant doc has all the element plus some other element from other namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgM011" origin="Microsoft">
    <description>all: with 5 elements instant doc has all the element in reverse order</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgM012" origin="Microsoft">
    <description>all: with 2 elements instant doc has an element that is not local or global to the declaring element</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgM013" origin="Microsoft">
    <description>all: with 2 elements instant doc has a global element</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgM014" origin="Microsoft">
    <description>all: with 2 elements instant doc has the same element twice.</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgM014.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN001" origin="Microsoft">
    <description>parent is sequence, more than one child sequences, each of them again have more than one sequence child node, instant XML conform to the declaration</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgN002" origin="Microsoft">
    <description>parent is sequence, more than one child sequences, each of them again have more than one sequence child node, instant XML doesn't conform to the declaration</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN003" origin="Microsoft">
    <description>parent is sequence, the instant XML has element that are of same local name but different namespace URI than in the element decl</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN004" origin="Microsoft">
    <description>parent is sequence, has 2 sequence as child ( no elements ), in the instant XML document, the sequence appear as (F1, E1, E2, F2)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN005" origin="Microsoft">
    <description>parent is sequence, has 2 sequence as child (E1,E2) (F1,F2), in the instant XML document, there is no element specified</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgN006" origin="Microsoft">
    <description>parent is sequence, has 2 sequence as child (E1,E2) (F1,F2), in the instant XML document, the sequence appear as (E1)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN007" origin="Microsoft">
    <description>parent is sequence, has 2 sequence as child (E1,E2) (F1,F2), in the instant XML document, the sequence appear as (E1, F1, E2, F2)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN008" origin="Microsoft">
    <description>parent is sequence, has 2 sequence as child (E1,E2) (F1,F2), in the instant XML document, the sequence appear as (E1, F2, F1)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN009" origin="Microsoft">
    <description>parent is sequence, has 2 sequence as child (E1,E2) (F1,F2), in the instant XML document, the sequence appear as (F1, F2, E1, E2)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN010" origin="Microsoft">
    <description>parent is sequence, has 2 sequence as child (E1,E2) (F1,F2), in the instant XML document, the sequence appear as (F1, E1, E2, F2)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN011" origin="Microsoft">
    <description>parent is sequence, has 2 sequence (E1, E2) (F1,F2), and 2 choice (C1 | C2) (C1 | C2), in the instant XML document ( E1, F2, C2, D2)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN012" origin="Microsoft">
    <description>parent is sequence, has 2 sequence (E1, E2) (F1,F2), and 2 choice (C1 | C2) (D1 | D2), in the instant XML document ( E1, E2, F1, F2, C1, D1)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgN013" origin="Microsoft">
    <description>parent is sequence, has 2 sequence (E1, E2) (F1,F2), and 2 choice (C1 | C2) (D1 | D2), in the instant XML document ( C1, D1)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN014" origin="Microsoft">
    <description>parent is sequence, has 2 sequence (E1, E2) (F1,F2), and 2 choice (C1 | C2) (D1 | D2), in the instant XML document ( C1, F1, D1)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN014.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN015" origin="Microsoft">
    <description>parent is sequence, has 2 sequence (E1, E2) (F1,F2), and 2 choice (C1 | C2) (D1 | D2), in the instant XML document (D1)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgN016" origin="Microsoft">
    <description>parent is sequence, has 2 sequence (E1, E2) (F1,F2), and 2 choice (C1 | C2) (D1 | D2), in the instant XML document ( no element )</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgN016.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="mgO001" origin="Microsoft">
    <description>all has particle with minOccurs=maxOccur = 0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO002" origin="Microsoft">
    <description>all has particle with minOccurs=maxOccur = 1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO003" origin="Microsoft">
    <description>all has particle with minOccurs=0, maxOccur = 2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO004" origin="Microsoft">
    <description>all appear under 'complexType', which is part of a complexType, and particles in all has maxOccurs=minOccurs (0 | 1)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO005" origin="Microsoft">
    <description>group' with 'all', appear under 'schema', which is part of a complexType and has maxOccurs=minOccurs (0 | 1)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO006" origin="Microsoft">
    <description>group' with 'all', appear under 'redefine', which is part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO007" origin="Microsoft">
    <description>group' with 'all', appear under 'extension', whiche is part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO008" origin="Microsoft">
    <description>group' with 'all', appear under 'restriction', which is part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO009" origin="Microsoft">
    <description>group' with 'all', appear under 'sequence' which is part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO010" origin="Microsoft">
    <description>group' with 'all', appear under 'choice' which is part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO011" origin="Microsoft">
    <description>group' with 'all', appear under 'complexType', whiche is part of a complexType, and particles in all has maxOccurs=minOccurs (absent)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO012" origin="Microsoft">
    <description>group' with 'all', appear under 'schema', whiche is part of a complexType, and particles in all has maxOccurs=minOccurs (absent)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO013" origin="Microsoft">
    <description>group' with 'all', appear under 'redefine', whiche is part of a complexType, and particles in all has maxOccurs=minOccurs (absent)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO014" origin="Microsoft">
    <description>group' with 'all', appear under 'extension', whiche is part of a complexType, and particles in all has maxOccurs=minOccurs (absent)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO015" origin="Microsoft">
    <description>group' with 'all', appear under 'restriction', whiche is part of a complexType, and particles in all has maxOccurs=minOccurs (absent)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO016" origin="Microsoft">
    <description>group' with 'all', appear under 'sequence' with maxOccurs=minOccurs=1, , whiche is part of a complexType, and particles in all has maxOccurs=minOccurs (absent)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO017" origin="Microsoft">
    <description>group' with 'all', appear under 'choice' with maxOccurs=minOccurs=1 , whiche is part of a complexType, and particles in all has maxOccurs=minOccurs (absent)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO018" origin="Microsoft">
    <description>'all', appear under 'complexType' has minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO019" origin="Microsoft">
    <description>group' with 'all', appear under 'schema', all has minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO020" origin="Microsoft">
    <description>group' with 'all', appear under 'redefine', whiche is part of a complexType, and particles in all has minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO021" origin="Microsoft">
    <description>'all', appear under 'extension', which is part of a complexType, and has minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO022" origin="Microsoft">
    <description>'all', appear under 'restriction', which is part of a complexType, and has minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO023" origin="Microsoft">
    <description>group' with 'all', appear under 'sequence' with maxOccurs=minOccurs=1, , whiche is part of a complexType, and particles in all has minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO024" origin="Microsoft">
    <description>group' with 'all', appear under 'choice' with maxOccurs=minOccurs=1 , whiche is part of a complexType, and particles in all has minOccurs=0, maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO025" origin="Microsoft">
    <description>group' with 'all', appear under 'complexType', whiche is part of a complexType, and particles in all has minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO026" origin="Microsoft">
    <description>group' with 'all', appear under 'schema', whiche is part of a complexType, and particles in all has minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO027" origin="Microsoft">
    <description>group' with 'all', appear under 'redefine', which is part of a complexType, and particles in all has minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO028" origin="Microsoft">
    <description>'all', appear under 'extension', which is part of a complexType, and has minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO028.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO029" origin="Microsoft">
    <description>'all', appear under 'restriction', which is part of a complexType, and has minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO030" origin="Microsoft">
    <description>'all', and has minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO031" origin="Microsoft">
    <description>group' with 'all', appear under 'choice' with maxOccurs=minOccurs=1 , which is part of a complexType, and group ref has minOccurs=0, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO032" origin="Microsoft">
    <description>group' with 'all', appear under 'complexType', whiche is part of a complexType, and particles in all has minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO032.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO033" origin="Microsoft">
    <description>group' with 'all', appear under 'schema', whiche is part of a complexType, and particles in all has minOccurs=1, maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO033.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgO034" origin="Microsoft">
    <description>group' with 'all', appear under 'redefine', which is part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO035" origin="Microsoft">
    <description>group' with 'all', appear under 'extension', which is part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO035.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO036" origin="Microsoft">
    <description>group' with 'all', appear under 'restriction', whiche is part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO036.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO036.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO037" origin="Microsoft">
    <description>group' with 'all', appear under 'sequence' with maxOccurs=minOccurs=1, which is part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO037.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgO038" origin="Microsoft">
    <description>group' with 'all', appear under 'choice' with maxOccurs=minOccurs=1 , which is part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO038.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgO038.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgP039" origin="Microsoft">
    <description>'all', appear under 'complexType', and has minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP039.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP040" origin="Microsoft">
    <description>group' with 'all', appear under 'schema', whiche is part of a complexType, and particles in all has minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP040.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP041" origin="Microsoft">
    <description>group' with 'all', appear under 'redefine', whiche is part of a complexType, and particles in all has minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP041.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP042" origin="Microsoft">
    <description>'all', appear under 'extension', which is part of a complexType, and has minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP042.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP043" origin="Microsoft">
    <description>group' with 'all', appear under 'restriction', whiche is part of a complexType, and particles in all has minOccurs=1, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP043.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP049" origin="Microsoft">
    <description>group' with 'all', appear under 'schema', whiche is part of a complexType, and particles in all has minOccurs=2, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP049.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP050" origin="Microsoft">
    <description>group' with 'all', appear under 'redefine', whiche is part of a complexType, and particles in all has minOccurs=2, maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP050.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP055" origin="Microsoft">
    <description>group' with 'all', appear under 'sequence' with maxOccurs=0, minOccurs=1,</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP055.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP056" origin="Microsoft">
    <description>group' with 'all', appear under 'choice' with maxOccurs=0, minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP056.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP057" origin="Microsoft">
    <description>group' with 'all', appear under 'schema', whiche is NOT part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP057.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP058" origin="Microsoft">
    <description>group' with 'all', appear under 'redefine', whiche is NOT part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP058.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP059" origin="Microsoft">
    <description>group' with 'all', appear under 'extension', whiche is NOT part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP059.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP060" origin="Microsoft">
    <description>group' with 'all', appear under 'restriction', whiche is NOT part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP060.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP061" origin="Microsoft">
    <description>group' with 'all', appear under 'sequence' with maxOccurs=minOccurs=1 , whiche is NOT part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP061.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgP062" origin="Microsoft">
    <description>group' with 'all', appear under 'choice' with maxOccurs=minOccurs=1 , whiche is NOT part of a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgP062.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgQ001" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), both under all</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgQ002" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), both under sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ003" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), both under choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ004" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'all', one under 'sequence' inside 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgQ005" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'all', one under 'choice' inside 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgQ006" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'sequence', one under 'choice' inside 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ007" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'sequence', one under 'sequence' inside 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ008" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'choice', one under 'choice' inside 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ009" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'choice', one under 'sequence' inside 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ010" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'all', one under 'sequence' inside 'sequence' of 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgQ011" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'all', one under 'choice' inside 'sequence' of 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgQ012" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'all', one under 'sequence' inside 'choice' of 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgQ013" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'all', one under 'choice' inside 'choice' of 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgQ014" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'sequence', one under 'sequence' inside 'sequence' of 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ015" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'sequence', one under 'choice' inside 'sequence' of 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ016" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'sequence', one under 'sequence' inside 'choice' of 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ017" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'sequence', one under 'choice' inside 'choice' of 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ018" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'choice', one under 'sequence' inside 'sequence' of 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ019" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'choice', one under 'choice' inside 'sequence' of 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ020" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'choice', one under 'sequence' inside 'choice' of 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="mgQ021" origin="Microsoft">
    <description>2 particles with idendical element declarations (same type), one under 'choice', one is from sequence, model is non-deterministic</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgQ021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR001" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), both under all</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR002" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), both under sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR003" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), both under choice</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR004" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'all', one under 'sequence' inside 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR005" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'all', one under 'choice' inside 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR006" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'sequence', one under 'choice' inside 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR007" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'sequence', one under 'sequence' inside 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR008" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'choice', one under 'choice' inside 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR009" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'choice', one under 'sequence' inside 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR010" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'all', one under 'sequence' inside 'sequence' of 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR011" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'all', one under 'choice' inside 'sequence' of 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR012" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'all', one under 'sequence' inside 'choice' of 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR013" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'all', one under 'choice' inside 'choice' of 'all'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR014" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'sequence', one under 'sequence' inside 'sequence' of 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR015" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'sequence', one under 'choice' inside 'sequence' of 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR016" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'sequence', one under 'sequence' inside 'choice' of 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR017" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'sequence', one under 'choice' inside 'choice' of 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR018" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'choice', one under 'sequence' inside 'sequence' of 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR019" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'choice', one under 'choice' inside 'sequence' of 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR020" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'choice', one under 'sequence' inside 'choice' of 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR021" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'choice', one under 'choice' inside 'sequence' of 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgR022" origin="Microsoft">
    <description>2 particles with idendical element declarations (different type), one under 'choice', one is from substitution group</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgR022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgS002" origin="Microsoft">
    <description>sequence must be deterministic:(a (bc | bd))</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgS002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgS003" origin="Microsoft">
    <description>sequence must be deterministic:(a | ab)</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgS003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgS004" origin="Microsoft">
    <description>sequence must be deterministic:((ab) | ( a | b))</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgS004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="mgS005" origin="Microsoft">
    <description>sequence must be deterministic:((a, b) | ( ab | b))</description>
    <files>
      <file tsDir="msxsdtest" folder="ModelGroups" fileName="mgS005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesA001" origin="Microsoft">
    <description>The {term} is a model 'all' with child content=(a), minOccurs=1, instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesA002" origin="Microsoft">
    <description>The {term} is a model 'all' with child content=(a), minOccurs=1, instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesA003" origin="Microsoft">
    <description>The {term} is a model 'all' with child content=(a), minOccurs=1, instant XML has (a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesA004" origin="Microsoft">
    <description>The {term} is a model 'sequence' with child content=(a), minOccurs=2, instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesA005" origin="Microsoft">
    <description>The {term} is a model 'sequence' with child content=(a), minOccurs=2, instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesA006" origin="Microsoft">
    <description>The {term} is a model 'sequence' with child content=(a), minOccurs=2, instant XML has (a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesA007" origin="Microsoft">
    <description>The {term} is a model 'sequence' with child content=(a), minOccurs=2, instant XML has (a,a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesA008" origin="Microsoft">
    <description>The {term} is a model 'choice' with child content=(a), minOccurs=2, instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesA009" origin="Microsoft">
    <description>The {term} is a model 'choice' with child content=(a), minOccurs=2, instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesA010" origin="Microsoft">
    <description>The {term} is a model 'choice' with child content=(a), minOccurs=2, instant XML has (a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesA011" origin="Microsoft">
    <description>The {term} is a model 'choice' with child content=(a), minOccurs=2, instant XML has (a,a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesA012" origin="Microsoft">
    <description>The {term} is 'any' with child content=(a), minOccurs=2, instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesA013" origin="Microsoft">
    <description>The {term} is 'any' with child content=(a), minOccurs=2, instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesA014" origin="Microsoft">
    <description>The {term} is 'any' with child content=(a), minOccurs=2, instant XML has (a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesA015" origin="Microsoft">
    <description>The {term} is 'any' with child content=(a), minOccurs=2, instant XML has (a,a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesA015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesB001" origin="Microsoft">
    <description>The {term} is a model 'all' with child content=(a), maxOccurs=1, instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesB002" origin="Microsoft">
    <description>The {term} is a model 'all' with child content=(a), maxOccurs=1, instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesB003" origin="Microsoft">
    <description>The {term} is a model 'all' with child content=(a), maxOccurs=1, instant XML has (a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesB004" origin="Microsoft">
    <description>The {term} is a model 'sequence' with child content=(a), maxOccurs=2, instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesB005" origin="Microsoft">
    <description>The {term} is a model 'sequence' with child content=(a), maxOccurs=2, instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesB006" origin="Microsoft">
    <description>The {term} is a model 'sequence' with child content=(a), maxOccurs=2, instant XML has (a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesB007" origin="Microsoft">
    <description>The {term} is a model 'sequence' with child content=(a), maxOccurs=2, instant XML has (a,a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesB008" origin="Microsoft">
    <description>The {term} is a model 'choice' with child content=(a), maxOccurs=2, instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesB009" origin="Microsoft">
    <description>The {term} is a model 'choice' with child content=(a), maxOccurs=2, instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesB010" origin="Microsoft">
    <description>The {term} is a model 'choice' with child content=(a), maxOccurs=2, instant XML has (a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesB011" origin="Microsoft">
    <description>The {term} is a model 'choice' with child content=(a), maxOccurs=2, instant XML has (a,a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesB012" origin="Microsoft">
    <description>The {term} is 'any' with child content=(a), maxOccurs=2, instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesB013" origin="Microsoft">
    <description>The {term} is 'any' with child content=(a), maxOccurs=2, instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesB014" origin="Microsoft">
    <description>The {term} is 'any' with child content=(a), maxOccurs=2, instant XML has (a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesB015" origin="Microsoft">
    <description>The {term} is 'any' with child content=(a), maxOccurs=2, instant XML has (a,a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesB015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC001" origin="Microsoft">
    <description>The {term} is 'any' with namespace=absent (default to ##any), instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC002" origin="Microsoft">
    <description>The {term} is 'any' with namespace=absent (default to ##any), instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC003" origin="Microsoft">
    <description>The {term} is 'any' with namespace=absent (default to ##any), instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC004" origin="Microsoft">
    <description>The {term} is 'any' with namespace=##any, instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC005" origin="Microsoft">
    <description>The {term} is 'any' with namespace=##any, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC006" origin="Microsoft">
    <description>The {term} is 'any' with namespace=##any, instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC007" origin="Microsoft">
    <description>The {term} is 'any' with namespace=##other, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC008" origin="Microsoft">
    <description>The {term} is 'any' with namespace=##other, instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC009" origin="Microsoft">
    <description>The {term} is 'any' with namespace=##other, instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC010" origin="Microsoft">
    <description>The {term} is 'any' with namespace=##other, instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC011" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'http://xslt', instant element's namespace is 'http://xslt'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC012" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'http://xslt', instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC013" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'http://xslt', instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC014" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'http://xslt', instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC014.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC015" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar', instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC016" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar', instant element's namespace is 'bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC017" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar', instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC017.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC018" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar', instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC018.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC019" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar', instant element's namespace is 'xyz'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC020" origin="Microsoft">
    <description>The {term} is 'any' with namespace= ##targetNamespace, instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC020.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC021" origin="Microsoft">
    <description>The {term} is 'any' with namespace= ##targetNamespace, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC022" origin="Microsoft">
    <description>The {term} is 'any' with namespace= ##targetNamespace, instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC022.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC023" origin="Microsoft">
    <description>The {term} is 'any' with namespace= ##targetNamespace, instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC023.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC024" origin="Microsoft">
    <description>The {term} is 'any' with namespace= ##local, instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC024.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC025" origin="Microsoft">
    <description>The {term} is 'any' with namespace= ##local, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC025.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC026" origin="Microsoft">
    <description>The {term} is 'any' with namespace= ##local, instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC026.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC027" origin="Microsoft">
    <description>The {term} is 'any' with namespace= ##local, instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC028" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar ##targetNamespace', instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC028.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC029" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar ##targetNamespace', instant element's namespace is 'bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC030" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar ##targetNamespace', instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC031" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar ##targetNamespace', instant element's namespace is 'xyz'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC031.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC032" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar ##targetNamespace', instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC032.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC033" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo bar ##targetNamespace', instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC033.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC034" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##local', instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC035" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##local', instant element's namespace is 'bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC035.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC036" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##local', instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC036.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC036.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC037" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##local', instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC037.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC038" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##local', instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC038.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC038.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC039" origin="Microsoft">
    <description>The {term} is 'any' with namespace= '##targetNamespace ##local', instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC039.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC039.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC040" origin="Microsoft">
    <description>The {term} is 'any' with namespace= '##targetNamespace ##local', instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC040.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC040.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC041" origin="Microsoft">
    <description>The {term} is 'any' with namespace= '##targetNamespace ##local', instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC041.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC041.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC042" origin="Microsoft">
    <description>The {term} is 'any' with namespace= '##targetNamespace ##local', instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC042.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC042.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC043" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##targetNamespace bar ##local', instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC043.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC043.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC044" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##targetNamespace bar ##local', instant element's namespace is 'bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC044.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC044.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC045" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##targetNamespace bar ##local', instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC045.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC045.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC046" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##targetNamespace bar ##local', instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC046.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC046.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesC047" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##targetNamespace bar ##local', instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC047.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC047.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesC048" origin="Microsoft">
    <description>The {term} is 'any' with namespace= 'foo ##targetNamespace bar ##local', instant element's namespace is 'xyz'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC048.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesC048.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDa001" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=absent, instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDa002" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=absent, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDa003" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=absent, instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDa004" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=absent, instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDa005" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=absent, instant element's namespace is 'targetNamespace', the local name is not the same</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDa006" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=FALSE, instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDa007" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=FALSE, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDa008" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=FALSE, instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDa009" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=FALSE, instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDa010" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=FALSE, instant element's namespace is 'targetNamespace', the local name is not the same</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDa011" origin="Microsoft">
    <description>The {term} is 'element' with scope=local, abstract=TRUE, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDa011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDb001" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=absent, instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDb002" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=absent, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDb003" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=absent, instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDb004" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=absent, instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDb005" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=absent, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDb006" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=FALSE, instant element's namespace is targetNamespace of an imported XSD which is different from the main xsd's targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDb007" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=FALSE, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDb008" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=FALSE, instant element's namespace is unqualified</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDb009" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=FALSE, instant element's namespace is 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDb010" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=FALSE, instant element's namespace is 'targetNamespace', the local name is not the same</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb010.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDb011" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=TRUE, instant element's namespace is 'targetNamespace'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDb011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesDc001" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=FALSE, block =absent, instant element name resolved to element declared as a valid substitution group</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDc002" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=TRUE, block =extension, instant element name resolved to element declared as a valid substitution group</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDc003" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=TRUE, block =restriction, instant element name resolved to element declared as a valid substitution group</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDc004" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=TRUE, block =substitution', instant element name resolved to element declared as a valid substitution group</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDc005" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=TRUE, block =#all, instant element name resolved to element declared as a valid substitution group</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDc006" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=TRUE, block =extension substitution, instant element name resolved to element declared as a valid substitution group</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDc007" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=TRUE, block =extension restriction, instant element name resolved to element declared as a valid substitution group</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDc008" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=TRUE, block =restriction substitution, instant element name resolved to element declared as a valid substitution group</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesDc009" origin="Microsoft">
    <description>The {term} is 'element' with scope=global, abstract=TRUE, block =extension substitution restriction, instant element name resolved to element declared as a valid substitution group</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesDc009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEa001" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=absent, content=all (a,b) with minOccurs='0', and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEa002" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=absent, content=all (a,b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa003" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=absent, content=all (a,b), and the instant XML has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEa004" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=absent, content=all (a,b), and the instant XML has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEa005" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=absent, content=all (a,b), and the instant XML has (a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa006" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=absent, content=all (a,b), and the instant XML has (a,b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa007" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=absent, content=all (a,b), and the instant XML has ( x)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa008" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=all (a,b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEa009" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=all (a,b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa010" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=all (a,b), and the instant XML has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEa011" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=all (a,b), and the instant XML has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEa012" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=all (a,b), and the instant XML has (a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa013" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=all (a,b), and the instant XML has (a,b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa014" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=all (a,b), and the instant XML has ( x)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa014.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa015" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=all (a,b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEa016" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=all (a,b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa016.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa017" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=all (a,b), and the instant XML has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEa018" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=all (a,b), and the instant XML has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEa019" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=all (a,b), and the instant XML has (a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa020" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=all (a,b), and the instant XML has (a,b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa020.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa021" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=all (a,b), and the instant XML has ( x)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa021.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEa022" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=all (a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesEa023" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=absent, content=all (a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesEa024" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=0, content=all (a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesEa025" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=2, content=all (a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEa025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesEb001" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=sequence (a,b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEb002" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=sequence (a,b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb003" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=sequence (a,b), and the instant XML has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEb004" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=sequence (a,b), and the instant XML has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb005" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=sequence (a,b), and the instant XML has (a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb006" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=sequence (a,b), and the instant XML has (a,b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb007" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=sequence (a,b), and the instant XML has ( x)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb008" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=sequence (a,b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb009" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=sequence (a,b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb010" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=sequence (a,b), and the instant XML has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEb011" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=sequence (a,b), and the instant XML has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb012" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=sequence (a,b), and the instant XML has (a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb012.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb013" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=sequence (a,b), and the instant XML has (a,b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb014" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=sequence (a,b), and the instant XML has ( x )</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb014.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb015" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=absent, content=sequence (a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesEb016" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=0, content=sequence (a,b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEb017" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=sequence (a,b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb017.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb018" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=sequence (a,b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb018.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb019" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=sequence (a,b), and the instant XML has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEb020" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=sequence (a,b), and the instant XML has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb020.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb021" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=sequence (a,b), and the instant XML has (a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb021.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb022" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=sequence (a,b), and the instant XML has (a,b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb022.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb023" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=sequence (a,b), and the instant XML has ( x )</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb023.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb024" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=sequence (a,b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb024.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb025" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=sequence (a,b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb025.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb026" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=sequence (a,b), and the instant XML has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEb027" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=sequence (a,b), and the instant XML has (a,b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEb028" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=sequence (a,b), and the instant XML has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb028.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb029" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=sequence (a,b), and the instant XML has (a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb029.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb030" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=sequence (a,b), and the instant XML has (a,b,a,b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb030.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb031" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=sequence (a,b), and the instant XML has ( x )</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb031.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb032" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=sequence (a,b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb032.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb033" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=sequence (a,b), and the instant XML has (a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb033.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb034" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=sequence (a,b), and the instant XML has (b,a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb034.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb035" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=sequence (a,b), and the instant XML has (a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb035.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb036" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=sequence (a,b), and the instant XML has (a,b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb036.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb036.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEb037" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=sequence (a,b), and the instant XML has (a,b,a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb037.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEb038" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=sequence (a,b), and the instant XML has (a,b,a,b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb038.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb038.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEb039" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=sequence (a,b), and the instant XML has (x)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb039.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEb039.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc001" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=choice (a|b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc002" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=choice (a|b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc003" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=choice (a|b), and the instant XML has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc004" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=0, maxOccurs=absent, content=choice (a|b), and the instant XML has ( x)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc005" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=choice (a|b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc006" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=choice (a|b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc007" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=choice (a|b), and the instant XML has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc008" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=1, maxOccurs=absent, content=choice (a|b), and the instant XML has ( x )</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc009" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=absent, content=choice (a|b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesEc010" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=0, content=choice (a|b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc011" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=choice (a|b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc012" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=choice (a|b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc013" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=choice (a|b), and the instant XML has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc014" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=1, content=choice (a|b), and the instant XML has ( x )</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc014.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc015" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc015.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc016" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc017" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has (b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc018" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has (a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc019" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has (a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc020" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has (b,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc021" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc022" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has (a,a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc022.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc023" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has (b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc023.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc024" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has (a, a, x)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc024.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc025" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=absent, maxOccurs=2, content=choice (a|b), and the instant XML has ( x )</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc025.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc026" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has no element</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc026.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc027" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc027.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc028" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc028.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc029" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc030" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (b,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc031" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc032" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc033" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc034" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (b,a,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc034.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc035" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (a,a,a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc035.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc036" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (b,a,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc036.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc036.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc037" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (b,b,b,b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc037.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesEc038" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (a,a,a,a,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc038.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc038.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc039" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (b,b,b,b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc039.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc039.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc040" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (b,b,b,b,x)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc040.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc040.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEc041" origin="Microsoft">
    <description>The {term} is a model group with minOccurs=2, maxOccurs=4, content=choice (a|b), and the instant XML has (x)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc041.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEc041.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="particlesEd001" origin="Microsoft">
    <description>The {term} is a model group with content: sequence (a,b), all(x,y), choice (m|n), and the instant XML has (a,b,x,y,m)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesEd001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesFa001" origin="Microsoft">
    <description>E drived by extension from B, B= 'all', E=same as B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFa001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFa001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesFa002" origin="Microsoft">
    <description>E drived by extension from B, B= 'sequence', E=same as B, same annotation properties</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFa002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFa002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesFa003" origin="Microsoft">
    <description>E drived by extension from B, B= 'choice', E=same as B, different annotation properties</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFa003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFa003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesFa004" origin="Microsoft">
    <description>E drived by extension from B, B= group, E=same as B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFa004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFa004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesFa005" origin="Microsoft">
    <description>E drived by extension from B, B= 'any', E=same as B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFa005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFa005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesFb001" origin="Microsoft">
    <description>E drived by extension from B, B=choice, E=sequence with B as the first content particle (follow by group)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFb001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFb001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesFb002" origin="Microsoft">
    <description>E drived by extension from B, B=sequence, E=sequence with B as the first content particle (follow by all)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFb002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesFb003" origin="Microsoft">
    <description>E drived by extension from B, B=any, E=sequence with B as the first content particle (follow by choice)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFb003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesFb004" origin="Microsoft">
    <description>E drived by extension from B, B=group, E=sequence with B as the first content particle (follow by sequence)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFb004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFb004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesFb005" origin="Microsoft">
    <description>E drived by extension from B, B=any, E=sequence with B as the first content particle (follow by choice, sequence)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFb005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesFb006" origin="Microsoft">
    <description>E drived by extension from B, B=any, E=sequence with B as the first content particle (follow by choice, choice)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesFb006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHa001" origin="Microsoft">
    <description>ignore pointless occurences of 'sequence' :sequence is empty</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa002" origin="Microsoft">
    <description>ignore pointless occurences of 'sequence' : sequence (S) appears under a model group (P) with minOccurs=maxOccurs=1, and the (S) has only one member</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa003" origin="Microsoft">
    <description>ignore pointless occurences of 'sequence' : sequence (S) appears under a 'choice' (P) with minOccurs=maxOccurs=1, and the (S) has only one member</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa004" origin="Microsoft">
    <description>ignore pointless occurences of 'sequence' : sequence (S) appears under a 'sequence' (P) with minOccurs=maxOccurs=1, and the (S) has only one member</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa005" origin="Microsoft">
    <description>ignore pointless occurences of 'sequence' : sequence (S) appears under a model group (P) with minOccurs=maxOccurs=1, and the (P) is itself among the particles of a 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa006" origin="Microsoft">
    <description>ignore pointless occurences of 'sequence' : sequence (S) appears under a 'choice' (P) with minOccurs=maxOccurs=1, and the (P) is itself among the particles of a 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa007" origin="Microsoft">
    <description>ignore pointless occurences of 'sequence' : sequence (S) appears under a 'sequence' (P) with minOccurs=maxOccurs=1, and the (P) is itself among the particles of a 'sequence'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa008" origin="Microsoft">
    <description>ignore pointless occurences of 'choice' : choice ( C) is empty and the group within which ( C) appears has minOccurs of 0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHa009" origin="Microsoft">
    <description>ignore pointless occurences of 'choice' : choice ( C) is empty and the 'choice' within which ( C) appears has minOccurs of 0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa010" origin="Microsoft">
    <description>ignore pointless occurences of 'choice' : choice ( C) is empty and the 'sequence' within which ( C) appears has minOccurs of 0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa011" origin="Microsoft">
    <description>ignore pointless occurences of 'choice' : choice ( C) appears under group (P) with minOccurs=maxOccurs=1, and the ( C) has only one member</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa012" origin="Microsoft">
    <description>ignore pointless occurences of 'choice' : choice ( C) appears under 'choice' (P) with minOccurs=maxOccurs=1, and the ( C) has only one member</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa013" origin="Microsoft">
    <description>ignore pointless occurences of 'choice' : choice ( C) appears under 'sequence' (P) with minOccurs=maxOccurs=1, and the ( C) has only one member</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa014" origin="Microsoft">
    <description>ignore pointless occurences of 'choice' : choice ( C) appears under group (P) with minOccurs=maxOccurs=1, and the (P) is itself among the particles of a 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa015" origin="Microsoft">
    <description>ignore pointless occurences of 'choice' : choice ( C) appears under 'choice' (P) with minOccurs=maxOccurs=1, and the (P) is itself among the particles of a 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa016" origin="Microsoft">
    <description>ignore pointless occurences of 'choice' : choice ( C) appears under 'sequence' (P) with minOccurs=maxOccurs=1, and the (P) is itself among the particles of a 'choice'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa017" origin="Microsoft">
    <description>ignore pointless occurences of particles: All is empty</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHa018" origin="Microsoft">
    <description>ignore pointless occurences of particles: All has only one member</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHa018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesHb001" origin="Microsoft">
    <description>Forbidden: drived by restriction any : elt</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHb001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHb002" origin="Microsoft">
    <description>Forbidden: drived by restriction any : all</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHb002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHb003" origin="Microsoft">
    <description>Forbidden: drived by restriction any : choice</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHb003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHb004" origin="Microsoft">
    <description>Forbidden: drived by restriction any : sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHb004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHb006" origin="Microsoft">
    <description>Forbidden: drived by restriction all : choice</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHb006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHb007" origin="Microsoft">
    <description>Forbidden: drived by restriction all : sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHb007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHb008" origin="Microsoft">
    <description>Forbidden: drived by restriction choice : elt</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHb008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHb009" origin="Microsoft">
    <description>Forbidden: drived by restriction choice : all</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHb009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHb010" origin="Microsoft">
    <description>Forbidden: drived by restriction choice : sequence</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHb010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesHb011" origin="Microsoft">
    <description>Forbidden: drived by restriction sequence : elt</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesHb011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIa001" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B nillable=FALSE, R nillable=FALSE</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIa001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIa001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIa003" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B nillable=absent, R nillable=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIa003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIa003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIa004" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B nillable=FALSE, R nillable=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIa004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIa004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIa005" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B nillable=absent, R nillable=FALSE</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIa005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIa005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIa006" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B nillable=FALSE, R nillable=TRUE</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIa006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIa008" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B nillable=absent, R nillable=TRUE</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIa008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIb001" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B name=foo, R name=foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIb001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIb001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIb002" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B name=foo, R name=bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIb002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIb003" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B name=foo, R name=ref to foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIb003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIb003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIb004" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B name=foo, R name=ref to bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIb004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIb005" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B name=foo, R name=ref to group which has foo only</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIb005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIb005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIb006" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B name=foo, R name=ref to group which has foo and bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIb006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIb007" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B name=foo, R name=ref to group which as bar only</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIb007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIc001" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B targetNanespace=foo, R targetNanespace=foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIc002" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B targetNanespace=foo, R targetNanespace=bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIc003" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B targetNanespace=foo, R targetNanespace=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIc004" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B targetNanespace=absent, R targetNanespace=foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIc005" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B (B is from included XSD): B targetNanespace=foo, R targetNanespace=foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIc006" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B (B is from included XSD): B targetNanespace=absent, R targetNanespace=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIc007" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B (B is from included XSD): B targetNanespace=absent, R targetNanespace=foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIc007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesId001" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=0, R minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesId002" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=0, R minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesId003" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=1, R minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesId004" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=1, R minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesId005" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=1, R minOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesId006" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=absent, R minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesId007" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=absent, R minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesId008" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=absent, R minOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesId009" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=absent, R minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesId010" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=0, R minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesId011" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=1, R minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesId012" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B minOccurs=2, R minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesId012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIe001" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=unbounded, R maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe002" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=unbounded, R maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe003" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=unbounded, R maxOccurs=999999</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe004" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=unbounded, R maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe005" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=0, R maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe006" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=0, R maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIe007" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=1, R maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe008" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=1, R maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe009" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=1, R maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIe010" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=absent, R maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe011" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=absent, R maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe012" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=absent, R maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIe013" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=absent, R maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe014" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=0, R maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIe015" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=1, R maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIe016" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B maxOccurs=2, R maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIe016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIf001" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B default=absent, R default=empty</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIf002" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B default=absent, R default=foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIf003" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B default=bar, R default=foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIf004" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B default=empty, R default=foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIf005" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B fixed=foo', R fixed=foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIf006" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B fixed=empty, R fixed=empty</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIf007" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B fixed=foo', R fixed=bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIf008" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B fixed=empty', R fixed=bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIf009" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B fixed=foo', R fixed=empty</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIf009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIg001" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=substitution, R disallowed substitutions=substitution</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIg002" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=extension, R disallowed substitutions=extension</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIg003" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=restriction, R disallowed substitutions=restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIg004" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=#all, R disallowed substitutions=sub, ext, res</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIg005" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=sub, ext, res, R disallowed substitutions=#all</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIg006" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=sub, ext, res, R disallowed substitutions=sub</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIg007" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=#all, R disallowed substitutions=sub, ext</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIg008" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=sub, ext, res, R disallowed substitutions=res</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIg009" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=ext, res, R disallowed substitutions=ext, sub</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIg010" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=sub , R disallowed substitutions=res</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIg011" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=res, sub, R disallowed substitutions=res, sub, ext</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIg012" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=sub, ext , R disallowed substitutions=#all</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIg013" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=sub, R disallowed substitutions=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIg014" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=absent, R disallowed substitutions=sub</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIg015" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=empty, R disallowed substitutions=sub</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIg016" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B disallowed substitutions=sub, R disallowed substitutions=empty</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIg016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIh001" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=foo, B final=restriciton, R type=foo, R final=restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIh001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj001" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=absent, R type=anyType</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIj002" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'foo', R type=complexType 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIj003" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'foo', R type=complexType 'bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj004" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'Z' which is a drived by restriction of 'foo', R type=complexType 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj005" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'foo', R type=complexType 'Z' which is a drived by restriction of 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIj006" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'Z' which is a drived by restriction of 'foo', R type=complexType 'Z' which is a drived by restriction of 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIj007" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'Z' which is a drived by extension of 'foo', R type=complexType 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj008" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'foo', R type=complexType 'Z' which is a drived by extension of 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj009" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'Z' which is a drived by extension of 'foo', R type=complexType 'Y' which is a drived by extension of 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj010" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'foo1' drived by restriction from 'bar', R type=complexType 'foo2' drived by restriction from 'bar', which is more restricted than in B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj011" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'foo1' drived by extension from 'bar', R type=complexType 'foo2' drived by restriction from 'bar', which is less extented than in B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj012" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'foo1' drived by restriction from 'bar', R type=complexType 'foo2' drived by restriction from 'bar', which is less restricted than in B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj013" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'foo1' drived by extension from 'bar', R type=complexType 'foo' drived by restriction from 'bar', which is more extented than in B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj015" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'foo', R type=anyType</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIj016" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=complexType 'foo', R type=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIj016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk001" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType 'foo', R type=simpleType 'foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIk002" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType 'foo', R type=simpleType 'bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk003" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType restriction of xsd:string, R type=simpleType xsd:string</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk004" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType xsd:string, R type=simpleType restriction of xsd:string</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIk005" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType with list (l1, l2), R type=simpleType with list (l1, l2)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk006" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType with list (l1, l2, l3), R type=simpleType with list (l1, l2)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk007" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType with list (l1, l2), R type=simpleType with list (l1, l2, l3)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk008" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType with union (S1, S2), R type=simpleType with list (l1, l2)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk009" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType with union (S1, S2), R type=simpleType with list (S1)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk010" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType with union (S1, S2), R type=simpleType with list (S2)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk011" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType with union (S1, S2), R type=simpleType with union (S1)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk012" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType with union (S1, S2), R type=simpleType with union (S1, S2)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIk013" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType with union (S1, S2), R type=simpleType with union (S1, S2, S3)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk015" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType 'foo', R type=anyType</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk016" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType 'foo', R type=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk019" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=list, R type=anyType</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk020" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=union , R type=anyType</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk021" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=list, R type=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk022" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=union , R type=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk024" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=simpleType restriction of xsd:string, R type=simpleType restriction of xsd:string</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk025" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=union of simpleType s1, s2, R type=s1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesIk026" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=U1, union of simpleType s1, s2, R type=x1 which is drived by restriction from the U1.</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesIk027" origin="Microsoft">
    <description>NameAndTypedOK (elt:elt ) element R drived by restriction from element B: B type=union of simpleType s1, s2, R type=x1 which is drived by restriction from s1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesIk027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJa001" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=0, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJa002" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=0, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJa003" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=1, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJa004" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=1, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJa005" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=1, R's minOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJa006" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=absent, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJa007" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=absent, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJa008" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=absent, R's minOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJa009" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=absent, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJa010" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=0, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJa011" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=1, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJa012" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's minOccurs=2, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJa012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJb001" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=unbounded, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb002" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=unbounded, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb003" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=unbounded, R's maxOccurs=999999</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb004" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=unbounded, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb005" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=0, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb006" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=0, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJb007" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=1, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb008" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb009" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=1, R's maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJb010" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=absent, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb011" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=absent, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb012" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=absent, R's maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJb013" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=absent, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb014" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=0, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJb015" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=1, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJb016" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=foo, B's maxOccurs=2, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJb016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJc001" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=0, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJc002" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=0, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJc003" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=1, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJc004" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=1, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJc005" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=1, R's minOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJc006" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=absent, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJc007" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=absent, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJc008" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=absent, R's minOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJc009" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=absent, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJc010" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=0, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJc011" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=1, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJc012" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's minOccurs=2, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJc012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJd001" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=unbounded, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd002" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=unbounded, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd003" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=unbounded, R's maxOccurs=999999</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd004" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=unbounded, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd005" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=0, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd006" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=0, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJd007" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=1, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd008" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd009" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=1, R's maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJd010" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=absent, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd011" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=absent, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd012" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=absent, R's maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJd013" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=absent, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd014" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=0, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJd015" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=1, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJd016" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=absent, B's maxOccurs=2, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJd016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJe001" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=0, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJe002" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=0, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJe003" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=1, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJe004" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=1, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJe005" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=1, R's minOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJe006" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=absent, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJe007" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=absent, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJe008" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=absent, R's minOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJe009" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=absent, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJe010" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=0, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJe011" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=1, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJe012" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=2, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJe012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJf001" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=unbounded, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf002" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=unbounded, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf003" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=unbounded, R's maxOccurs=999999</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf004" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=unbounded, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf005" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=0, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf006" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=0, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJf007" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=1, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf008" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf009" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=1, R's maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJf010" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=absent, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf011" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=absent, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf012" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=absent, R's maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJf013" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=absent, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf014" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=0, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJf015" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=1, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJf016" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##any, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=2, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJf016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJg001" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's namespace=targetNamespace, B's minOccurs=0, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJg001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJh001" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's namespace=absent, The xsd's targetNameespace is absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJh001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJj001" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=0, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJj002" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=0, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJj003" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=1, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJj004" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=1, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJj005" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=1, R's minOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJj006" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=absent, R's minOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJj007" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=absent, R's minOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJj008" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=absent, R's minOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJj009" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=absent, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJj010" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=0, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJj011" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=1, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJj012" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's minOccurs=2, R's minOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJj012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJk001" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=unbounded, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJk002" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=unbounded, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJk003" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=unbounded, R's maxOccurs=999999</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJk004" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=unbounded, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJk005" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=0, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJk006" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=0, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJk007" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=1, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJk008" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJk009" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=1, R's maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJk010" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=absent, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJk011" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=absent, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJk012" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=absent, R's maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJk013" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=absent, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesJk014" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=0, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesJk015" origin="Microsoft">
    <description>Particle Derivation OK (elt:Any) element R drived by restriction from wildcard (any) B : B's namespace=##other, R's targetNamespace=ref of an elt from different targetNS, B's maxOccurs=1, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesJk015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesK001" origin="Microsoft">
    <description>Particle Derivation OK (Elt:All - RecurseAsIfGroup) element R drived by restriction from (all) B : B's minOccurs=1, B' maxOccurs=1, R's minOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesK002" origin="Microsoft">
    <description>Particle Derivation OK (Elt:All - RecurseAsIfGroup) element R drived by restriction from (all) B : B's minOccurs=absent, B' maxOccurs=1, R's minOccurs=1, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesK003" origin="Microsoft">
    <description>Particle Derivation OK (Elt:All - RecurseAsIfGroup) element R drived by restriction from (all) B : B's minOccurs=1, B' maxOccurs=absent, R's minOccurs=absent, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesK004" origin="Microsoft">
    <description>Particle Derivation OK (Elt:All - RecurseAsIfGroup) element R drived by restriction from (all) B : B's minOccurs=absent, B' maxOccurs=absent, R's minOccurs=2, R's maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesK005" origin="Microsoft">
    <description>Particle Derivation OK (Elt:All - RecurseAsIfGroup) element R drived by restriction from (all) B : B's minOccurs=0, B' maxOccurs=absent, R's minOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesK006" origin="Microsoft">
    <description>Particle Derivation OK (Elt:All - RecurseAsIfGroup) element R drived by restriction from (all) B : B's minOccurs=0, B' maxOccurs=absent, but the element has min=max=1, R's minOccurs=0, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesK008" origin="Microsoft">
    <description>Particle Derivation OK (Elt:All - RecurseAsIfGroup) element R drived by restriction from (all) B : R has an element (min=maxOccurs=1) from a different namespace than the targetNS</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesK008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOa001" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=absent, B's maxOccurs=absent, R's minOccurs=absent, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOa002" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=absent, B's maxOccurs=absent, R's minOccurs=0, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOa003" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=absent, B's maxOccurs=absent, R's minOccurs=1, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOa004" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=absent, B's maxOccurs=absent, R's minOccurs=2, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOa005" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=absent, B's maxOccurs=absent, R's minOccurs=absent, R's maxOccurs=0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOa006" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=absent, B's maxOccurs=absent, R's minOccurs=absent, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOa007" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=absent, B's maxOccurs=absent, R's minOccurs=absent, R's maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOa008" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=2, B's maxOccurs=4, R's minOccurs=2, R's maxOccurs=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOa009" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=2, B's maxOccurs=4, R's minOccurs=absent, R's maxOccurs=4</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOa010" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=2, B's maxOccurs=4, R's minOccurs=1, R's maxOccurs=4</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOa011" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=2, B's maxOccurs=4, R's minOccurs=2, R's maxOccurs=4</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOa012" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=2, B's maxOccurs=4, R's minOccurs=3, R's maxOccurs=4</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOa013" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=2, B's maxOccurs=4, R's minOccurs=2, R's maxOccurs=3</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOa014" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=2, B's maxOccurs=4, R's minOccurs=3, R's maxOccurs=3</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOa015" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's minOccurs=2, B's maxOccurs=4, R's minOccurs=2, R's maxOccurs=5</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOa015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb001" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##any, R's namespace=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb002" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##any, R's namespace=##any</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb003" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##any, R's namespace=##other</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb004" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##any, R's namespace=##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb005" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##any, R's namespace=##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb006" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##any, R's namespace=foo bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb007" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##any, R's namespace=##local, foo, bar, ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb008" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##any, R's namespace=##targetNamespace, ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb009" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##any, R's namespace=foo, ##local, bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb010" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##other, R's namespace=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb011" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##other, R's namespace=##any</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb012" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##other, R's namespace=##other</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb013" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##other, R's namespace=##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb014" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##other, R's namespace=##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb015" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##other, R's namespace=foo bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb016" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##other, R's namespace=##local, foo, bar, ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb017" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##other, R's namespace=##targetNamespace, ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb018" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##other, R's namespace=foo, ##local, bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb019" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, R's namespace=bsent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb020" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, R's namespace=##any</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb021" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, R's namespace=##other</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb022" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, R's namespace=##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb023" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, R's namespace=##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb024" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, R's namespace=foo bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb025" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, R's namespace=##local, foo, bar, ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb026" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, R's namespace=##targetNamespace, ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb027" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, R's namespace=foo, ##local, bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb028" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##targetNamespace, R's namespace=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb029" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##targetNamespace, R's namespace=##any</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb030" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##targetNamespace, R's namespace=##other</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb031" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##targetNamespace, R's namespace=##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb032" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##targetNamespace, R's namespace=##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb032.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb033" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##targetNamespace, R's namespace=foo bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb033.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb034" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##targetNamespace, R's namespace=##local, foo, bar, ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb034.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb035" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##targetNamespace, R's namespace=##targetNamespace, ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb035.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb036" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##targetNamespace, R's namespace=foo, ##local, bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb036.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb037" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb037.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb038" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=##any</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb039" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=##other</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb039.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb040" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb040.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb041" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb041.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb042" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=foo bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb042.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb042.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb043" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=##local, foo, bar, ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb043.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb044" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=##targetNamespace, ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb044.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb045" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=foo, ##local, bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb045.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb046" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=abce</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb046.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb047" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb047.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb047.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb048" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=foo bar', R's namespace=bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb048.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb048.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb049" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=absent</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb049.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb050" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=##any</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb050.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb051" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=##other</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb051.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb052" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb052.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb052.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb053" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb053.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb053.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb054" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=foo bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb054.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb054.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb055" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=##local, foo, bar, ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb055.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb055.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb056" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=##targetNamespace, ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb056.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb056.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb057" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=foo, ##local, bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb057.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb057.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb058" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=abce</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb058.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesOb059" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb059.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb059.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesOb060" origin="Microsoft">
    <description>Particle Derivation OK (Any:Any- NSSubset) (any) R drived by restriction from (any) B : B's namespace=##local, foo, bar, ##targetNamespace, R's namespace=bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb060.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesOb060.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesS001" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b), R has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesS002" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b), R has (b, a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesS003" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b, c), b and c are emptiable, R has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesS004" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b, c), c is emptiable, R has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesS005" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b, c), c is NOT emptiable, R has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesS006" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b, c), c is NOT emptiable, R has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesS007" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b, c), R has (a, b, c)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesS008" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b, c), R has (a, b, c, d)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesS009" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b), R has (a) is NOT from the same namespace as B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesS010" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b), R has (a) is NOT a valid restriction of the 'a' in B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesS011" origin="Microsoft">
    <description>Particle Derivation OK (All:All - Recurse) (All) R drived by restriction from (All) B : B has (a, b), R has (a) which has a type that is a valid restriction from type of B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesS011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR001" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=0, B's maxOccurs=1, R's minOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR002" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=1, B's maxOccurs=1, R's minOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR003" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=0, B's maxOccurs=2, R's minOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR004" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=0, B's maxOccurs=3, R has an element with minOccurs=1, maxOccurs=3</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR005" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=0, B's maxOccurs=unbounded, R has an element with minOccurs=1, maxOccurs=3</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR006" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=0, B's maxOccurs=3, R has an element with minOccurs=1, maxOccurs=4</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesR007" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=0, B's maxOccurs=4, R has 2 elements, each with maxOccurs as 2 and 2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR008" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=0, B's maxOccurs=3, R has 2 elements, each with maxOccurs as 2 and 2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR009" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=4, B's maxOccurs=4, R has 2 elements, each with minOccurs as 2 and 2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR010" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=4, B's maxOccurs=5, R has 2 elements, each with minOccurs as 3 and 3</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesR011" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=0, B's maxOccurs=4, R has 2 groups, each with maxOccurs as 4 and 0</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR012" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=0, B's maxOccurs=3, R's minOccurs=0, B's maxOccurs=2, but have 2 children</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR013" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=3, B's maxOccurs=8, R's minOccurs=3, B's maxOccurs=4, have 2 children</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR014" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's minOccurs=4, B's maxOccurs=8, R's minOccurs=2, B's maxOccurs=2, have 2 children</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesR015" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##any, R has an element targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR016" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##any, R has an element from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR017" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##any, R has an element from foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR018" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##other, R has an element targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesR019" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##other, R has an element from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR020" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##other, R has an element from foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR021" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##local, R has an element targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesR022" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##local, R has an element from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR023" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##local, R has an element from foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesR024" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##targetNamespace, R has an element targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR024.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR025" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##targetNamespace, R has an element from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesR026" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=##targetNamespace, R has an element from foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesR027" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=foo, bar', R has an element targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesR028" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=foo, bar', R has an element from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesR029" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=foo, bar', R has an element from foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR030" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=foo, bar', R has an element from bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesR031" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Any - NSRecurseCheckCardinality) (Choice) R drived by restriction from (Choice) B : B's namespace=foo, bar', R has an element from abc</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesR031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesT001" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b), R has (a | b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesT002" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b), R has (b | a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesT003" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b | c), b and c are emptiable, R has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesT004" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b | c), c is emptiable, R has (a | b) c is emptiable</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesT005" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b | c), b is but c is NOT emptiable, R has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesT006" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b | c), c is NOT emptiable, R has (a | b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesT007" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b | c), R has (a | b | c)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesT008" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b | c), R has (a | b | c | d)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesT009" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b | c), R has ( c | a | b )</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesT010" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b), R has (a) is NOT from the same namespace as B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesT011" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B has (a | b), R has (a) is NOT a valid restriction of the 'a' in B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesT012" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B's maxOccurs=unbounded, R's maxOccurs=1, but has (a | b | c) all with maxOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesT013" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B's maxOccurs=unbounded, R's maxOccurs=unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesT014" origin="Microsoft">
    <description>Particle Derivation OK (Choice:Choice - RecurseLax) (Choice) R drived by restriction from (All) B : B's maxOccurs=unbounded, R's maxOccurs = 3 (a | b | c) all with maxOccurs ( 0 and 10 and 100 )</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesT014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ001" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=0, B's maxOccurs=1, R's minOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ002" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=1, B's maxOccurs=1, R's minOccurs=1, R's maxOccurs=1</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ003" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=0, B's maxOccurs=6, R's minOccurs=1, R's maxOccurs=6</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ004" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=0, B's maxOccurs=6, R has an element with minOccurs=1, maxOccurs=6</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ005" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=0, B's maxOccurs=unbounded, R's maxOccurs = 1000, R has element with maxOccurs unbounded</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ006" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=0, B's maxOccurs=3, R has an element with minOccurs=1, maxOccurs=4</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesQ007" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=0, B's maxOccurs=4, R has 2 elements, each with maxOccurs as 2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ008" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=0, B's maxOccurs=3, R has 2 elements, each with maxOccurs as 2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesQ011" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=0, B's maxOccurs=4, R has 2 groups, each has one child with maxOccurs as 2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ012" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=0, B's maxOccurs=3, R has 2 groups, each has one child with maxOccurs as 2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesQ013" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's minOccurs=4, B's maxOccurs=4, R has 2 groups, each has one child with minOccurs as 2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ016" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##any, R has an element from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ017" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##any, R has an element from namespace foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ017.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ018" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##other, R has an element targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesQ019" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##other, R has an element from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ020" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##other, R has an element from foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ020.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ021" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##local, R has an element targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesQ022" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##local, R has an element from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ022.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ023" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##local, R has an element from foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesQ024" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##targetNamespace, R has an element targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ024.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ025" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##targetNamespace, R has an element from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesQ026" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=##targetNamespace, R has an element from foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesQ027" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=foo, bar', R has an element targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesQ028" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=foo, bar', R has an element from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesQ029" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=foo, bar', R has an element from foo</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ030" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=foo, bar', R has an element from foo and bar</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ030.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesQ031" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Any - NSRecurseCheckCardinality) (Sequence) R drived by restriction from (any) B : B's namespace=foo, bar', R has an element from abc</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesQ031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesU001" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:All - RecurseUnordered) (Sequence) R drived by restriction from (All) B : B has (a, b), as has maxOccurs='1' , R has (a , b), a has maxOccurs=2</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesU002" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:All - RecurseUnordered) (Sequence) R drived by restriction from (All) B : B has (a, b), a has minOccurs='1', R has (a , b), a has minOccurs='1999'</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesU003" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:All - RecurseUnordered) (Sequence) R drived by restriction from (All) B : B has (a, b), R has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesU004" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:All - RecurseUnordered) (Sequence) R drived by restriction from (All) B : B has (a, b, c), c is emptiable, R has (b,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesU005" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:All - RecurseUnordered) (Sequence) R drived by restriction from (All) B : B has (a, b, c), c is emptiable, R has ( a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesU006" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:All - RecurseUnordered) (Sequence) R drived by restriction from (All) B : B has (a, b, c), c is NOT emptiable, R has ( a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesU007" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:All - RecurseUnordered) (Sequence) R drived by restriction from (All) B : B has (a, b, c, d), R has (d,b,c,a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesU008" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:All - RecurseUnordered) (Sequence) R drived by restriction from (All) B : B has (a, b, c), R has (a , b ,c, d)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesU009" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:All - RecurseUnordered) (Sequence) R drived by restriction from (All) B : B has (a, b), R has (a) is NOT a valid restriction of the 'a' in B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesU009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesV002" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B's minOccuranceRange=6, R's minOccuranceRange=5</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesV003" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B's min,maxOccuranceRange=(3, 9), R's min,maxOccuranceRange=(4, 8)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV005" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B's maxOccuranceRange=6, R's maxOccuranceRange=8</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesV006" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B's min,maxOccuranceRange=(0,0), R's min,maxOccuranceRange=(0,0)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV007" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b), R has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV008" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b), R has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV009" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b | c), R has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV010" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b | c), R has (b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV011" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b | c), R has ( c)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV012" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b | c), R has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV013" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b | c), R has (b, c)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV014" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b | c), R has (a, c)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV014.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV015" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b | c), R has (c, b, a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesV016" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b | c), R has (a, b, c, d)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesV017" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b | c), R has (a) from a different namespace than B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesV018" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (a | b), R has (a) which is NOT a valid restriction of the 'a' in B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesV020" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Choice - MapAndSum) (Sequence) R drived by restriction from (Choice) B : B has (ref=A | b), R has (i) where i is a substitution group to A</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesV020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesW001" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B's minOccuranceRange=6, R's minOccuranceRange=6</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesW002" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B's minOccuranceRange=6, R's minOccuranceRange=4</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesW003" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B's min,maxOccuranceRange=(3, 9), R's min,maxOccuranceRange=(4, 8)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesW005" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B's maxOccuranceRange=6, R's maxOccuranceRange=8</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesW006" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B's min,maxOccuranceRange=(0,0), R's min,maxOccuranceRange=(0,0)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="particlesW007" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B has (a, b), R has (b, a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesW008" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B has (a, b, c), b and c are emptiable, R has (a)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesW010" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B has (a, b, c), c is NOT emptiable, R has (a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesW011" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B has (a, b, c), R has (a, b, c)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="particlesW012" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B has (a, b, c), R has (a, b, c, d)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesW013" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B has (a, b, c), R has (c, a, b)</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesW014" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B has (a, b), R has (a) is NOT from the same namespace as B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesW015" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B has (a, b), R has (a) is NOT a valid restriction of the 'a' in B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="particlesW016" origin="Microsoft">
    <description>Particle Derivation OK (Sequence:Sequence - Recurse) (Sequence) R drived by restriction from (Sequence) B : B has (a, b), R has (a) is a valid restriction of the 'a' in B</description>
    <files>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="Particles" fileName="particlesW016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stA001" origin="Microsoft">
    <description>Declaration with optional attribute id = 'foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stA002" origin="Microsoft">
    <description>Declaration with optional attribute id = 'foo123' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA003" origin="Microsoft">
    <description>Declaration with optional attribute id = 'foo123' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA004" origin="Microsoft">
    <description>Declaration with optional attribute id = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA005" origin="Microsoft">
    <description>Declaration with optional attribute id = '123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA006" origin="Microsoft">
    <description>Declaration with optional attribute id = 'foo123' , name attribute='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stA007" origin="Microsoft">
    <description>Declaration with optional attribute name = 'fooType'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA007.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stA008" origin="Microsoft">
    <description>Declaration with optional attribute name = 'fooType' , simpleType not global, parent is simpleType restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA009" origin="Microsoft">
    <description>Declaration with optional attribute name = 'fooType' , simpleType not global, parent is list</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA010" origin="Microsoft">
    <description>Declaration with optional attribute name = 'fooType' , simpleType not global, parent is union</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA011" origin="Microsoft">
    <description>Declaration with optional attribute name = 'fooType' , simpleType not global, parent is attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA012" origin="Microsoft">
    <description>Declaration with optional attribute name = 'fooType' , simpleType not global, parent is element</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA013" origin="Microsoft">
    <description>Declaration with optional attribute name = 'fooType' , simpleType not global, parent is simpleContent restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA014" origin="Microsoft">
    <description>Declaration with optional attribute name = 'a:b'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA015" origin="Microsoft">
    <description>Declaration with optional attribute name = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA016" origin="Microsoft">
    <description>Declaration with optional attribute name = 'xmlns'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA016.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stA017" origin="Microsoft">
    <description>Declaration with optional attribute name = '1foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stA018" origin="Microsoft">
    <description>Declaration with optional attribute name = '_foo'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA018.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stA019" origin="Microsoft">
    <description>Declaration with optional attribute name = '_1'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA019.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stA020" origin="Microsoft">
    <description>attribute with non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stA020.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stB001" origin="Microsoft">
    <description>content of single annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB002" origin="Microsoft">
    <description>content with two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB003" origin="Microsoft">
    <description>content with restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stB004" origin="Microsoft">
    <description>content with two restrctions</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB005" origin="Microsoft">
    <description>content with restriction then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB006" origin="Microsoft">
    <description>content with annotation then restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stB007" origin="Microsoft">
    <description>content with restriction then attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB008" origin="Microsoft">
    <description>content with list</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stB009" origin="Microsoft">
    <description>content with two lists</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB010" origin="Microsoft">
    <description>content with list then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB011" origin="Microsoft">
    <description>content with annotation then list</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stB012" origin="Microsoft">
    <description>content with union</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stB013" origin="Microsoft">
    <description>content with two unions</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB014" origin="Microsoft">
    <description>content with union then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB015" origin="Microsoft">
    <description>content with annotation then union</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB015.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stB016" origin="Microsoft">
    <description>content with two annotations then restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB017" origin="Microsoft">
    <description>content with two annotations then list</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB018" origin="Microsoft">
    <description>content with two annotations then union</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB019" origin="Microsoft">
    <description>content with list then restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB020" origin="Microsoft">
    <description>content with list then union</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB021" origin="Microsoft">
    <description>content with restriction then list</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB022" origin="Microsoft">
    <description>content with restriction then union</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB023" origin="Microsoft">
    <description>content with union then list</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stB024" origin="Microsoft">
    <description>content with union then restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stB024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC001" origin="Microsoft">
    <description>Restriction with optional attribute base = 'xsd:string'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC002" origin="Microsoft">
    <description>Restriction with optional attribute base = 'xsd:something'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC003" origin="Microsoft">
    <description>Restriction with optional attribute base = 'xsd:anyType'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC004" origin="Microsoft">
    <description>Restriction with optional attribute base = 'foo:string' foo is not defined</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC005" origin="Microsoft">
    <description>Restriction with optional attribute id = 'foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC006" origin="Microsoft">
    <description>Restriction with optional attribute id = 'foo123' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC007" origin="Microsoft">
    <description>Restriction with optional attribute id = 'foo123' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC008" origin="Microsoft">
    <description>Restriction with optional attribute id = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC009" origin="Microsoft">
    <description>Restriction with optional attribute id = '123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC010" origin="Microsoft">
    <description>Restriction. content of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC011" origin="Microsoft">
    <description>Restriction. content of two simpleTypes</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC012" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of duration</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC013" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of encoding</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC014" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of enumeration</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC015" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of length</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC015.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC016" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of maxExclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC016.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC017" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of maxInclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC018" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of maxLength</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC018.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC019" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of minExclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC019.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC020" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of minInclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC020.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC021" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of minLength</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC021.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC022" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of pattern</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC022.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC023" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of period</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC024" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of totalDigits</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC024.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC025" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of fractionDigits</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC025.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC026" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of whiteSpace</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC026.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC027" origin="Microsoft">
    <description>Restriction. base is valid for restriction facet and content of attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC028" origin="Microsoft">
    <description>Restriction. content of attributeGroup</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC029" origin="Microsoft">
    <description>Restriction. content of anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC030" origin="Microsoft">
    <description>Restriction. base = 'xsd:string and content of annotation and length=5</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC030.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stC031" origin="Microsoft">
    <description>Restriction. base = 'xsd:string' and content of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC032" origin="Microsoft">
    <description>Restriction. content of simpleType and length=5</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC032.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stC033" origin="Microsoft">
    <description>Restriction. attribute with non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stC033.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stD001" origin="Microsoft">
    <description>List with optional attribute id = 'foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stD002" origin="Microsoft">
    <description>List with optional attribute id = 'foo123' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD003" origin="Microsoft">
    <description>List with optional attribute id = 'foo123' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD004" origin="Microsoft">
    <description>List with optional attribute id = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD005" origin="Microsoft">
    <description>List with optional attribute id = '123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD006" origin="Microsoft">
    <description>List with optional attribute itemType = 'myInteger' itemType is unique</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stD007" origin="Microsoft">
    <description>List with optional attribute itemType = 'xsd:Integer' xsd is properly defined</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD007.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stD008" origin="Microsoft">
    <description>List with optional attribute itemType = 'foo:myInteger' foo is properly defined</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stD009" origin="Microsoft">
    <description>List with optional attribute itemType = 'foo:myInteger' foo is not defined</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD010" origin="Microsoft">
    <description>List with optional attribute itemType = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD011" origin="Microsoft">
    <description>List attribute with non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stD012" origin="Microsoft">
    <description>List content is empty</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stD013" origin="Microsoft">
    <description>List content of single annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stD014" origin="Microsoft">
    <description>List content of single annotation then simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stD015" origin="Microsoft">
    <description>List content of two simpleTypes</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD016" origin="Microsoft">
    <description>List content of two annotations then simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD017" origin="Microsoft">
    <description>List content of simpleType then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD018" origin="Microsoft">
    <description>List with optional attribute itemType = 'xsd:Integer' content of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD019" origin="Microsoft">
    <description>List with optional attribute itemType = 'myTest' myTest is a complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stD020" origin="Microsoft">
    <description>List with optional attribute itemType = 'myTest' myTest is a Union</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD020.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stD021" origin="Microsoft">
    <description>List with optional attribute itemType = 'myTest' myTest a simpleType restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stD021.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stE001" origin="Microsoft">
    <description>Union with optional attribute id = 'foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stE002" origin="Microsoft">
    <description>Union with optional attribute id = 'foo123' , another object with an ID ='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stE003" origin="Microsoft">
    <description>Union with optional attribute id = 'foo123' , an included object with and ID='foo123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stE004" origin="Microsoft">
    <description>Union with optional attribute id = ''</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stE005" origin="Microsoft">
    <description>Union with optional attribute id = '123'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stE006" origin="Microsoft">
    <description>Union with optional attribute memberTypes = 'States listMyInt' memberTypes is unique</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stE007" origin="Microsoft">
    <description>Union with optional attribute memberTypes = 'xsd:Integer foo:listMyInt' namespaces are defined</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE007.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stE008" origin="Microsoft">
    <description>Union with optional attribute memberTypes = 'xsd:Integer foo:listMyInt' foo namespace is not defined</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stE009" origin="Microsoft">
    <description>Union attribute with non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stE010" origin="Microsoft">
    <description>Union content is empty</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stE011" origin="Microsoft">
    <description>Union memberTypes attribute and content of single annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stE012" origin="Microsoft">
    <description>Union no attributes and content of single annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stE013" origin="Microsoft">
    <description>Union content of single annotation then simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stE014" origin="Microsoft">
    <description>Union content of two simpleTypes</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stE015" origin="Microsoft">
    <description>Union content of two annotations then simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stE016" origin="Microsoft">
    <description>Union content of simpleType then annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stE017" origin="Microsoft">
    <description>Union memberTypes attribute and content of simpleType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stE018" origin="Microsoft">
    <description>Union derived from complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stE018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF001" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of length</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stF002" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of maxLength</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stF003" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of minLength</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stF004" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of enumeration</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stF005" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of whitespace</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF006" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of pattern</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stF007" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of duration</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF008" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of encoding</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF009" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of maxExclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF010" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of maxInclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF011" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of minExclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF012" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of minInclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF013" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of period</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF014" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of precision</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF015" origin="Microsoft">
    <description>Derived datatype from List with constraining facet of scale</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF016" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of pattern</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF016.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stF017" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of enumeration</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stF018" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of length</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF019" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of maxLength</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF020" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of minLength</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF021" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of whitespace</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF022" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of duration</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF023" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of encoding</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF024" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of maxExclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF025" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of maxInclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF025.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF026" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of minExclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF027" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of minInclusive</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF028" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of period</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF029" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of precision</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF030" origin="Microsoft">
    <description>Derived datatype from Union with constraining facet of scale</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF030.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF031" origin="Microsoft">
    <description>Check that simpleType final works for list, union and restriction</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF031.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF032" origin="Microsoft">
    <description>Check that simpleType final works for #all</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF032.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stF033" origin="Microsoft">
    <description>Check that simpleType final works for #all</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF033.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF034" origin="Microsoft">
    <description>Check that use of finalDefault = list stops simpleType derivations</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF034.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stF035" origin="Microsoft">
    <description>Check that use of finalDefault = list stops simpleType derivations</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF035.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stF036" origin="Microsoft">
    <description>Check that use of finalDefault = union stops simpleType derivations</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF036.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stF037" origin="Microsoft">
    <description>Check that use of finalDefault = union stops simpleType derivations</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stF037.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stG001" origin="Microsoft">
    <description>list of atomic type instance document contains items of the same atomic type</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stG002" origin="Microsoft">
    <description>list of atomic type with facet of 'maxLength' value = '3' instance document has 3 items</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stG003" origin="Microsoft">
    <description>list of atomic type with facet of 'maxLength' value = '3' instance document has 4 items</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="stG004" origin="Microsoft">
    <description>schema is a list derived from a union of integer and NMTOKEN instance document contains valid items of integer and NMTOKEN</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stG005" origin="Microsoft">
    <description>schema is a list derived from a union of integer and NMTOKEN instance document contains float</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="stG006" origin="Microsoft">
    <description>list of atomic type with facet of 'length' value = '2' instance document has 2 items</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stG007" origin="Microsoft">
    <description>list of atomic type with facet of 'length' value = '2' instance document has 1 item</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG007.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="stG008" origin="Microsoft">
    <description>list of atomic type with facet of 'minLength' value = '2' instance document has 3 items</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG008.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stG009" origin="Microsoft">
    <description>list of atomic type with facet of 'minLength' value = '2' instance document has 1 item</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="stG010" origin="Microsoft">
    <description>list of NMTOKEN type with facet of 'enumeration' value = 'CA' instance document has 'CA' value</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stG011" origin="Microsoft">
    <description>list of NMTOKEN type with facet of 'enumeration' value = 'CA' instance document has 'WA' value</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="stG012" origin="Microsoft">
    <description>list of string type with facet of 'pattern' value = '[A-C]{0,2}' instance document has 'CA' value</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stG013" origin="Microsoft">
    <description>list of string type with facet of 'pattern' value = '[A-C]{0,2}' instance document has 'WA' value</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stG013.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="stH001" origin="Microsoft">
    <description>schema defines a union of positiveInteger with minInclusive and maxInclusive restrictions and NMTOKEN with enumeration instance document has valid values</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stH002" origin="Microsoft">
    <description>schema defines a union of positiveInteger with minInclusive and maxInclusive restrictions and NMTOKEN with enumeration instance document an invalid value</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="stH003" origin="Microsoft">
    <description>schema defines a union with memberTypes of a list of states(restricted strings) and a list of zip codes(restricted positiveIntegers) instance document has valid values</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stH004" origin="Microsoft">
    <description>schema defines a union with memberTypes of a list of states(restricted strings) and a list of zip codes(restricted positiveIntegers) instance document has zip code out of range</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH004.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="stH005" origin="Microsoft">
    <description>union derived from list of zip codes with restriction facet 'pattern' with a value of '[0-8]{5}' instance document has zip code='12345'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stH006" origin="Microsoft">
    <description>union derived from list of zip codes with restriction facet 'pattern' with a value of '[0-8]{5}' instance document has zip code = '98765'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="stH007" origin="Microsoft">
    <description>union derived from list of states with restriction facet 'enumeration' with a value of 'CA' instance document has state = 'CA'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="stH008" origin="Microsoft">
    <description>union derived from list of states with restriction facet 'enumeration' with a value of 'CA' instance document has state = 'WA'</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stH008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="stI001" origin="Microsoft">
    <description>atomic. base type definition is atomic</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stI001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stI002" origin="Microsoft">
    <description>atomic. base type definition is union</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stI002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stI003" origin="Microsoft">
    <description>atomic. base type definition is list</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stI003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stI004" origin="Microsoft">
    <description>atomic. base type definition is complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stI004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stI005" origin="Microsoft">
    <description>atomic. derived facet value is outside base facet acceptable restriction.</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stI005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ001" origin="Microsoft">
    <description>list. item type definition refers to atomic type</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stJ002" origin="Microsoft">
    <description>list. item type definition refers to union type</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stJ003" origin="Microsoft">
    <description>list. item type definition refers to complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ004" origin="Microsoft">
    <description>list. length facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stJ005" origin="Microsoft">
    <description>list. minLength facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stJ006" origin="Microsoft">
    <description>list. maxLength facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ006.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stJ007" origin="Microsoft">
    <description>list. pattern facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ007.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stJ008" origin="Microsoft">
    <description>list. enumeration facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stJ009" origin="Microsoft">
    <description>list. whiteSpace facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ010" origin="Microsoft">
    <description>list. maxInclusive facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ011" origin="Microsoft">
    <description>list. maxExclusive facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ012" origin="Microsoft">
    <description>list. minExclusive facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ013" origin="Microsoft">
    <description>list. minInclusive facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ014" origin="Microsoft">
    <description>list. precision facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ015" origin="Microsoft">
    <description>list. scale facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ016" origin="Microsoft">
    <description>list. encoding facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ017" origin="Microsoft">
    <description>list. duration facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ018" origin="Microsoft">
    <description>list. period facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stJ019" origin="Microsoft">
    <description>list. item type definition refers to listType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stJ019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK001" origin="Microsoft">
    <description>union. memberTypes definition refers to atomic type</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stK002" origin="Microsoft">
    <description>union. memberTypes definition refers to union type</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK003" origin="Microsoft">
    <description>union. memberTypes definition refers to complexType</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK004" origin="Microsoft">
    <description>union. memberTypes definition refers to list type</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stK005" origin="Microsoft">
    <description>union. length facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK006" origin="Microsoft">
    <description>union. minLength facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK007" origin="Microsoft">
    <description>union. maxLength facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK008" origin="Microsoft">
    <description>union. pattern facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stK009" origin="Microsoft">
    <description>union. enumeration facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stK010" origin="Microsoft">
    <description>union. whiteSpace facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK011" origin="Microsoft">
    <description>union. maxInclusive facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK011.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK012" origin="Microsoft">
    <description>union. maxExclusive facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK013" origin="Microsoft">
    <description>union. minExclusive facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK014" origin="Microsoft">
    <description>union. minInclusive facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK015" origin="Microsoft">
    <description>union. precision facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK016" origin="Microsoft">
    <description>union. scale facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK017" origin="Microsoft">
    <description>union. encoding facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK017.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK018" origin="Microsoft">
    <description>union. duration facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stK019" origin="Microsoft">
    <description>union. period facet</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stK019.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stZ001" origin="Microsoft">
    <description>70971 - simpleType does not support final attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stZ001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="stZ002" origin="Microsoft">
    <description>67942 - Schema Component Constraint: enumeration valid restriction is not implemented</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stZ002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stZ003" origin="Microsoft">
    <description>71430 - simpleType final attribute incorrectly supports extension enumeration</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stZ003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="stZ004" origin="Microsoft">
    <description>63063 - xsd:can not specify HalfWidth-KANA to Instance documents when schema has pattern facet including Japanese character.</description>
    <files>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stZ004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="simpleType" fileName="stZ004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildA001" origin="Microsoft">
    <description>ANY with ID='foo25'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildA001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildA002" origin="Microsoft">
    <description>ANY with ID='_foo-2.5'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildA002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildA003" origin="Microsoft">
    <description>ANY with ID='25'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildA003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildA004" origin="Microsoft">
    <description>ANY with ID='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildA004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildA005" origin="Microsoft">
    <description>ANY with ID='1'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildA005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildA006" origin="Microsoft">
    <description>ANY with ID='foo:bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildA006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildA007" origin="Microsoft">
    <description>ANY with ID=':bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildA007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildA008" origin="Microsoft">
    <description>Duplicate ID='foo25' where foo25 is already exists</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildA008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildB009" origin="Microsoft">
    <description>ANY with maxOccurs='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB010" origin="Microsoft">
    <description>ANY with maxOccurs='10'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB011" origin="Microsoft">
    <description>ANY with maxOccurs='32767'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB012" origin="Microsoft">
    <description>ANY with maxOccurs='unbounded'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB013" origin="Microsoft">
    <description>ANY with maxOccurs='010'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB014" origin="Microsoft">
    <description>ANY with maxOccurs=''</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildB015" origin="Microsoft">
    <description>ANY with maxOccurs='-1'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildB016" origin="Microsoft">
    <description>ANY with maxOccurs='Unbounded'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildB017" origin="Microsoft">
    <description>ANY with minOccurs='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB018" origin="Microsoft">
    <description>ANY with minOccurs='10'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB018.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB019" origin="Microsoft">
    <description>ANY with minOccurs='32767'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB019.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB020" origin="Microsoft">
    <description>ANY with minOccurs='unbounded'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildB021" origin="Microsoft">
    <description>ANY with minOccurs='010'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB021.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB022" origin="Microsoft">
    <description>ANY with minOccurs=''</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildB023" origin="Microsoft">
    <description>ANY with minOccurs='-1'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildB024" origin="Microsoft">
    <description>ANY with minOccurs='Unbounded'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildB025" origin="Microsoft">
    <description>ANY with minOccurs='0' maxOccurs='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB025.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB026" origin="Microsoft">
    <description>ANY with minOccurs='1' maxOccurs='2'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB026.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildB027" origin="Microsoft">
    <description>ANY with minOccurs='2' maxOccurs='1'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildB028" origin="Microsoft">
    <description>ANY with minOccurs='unbounded' maxOccurs='unbounded'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildB029" origin="Microsoft">
    <description>ANY with minOccurs='0' maxOccurs='9'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildB029.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC030" origin="Microsoft">
    <description>ANY with namespace =</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC030.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC031" origin="Microsoft">
    <description>ANY with namespace = ##any</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC031.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC032" origin="Microsoft">
    <description>ANY with namespace = ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC032.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC033" origin="Microsoft">
    <description>ANY with namespace = ##other</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC033.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC034" origin="Microsoft">
    <description>ANY with namespace = ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC034.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC035" origin="Microsoft">
    <description>ANY with namespace = ##target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC035.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC036" origin="Microsoft">
    <description>ANY with namespace = ##all</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC036.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC037" origin="Microsoft">
    <description>ANY with namespace = #any</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC037.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC038" origin="Microsoft">
    <description>ANY with namespace = #local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC038.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC039" origin="Microsoft">
    <description>ANY with namespace = #other</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC039.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC040" origin="Microsoft">
    <description>ANY with namespace = #targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC040.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC041" origin="Microsoft">
    <description>ANY with namespace = #target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC041.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC042" origin="Microsoft">
    <description>ANY with namespace = #all</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC042.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC043" origin="Microsoft">
    <description>ANY with namespace = any</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC043.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC044" origin="Microsoft">
    <description>ANY with namespace = local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC044.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC045" origin="Microsoft">
    <description>ANY with namespace = other</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC045.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC046" origin="Microsoft">
    <description>ANY with namespace = targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC046.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC047" origin="Microsoft">
    <description>ANY with namespace = target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC047.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC048" origin="Microsoft">
    <description>ANY with namespace = all</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC048.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC049" origin="Microsoft">
    <description>ANY with namespace = ##any ##other</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC049.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC050" origin="Microsoft">
    <description>ANY with namespace = ##any ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC050.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC051" origin="Microsoft">
    <description>ANY with namespace = ##any ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC051.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC052" origin="Microsoft">
    <description>ANY with namespace = ##other ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC052.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC053" origin="Microsoft">
    <description>ANY with namespace = ##other ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC053.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC054" origin="Microsoft">
    <description>ANY with namespace = ##local ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC054.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC055" origin="Microsoft">
    <description>ANY with namespace = ##any ##other ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC055.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC056" origin="Microsoft">
    <description>ANY with namespace = ##any ##other ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC056.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC057" origin="Microsoft">
    <description>ANY with namespace = ##any ##local ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC057.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC058" origin="Microsoft">
    <description>ANY with namespace = ##any ##other ##local ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC058.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC059" origin="Microsoft">
    <description>ANY with namespace = http://www.w3.org/1999/xhtml</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC059.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC060" origin="Microsoft">
    <description>ANY with namespace = http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC060.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC061" origin="Microsoft">
    <description>ANY with namespace = http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC061.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC062" origin="Microsoft">
    <description>ANY with namespace = http://www.w3.org/Graphics/SVG/</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC062.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC063" origin="Microsoft">
    <description>ANY with namespace = http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC063.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC064" origin="Microsoft">
    <description>ANY with namespace = http://www.w3.org/1999/XMLSchema</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC064.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC065" origin="Microsoft">
    <description>ANY with namespace = http://www.w3.org/1999/XMLSchema http://www.w3.org/1999/XMLSchema-instance http://www.w3.org/1999/XMLSchema-datatypes</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC065.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC066" origin="Microsoft">
    <description>ANY with namespace = ##any http://www.w3.org/1999/xhtml http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema http://www.w3.org/Graphics/SVG/ http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC066.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC067" origin="Microsoft">
    <description>ANY with namespace = ##other http://www.w3.org/1999/xhtml http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema http://www.w3.org/Graphics/SVG/ http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC067.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildC068" origin="Microsoft">
    <description>ANY with namespace = ##local http://www.w3.org/1999/xhtml http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema http://www.w3.org/Graphics/SVG/ http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC068.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC069" origin="Microsoft">
    <description>ANY with namespace = ##targetNamespace http://www.w3.org/1999/xhtml http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema http://www.w3.org/Graphics/SVG/ http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC069.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildC070" origin="Microsoft">
    <description>ANY with namespace = ##local ##targetNamespace http://www.w3.org/1999/xhtml http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema http://www.w3.org/Graphics/SVG/ http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildC070.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildD071" origin="Microsoft">
    <description>ANY with processContents =</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildD071.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildD072" origin="Microsoft">
    <description>ANY with processContents = lax</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildD072.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildD073" origin="Microsoft">
    <description>ANY with processContents = skip</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildD073.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildD074" origin="Microsoft">
    <description>ANY with processContents = strict</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildD074.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildD075" origin="Microsoft">
    <description>ANY with processContents = lax skip</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildD075.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildD076" origin="Microsoft">
    <description>ANY with processContents = lax strict</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildD076.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildD077" origin="Microsoft">
    <description>ANY with processContents = skip strict</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildD077.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildD078" origin="Microsoft">
    <description>ANY with processContents = lax skip strict</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildD078.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildD079" origin="Microsoft">
    <description>ANY with processContents = all</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildD079.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildE001" origin="Microsoft">
    <description>ANY with an annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildE001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildE002" origin="Microsoft">
    <description>ANY with two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildE002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF001" origin="Microsoft">
    <description>ANY with namespace = ##any and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildF002" origin="Microsoft">
    <description>ANY with namespace = ##local and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildF003" origin="Microsoft">
    <description>ANY with namespace = ##other and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildF004" origin="Microsoft">
    <description>ANY with namespace = ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildF005" origin="Microsoft">
    <description>ANY with namespace = http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildF006" origin="Microsoft">
    <description>ANY with namespace = ##any ##other and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF007" origin="Microsoft">
    <description>ANY with namespace = ##any ##local and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF008" origin="Microsoft">
    <description>ANY with namespace = ##any ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF009" origin="Microsoft">
    <description>ANY with namespace = ##other ##local and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF010" origin="Microsoft">
    <description>ANY with namespace = ##other ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF011" origin="Microsoft">
    <description>ANY with namespace = ##local ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildF012" origin="Microsoft">
    <description>ANY with namespace = ##any ##other ##local and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF013" origin="Microsoft">
    <description>ANY with namespace = ##any ##other ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF014" origin="Microsoft">
    <description>ANY with namespace = ##any ##local ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF015" origin="Microsoft">
    <description>ANY with namespace = ##any ##other ##local ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF016" origin="Microsoft">
    <description>ANY with namespace = ##any http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF017" origin="Microsoft">
    <description>ANY with namespace = ##local http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildF018" origin="Microsoft">
    <description>ANY with namespace = ##other http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildF019" origin="Microsoft">
    <description>ANY with namespace = ##targetNamespace http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF019.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildF020" origin="Microsoft">
    <description>ANY with namespace = ##local ##targetNamespace http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildF020.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildG001" origin="Microsoft">
    <description>ANY (w/ namespace=##any) and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG002" origin="Microsoft">
    <description>ANY (w/ namespace=##any) and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG003" origin="Microsoft">
    <description>ANY (w/ namespace=##other) and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG004" origin="Microsoft">
    <description>ANY (w/ namespace=##other) and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG005" origin="Microsoft">
    <description>ANY (w/ namespace=##local) and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG005.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG006" origin="Microsoft">
    <description>ANY (w/ namespace=##local) and instance document has elements from no namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG007" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace) and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG008" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace) and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG009" origin="Microsoft">
    <description>ANY (w/ namespace=##local http://www.w3.org/1999/xhtml) and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG010" origin="Microsoft">
    <description>ANY (w/ namespace=##local http://www.w3.org/1999/xhtml) and instance document has elements from both namespaces</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG011" origin="Microsoft">
    <description>ANY (w/ namespace=##local http://www.w3.org/1999/xhtml) and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG012" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG013" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) and instance document has elements from the xhtml namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG014" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG014.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG015" origin="Microsoft">
    <description>ANY (w/ namespace=##any) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG016" origin="Microsoft">
    <description>ANY (w/ namespace=##any) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG017" origin="Microsoft">
    <description>ANY (w/ namespace=##other) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG017.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG018" origin="Microsoft">
    <description>ANY (w/ namespace=##other) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG019" origin="Microsoft">
    <description>ANY (w/ namespace=##local) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG019.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG020" origin="Microsoft">
    <description>ANY (w/ namespace=##local) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG020.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG021" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG022" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG022.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG023" origin="Microsoft">
    <description>ANY (w/ namespace=http://foobar) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG024" origin="Microsoft">
    <description>ANY (w/ namespace=http://foobar) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG024.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG025" origin="Microsoft">
    <description>ANY (w/ namespace=##other) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG025.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG026" origin="Microsoft">
    <description>ANY (w/ namespace=##other) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG027" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG028" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG028.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG029" origin="Microsoft">
    <description>ANY (w/ namespace=##local) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG029.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG030" origin="Microsoft">
    <description>ANY (w/ namespace=##local) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG030.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG031" origin="Microsoft">
    <description>ANY (w/ namespace=A B C D E ##local ##targetNamespace) with schema targetNamespace=http://foobar and instance document has elements from all of them</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG032" origin="Microsoft">
    <description>ANY (w/ namespace=A B C D E ##local ##targetNamespace) with schema targetNamespace=http://foobar and instance document has elements from all of them + bar</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG032.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG033" origin="Microsoft">
    <description>ANY (w/ namespace=##local http://foobar) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG034" origin="Microsoft">
    <description>ANY (w/ namespace=##local http://foobar) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG034.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG035" origin="Microsoft">
    <description>ANY (w/ namespace=##local http://www.w3.org/1999/xhtml) with schema targetNamespace=http://www.w3.org/1999/xhtml and instance document has elements from local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG035.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG036" origin="Microsoft">
    <description>ANY (w/ namespace=##local http://www.w3.org/1999/xhtml) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG036.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG036.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG037" origin="Microsoft">
    <description>ANY (w/ namespace=##local http://www.w3.org/1999/xhtml) with schema targetNamespace=http://foobar and instance document has elements from the xhtml namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG037.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG038" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG038.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG038.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildG039" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) with schema targetNamespace=http://foobar and instance document has elements from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG039.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG039.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildG040" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) with schema targetNamespace=http://foobar and instance document has elements from the xhtml namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG040.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildG040.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildH001" origin="Microsoft">
    <description>ANY (w/ processContents=strict and namespace=##targetNamespace) with schema targetNamespace=http://www.w3.org/1999/xhtml and instance document has undeclared elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH001.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildH002" origin="Microsoft">
    <description>ANY (w/ processContents=strict and namespace=##targetNamespace) with schema targetNamespace=http://www.w3.org/1999/xhtml and instance document has elements from other namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildH003" origin="Microsoft">
    <description>ANY (w/ processContents=lax and namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildH004" origin="Microsoft">
    <description>ANY (w/ processContents=lax and namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has undeclared elements from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildH006" origin="Microsoft">
    <description>ANY (w/ processContents=skip and namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has elements from other namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildH007" origin="Microsoft">
    <description>ANY (w/ namespace=http://www.w3.org/1999/xhtml and declared element, processContents=strict)</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildH008" origin="Microsoft">
    <description>ANY (w/ namespace=http://www.w3.org/1999/xhtml and undeclared element, processContents=strict)</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildH009" origin="Microsoft">
    <description>ANY (w/ namespace=http://www.w3.org/1999/xhtml and declared element, processContents=lax)</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH009.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildH010" origin="Microsoft">
    <description>ANY (w/ namespace=http://www.w3.org/1999/xhtml and undeclared element, processContents=lax)</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildH010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildI001" origin="Microsoft">
    <description>ANY with an attribute that has a non-schema namespace, a:b='c' where xmlns:a='foo' in xsd:schema</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildI002" origin="Microsoft">
    <description>ANY with an attribute a:b='c' where a doesn't have a non-schema namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildI003" origin="Microsoft">
    <description>ANY with an attribute foo='bar' where foo is a random attribute</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildI004" origin="Microsoft">
    <description>Regression of 67191 - ensuring that processContents of lax will validate</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildI005" origin="Microsoft">
    <description>multiple any in sequence with different namespaces and valid instance xml</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildI006" origin="Microsoft">
    <description>multiple any in choice with different namespaces (a, b, ##targetNamespace, ##local), and valid instance xml</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildI007" origin="Microsoft">
    <description>multiple any in choice with namespaces (##other, ##targetNamespace), and valid instance xml</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildI008" origin="Microsoft">
    <description>multiple any in choice with namespaces (##other, ##local), non-deterministic declaration</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildI009" origin="Microsoft">
    <description>multiple any in choice with namespaces (##other, A), non-deterministic declaration</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildI010" origin="Microsoft">
    <description>multiple any in choice with namespaces (A, A), non-deterministic declaration</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildI011" origin="Microsoft">
    <description>multiple any in sequence with namespaces (##other{1}, A{1}), non-deterministic declaration</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI011.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildI012" origin="Microsoft">
    <description>multiple any in sequence with namespaces (##other{1}, A{2}), non-deterministic declaration</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildI013" origin="Microsoft">
    <description>multiple any in sequence with namespaces (##other{2}, A{1}), non-deterministic declaration</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildI013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildJ001" origin="Microsoft">
    <description>anyAttribute with ID='foo25'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildJ001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildJ002" origin="Microsoft">
    <description>anyAttribute with ID='_foo-2.5'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildJ002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildJ003" origin="Microsoft">
    <description>anyAttribute with ID='25'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildJ003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildJ004" origin="Microsoft">
    <description>anyAttribute with ID='0'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildJ004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildJ005" origin="Microsoft">
    <description>anyAttribute with ID='1'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildJ005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildJ006" origin="Microsoft">
    <description>anyAttribute with ID='foo:bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildJ006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildJ007" origin="Microsoft">
    <description>anyAttribute with ID=':bar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildJ007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildJ008" origin="Microsoft">
    <description>Duplicate ID='foo25' where foo25 is already exists</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildJ008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK001" origin="Microsoft">
    <description>anyAttribute with namespace =</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK002" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK003" origin="Microsoft">
    <description>anyAttribute with namespace = ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK004" origin="Microsoft">
    <description>anyAttribute with namespace = ##other</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK005" origin="Microsoft">
    <description>anyAttribute with namespace = ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK006" origin="Microsoft">
    <description>anyAttribute with namespace = ##target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK007" origin="Microsoft">
    <description>anyAttribute with namespace = ##all</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK008" origin="Microsoft">
    <description>anyAttribute with namespace = #anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK008.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK009" origin="Microsoft">
    <description>anyAttribute with namespace = #local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK009.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK010" origin="Microsoft">
    <description>anyAttribute with namespace = #other</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK010.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK011" origin="Microsoft">
    <description>anyAttribute with namespace = #targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK012" origin="Microsoft">
    <description>anyAttribute with namespace = #target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK012.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK013" origin="Microsoft">
    <description>anyAttribute with namespace = #all</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK013.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK014" origin="Microsoft">
    <description>anyAttribute with namespace = anyAttribute</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK014.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK015" origin="Microsoft">
    <description>anyAttribute with namespace = local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK015.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK016" origin="Microsoft">
    <description>anyAttribute with namespace = other</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK016.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK017" origin="Microsoft">
    <description>anyAttribute with namespace = targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK018" origin="Microsoft">
    <description>anyAttribute with namespace = target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK018.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK019" origin="Microsoft">
    <description>anyAttribute with namespace = all</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK019.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK020" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##other</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK020.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK021" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK021.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK022" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK022.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK023" origin="Microsoft">
    <description>anyAttribute with namespace = ##other ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK023.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK024" origin="Microsoft">
    <description>anyAttribute with namespace = ##other ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK024.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK025" origin="Microsoft">
    <description>anyAttribute with namespace = ##local ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK025.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK026" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##other ##local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK026.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK027" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##other ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK027.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK028" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##local ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK028.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK029" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##other ##local ##targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK029.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK030" origin="Microsoft">
    <description>anyAttribute with namespace = http://www.w3.org/1999/xhtml</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK030.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK031" origin="Microsoft">
    <description>anyAttribute with namespace = http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK031.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK032" origin="Microsoft">
    <description>anyAttribute with namespace = http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK032.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK033" origin="Microsoft">
    <description>anyAttribute with namespace = http://www.w3.org/Graphics/SVG/</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK033.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK034" origin="Microsoft">
    <description>anyAttribute with namespace = http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK034.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK035" origin="Microsoft">
    <description>anyAttribute with namespace = http://www.w3.org/1999/XMLSchema</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK035.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK036" origin="Microsoft">
    <description>anyAttribute with namespace = http://www.w3.org/1999/XMLSchema http://www.w3.org/1999/XMLSchema-instance http://www.w3.org/1999/XMLSchema-datatypes</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK036.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK037" origin="Microsoft">
    <description>anyAttribute with namespace = http://www.w3.org/1999/xhtml http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema http://www.w3.org/Graphics/SVG/ http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK037.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK038" origin="Microsoft">
    <description>anyAttribute with namespace = ##other http://www.w3.org/1999/xhtml http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema http://www.w3.org/Graphics/SVG/ http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK038.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildK039" origin="Microsoft">
    <description>anyAttribute with namespace = ##local http://www.w3.org/1999/xhtml http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema http://www.w3.org/Graphics/SVG/ http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK039.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK040" origin="Microsoft">
    <description>anyAttribute with namespace = ##targetNamespace http://www.w3.org/1999/xhtml http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema http://www.w3.org/Graphics/SVG/ http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK040.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildK041" origin="Microsoft">
    <description>anyAttribute with namespace = ##local ##targetNamespace http://www.w3.org/1999/xhtml http://www.w3.org/1999/XSL/Transform http://www.w3.org/1999/XML/xinclude http://www.w3.org/1999/02/22-rdf-syntax-ns http://www.w3.org/2000/01/rdf-schema http://www.w3.org/Graphics/SVG/ http://www.w3.org/2000/02/xmldsig http://www.w3.org/TR/2000/WD-xml-c14n-20000119</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildK041.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildL001" origin="Microsoft">
    <description>anyAttribute with processContents =</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildL001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildL002" origin="Microsoft">
    <description>anyAttribute with processContents = lax</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildL002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildL003" origin="Microsoft">
    <description>anyAttribute with processContents = skip</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildL003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildL004" origin="Microsoft">
    <description>anyAttribute with processContents = strict</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildL004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildL005" origin="Microsoft">
    <description>anyAttribute with processContents = lax skip</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildL005.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildL006" origin="Microsoft">
    <description>anyAttribute with processContents = lax strict</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildL006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildL007" origin="Microsoft">
    <description>anyAttribute with processContents = skip strict</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildL007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildL008" origin="Microsoft">
    <description>anyAttribute with processContents = lax skip strict</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildL008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildL009" origin="Microsoft">
    <description>anyAttribute with processContents = all</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildL009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildM001" origin="Microsoft">
    <description>anyAttribute with an annotation</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildM001.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildM002" origin="Microsoft">
    <description>anyAttribute with two annotations</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildM002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN001" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN002" origin="Microsoft">
    <description>anyAttribute with namespace = ##local and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN002.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildN003" origin="Microsoft">
    <description>anyAttribute with namespace = ##other and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN003.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildN004" origin="Microsoft">
    <description>anyAttribute with namespace = ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN004.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildN005" origin="Microsoft">
    <description>anyAttribute with namespace = http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN005.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildN006" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##other and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN006.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN007" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##local and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN007.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN008" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN008.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN009" origin="Microsoft">
    <description>anyAttribute with namespace = ##other ##local and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN009.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN010" origin="Microsoft">
    <description>anyAttribute with namespace = ##other ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN010.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN011" origin="Microsoft">
    <description>anyAttribute with namespace = ##local ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN011.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildN012" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##other ##local and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN012.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN013" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##other ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN013.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN014" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##local ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN014.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN015" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute ##other ##local ##targetNamespace and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN015.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN016" origin="Microsoft">
    <description>anyAttribute with namespace = ##anyAttribute http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN016.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN017" origin="Microsoft">
    <description>anyAttribute with namespace = ##local http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN017.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildN018" origin="Microsoft">
    <description>anyAttribute with namespace = ##other http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN018.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildN019" origin="Microsoft">
    <description>anyAttribute with namespace = ##targetNamespace http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN019.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildN020" origin="Microsoft">
    <description>anyAttribute with namespace = ##local ##targetNamespace http://foobar and schema targetNamespace='http://foobar'</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildN020.xsd" role="schema" validity="1"/>
    </files>
  </test>
  <test id="wildQ001" origin="Microsoft">
    <description>ANYAttribute declared twice</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildQ001.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildQ002" origin="Microsoft">
    <description>ANYAttribute (minoccurs=2)</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildQ002.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildQ003" origin="Microsoft">
    <description>ANYAttribute (maxoccurs=2)</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildQ003.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildQ004" origin="Microsoft">
    <description>ANYAttribute (minoccurs=2, maxoccurs=unbounded)</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildQ004.xsd" role="schema" validity="0"/>
    </files>
  </test>
  <test id="wildO001" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##any) and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO002" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##any) and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO002.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO003" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##other) and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO003.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO004" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##other) and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO005" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local) and instance document has attributes from local Namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO006" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local) and instance document has attributes from other namespaces besides local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO006.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO007" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##targetNamespace) and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO007.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO007.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO008" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##targetNamespace) and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO008.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO008.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO009" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local http://www.w3.org/1999/xhtml) and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO009.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO009.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO010" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local http://www.w3.org/1999/xhtml) and instance document has attributes from the xhtml namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO010.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO010.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO011" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local http://www.w3.org/1999/xhtml) and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO011.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO011.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO012" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO012.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO012.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO013" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) and instance document has attributes from the xhtml namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO013.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO013.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO014" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO014.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO014.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO015" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##any) with schema targetNamespace=http://foobar and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO015.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO015.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO016" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##any) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO016.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO016.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO017" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##other) with schema targetNamespace=http://foobar and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO017.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO017.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO018" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##other) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO018.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO018.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO019" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local) with schema targetNamespace=http://foobar and instance document has attributes from local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO019.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO019.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO020" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO020.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO020.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO021" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO021.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO021.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO022" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO022.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO022.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO023" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=http://foobar) with schema targetNamespace=http://foobar and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO023.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO023.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO024" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=http://foobar) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO024.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO024.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO025" origin="Microsoft">
    <description>ANY (w/ namespace=##other) with schema targetNamespace=http://foobar and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO025.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO025.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO026" origin="Microsoft">
    <description>ANY (w/ namespace=##other) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO026.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO026.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO027" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO027.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO027.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO028" origin="Microsoft">
    <description>ANY (w/ namespace=##targetNamespace) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO028.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO028.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO029" origin="Microsoft">
    <description>ANY (w/ namespace=##local) with schema targetNamespace=http://foobar and instance document has attributes from local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO029.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO029.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO030" origin="Microsoft">
    <description>ANY (w/ namespace=##local) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO030.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO030.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO031" origin="Microsoft">
    <description>ANY (w/ namespace=http://foobar) with schema targetNamespace=http://foobar and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO031.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO031.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO032" origin="Microsoft">
    <description>ANY (w/ namespace=http://foobar) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO032.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO032.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO033" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local http://foobar) with schema targetNamespace=http://foobar and instance document has attributes from local</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO033.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO033.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO034" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local http://foobar) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides listed</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO034.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO034.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO035" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local http://www.w3.org/1999/xhtml) with schema targetNamespace=http://foobar and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO035.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO035.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO037" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##local http://www.w3.org/1999/xhtml) with schema targetNamespace=http://foobar and instance document has attributes from the xhtml namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO037.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO037.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO038" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) with schema targetNamespace=http://foobar and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO038.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO038.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildO039" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) with schema targetNamespace=http://foobar and instance document has attributes from other namespaces besides target</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO039.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO039.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildO040" origin="Microsoft">
    <description>ANYAttribute (w/ namespace=##targetNamespace http://www.w3.org/1999/xhtml) with schema targetNamespace=http://foobar and instance document has attributes from the xhtml namespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO040.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildO040.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildP001" origin="Microsoft">
    <description>ANYAttribute (w/ processContents=strict and namespace=##targetNamespace) with schema targetNamespace=http://foobar, attribute declared and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP001.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildP002" origin="Microsoft">
    <description>ANYAttribute (w/ processContents=strict and namespace=##targetNamespace) with schema targetNamespace=http://foobar, attribute not declared and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP002.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP002.xml" role="instance" validity="0"/>
    </files>
  </test>
  <test id="wildP003" origin="Microsoft">
    <description>ANYAttribute (w/ processContents=lax and namespace=##targetNamespace) with schema targetNamespace=http://foobar, attribute declared and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP003.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP003.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildP004" origin="Microsoft">
    <description>ANYAttribute (w/ processContents=lax and namespace=##targetNamespace) with schema targetNamespace=http://foobar, attribute not declared and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP004.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP004.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildP005" origin="Microsoft">
    <description>ANYAttribute (w/ processContents=skip and namespace=##targetNamespace) with schema targetNamespace=http://foobar, attribute declared and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP005.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP005.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildP006" origin="Microsoft">
    <description>ANYAttribute (w/ processContents=skip and namespace=##targetNamespace) with schema targetNamespace=http://foobar, attribute not declared and instance document has attributes from targetNamespace</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP006.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildP006.xml" role="instance" validity="1"/>
    </files>
  </test>
  <test id="wildZ001" origin="Microsoft">
    <description>Bug 64502 - Error validating namespace set to a valid namespace URI and instance document has correct elements</description>
    <files>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildZ001.xsd" role="schema" validity="1"/>
      <file tsDir="msxsdtest" folder="wildCards" fileName="wildZ001.xml" role="instance" validity="0"/>
    </files>
  </test>
</tests>
