--- gtk+/gtk/gtktreemodelfilter.c	(revision 907)
+++ gtk+/gtk/gtktreemodelfilter.c	(revision 909)
@@ -510,7 +510,8 @@
       parent_elt = parent_level->parent_elt;
       parent_level = parent_level->parent_level;
     }
-  filter->priv->zero_ref_count++;
+  if (new_level != filter->priv->root)
+    filter->priv->zero_ref_count++;
 
   i = 0;
 
@@ -536,6 +537,16 @@
 
           if (!new_level->parent_level)
             filter->priv->root_level_visible++;
+          else
+            {
+              GtkTreeIter f_iter;
+
+              f_iter.stamp = filter->priv->stamp;
+              f_iter.user_data = new_level;
+              f_iter.user_data2 = &(g_array_index (new_level->array, FilterElt, new_level->array->len - 1));
+
+              gtk_tree_model_filter_ref_node (GTK_TREE_MODEL (filter), &f_iter);
+            }
         }
       i++;
     }
@@ -550,6 +561,24 @@
 
   g_assert (filter_level);
 
+  for (i = 0; i < filter_level->array->len; i++)
+    {
+      if (g_array_index (filter_level->array, FilterElt, i).children)
+        gtk_tree_model_filter_free_level (filter,
+                                          FILTER_LEVEL (g_array_index (filter_level->array, FilterElt, i).children));
+
+      if (filter_level->parent_level)
+        {
+          GtkTreeIter f_iter;
+
+          f_iter.stamp = filter->priv->stamp;
+          f_iter.user_data = filter_level;
+          f_iter.user_data2 = &(g_array_index (filter_level->array, FilterElt, i));
+
+          gtk_tree_model_filter_unref_node (GTK_TREE_MODEL (filter), &f_iter);
+        }
+    }
+
   if (filter_level->ref_count == 0)
     {
       FilterLevel *parent_level = filter_level->parent_level;
@@ -570,13 +599,6 @@
       filter->priv->zero_ref_count--;
     }
 
-  for (i = 0; i < filter_level->array->len; i++)
-    {
-      if (g_array_index (filter_level->array, FilterElt, i).children)
-        gtk_tree_model_filter_free_level (filter,
-                                          FILTER_LEVEL (g_array_index (filter_level->array, FilterElt, i).children));
-    }
-
   if (!filter_level->parent_level)
     filter->priv->root_level_visible = 0;
 
@@ -1087,6 +1109,8 @@
 
       if (!level->parent_level)
         filter->priv->root_level_visible--;
+      else
+        gtk_tree_model_filter_unref_node (GTK_TREE_MODEL (filter), &iter);
 
       gtk_tree_model_filter_remove_node (filter, &iter, TRUE);
 
@@ -1153,6 +1177,8 @@
 
   if (!level->parent_level)
     filter->priv->root_level_visible++;
+  else
+    gtk_tree_model_filter_ref_node (GTK_TREE_MODEL (filter), &iter);
 
   /* update stamp */
   gtk_tree_model_row_inserted (GTK_TREE_MODEL (filter), path, &iter);
@@ -1340,6 +1366,16 @@
 
       if (!level->parent_level)
         filter->priv->root_level_visible++;
+      else
+        {
+          GtkTreeIter f_iter;
+
+          f_iter.stamp = filter->priv->stamp;
+          f_iter.user_data = level;
+          f_iter.user_data2 = &g_array_index (level->array, FilterElt, index);
+
+          gtk_tree_model_filter_ref_node (GTK_TREE_MODEL (filter), &f_iter);
+        }
     }
 
   /* another iteration to update the references of children to parents. */
@@ -1408,11 +1444,6 @@
   gtk_tree_model_get_iter (GTK_TREE_MODEL (data), &iter, path);
   elt = FILTER_ELT (iter.user_data2);
 
-  /* Make sure that we clear children of this node if
-     child model has no children */
-  if (elt->children && !gtk_tree_model_iter_has_child(c_model, c_iter))
-    gtk_tree_model_filter_free_level(filter, elt->children);
-
   gtk_tree_model_row_has_child_toggled (GTK_TREE_MODEL (data), path, &iter);
 
   gtk_tree_path_free (path);
@@ -1579,6 +1610,7 @@
   if (!level->parent_level && elt->visible)
     filter->priv->root_level_visible--;
 
+
   if (emit_signal)
     {
       if (level->ref_count == 0 && level != filter->priv->root)
@@ -1594,7 +1626,10 @@
       gtk_tree_model_row_deleted (GTK_TREE_MODEL (data), path);
       iter.stamp = filter->priv->stamp;
 
-      while (elt->ref_count > 0)
+      /* the filter model's reference on the child node is released
+       * below.
+       */
+      while (elt->ref_count > 1)
         gtk_tree_model_filter_real_unref_node (GTK_TREE_MODEL (data), &iter,
                                                FALSE);
     }
@@ -1608,6 +1643,9 @@
     {
       FilterElt *tmp;
 
+      if (level->parent_level)
+        gtk_tree_model_filter_unref_node (GTK_TREE_MODEL (filter), &iter);
+
       /* remove the row */
       tmp = bsearch_elt_with_offset (level->array, elt->offset, &i);
 
--- gtk+/gtk/gtktreemodelsort.c	(revision 907)
+++ gtk+/gtk/gtktreemodelsort.c	(revision 909)
@@ -493,6 +493,8 @@
   level = iter.user_data;
   elt = iter.user_data2;
 
+  level->ref_count++;
+
   if (level->array->len < 2 ||
       (tree_model_sort->sort_column_id == GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID &&
        tree_model_sort->default_sort_func == NO_SORT_FUNC))
@@ -504,6 +506,8 @@
 
       gtk_tree_path_free (path);
 
+      level->ref_count--;
+
       return;
     }
 
@@ -609,6 +613,8 @@
       g_free (new_order);
     }
 
+  level->ref_count--;
+
   /* emit row_changed signal (at new location) */
   gtk_tree_model_get_iter (GTK_TREE_MODEL (data), &iter, path);
   gtk_tree_model_row_changed (GTK_TREE_MODEL (data), path, &iter);
@@ -703,18 +709,6 @@
 	  tmppath = gtk_tree_model_get_path (GTK_TREE_MODEL (data), &tmpiter);
 	  if (tmppath)
 	    {
-              GtkTreePath *path;
-              GtkTreeIter iter;
-              gboolean result;
-
-              path = gtk_tree_path_copy (tmppath);
-              gtk_tree_path_down (path);
-
-              result = gtk_tree_model_get_iter (GTK_TREE_MODEL (data), &iter, path);
-              g_assert (result);
-              gtk_tree_model_row_inserted (GTK_TREE_MODEL (data), path, &iter);
-              gtk_tree_path_free (path);
-
 	      gtk_tree_model_row_has_child_toggled (GTK_TREE_MODEL (data),
 						    tmppath,
 						    &tmpiter);
@@ -733,6 +727,12 @@
   if (!parent_level)
     goto done;
 
+  if (level->ref_count == 0 && level != tree_model_sort->root)
+    {
+      gtk_tree_model_sort_free_level (tree_model_sort, level);
+      goto done;
+    }
+
   if (!gtk_tree_model_sort_insert_value (tree_model_sort,
 					 parent_level,
 					 s_path,
@@ -822,15 +822,17 @@
   if (level->ref_count == 0)
     {
       /* This will prune the level, so I can just emit the signal and not worry
-       * about cleaning this level up. */
+       * about cleaning this level up.
+       * Careful, root level is not cleaned up in increment stamp.
+       */
       gtk_tree_model_sort_increment_stamp (tree_model_sort);
       gtk_tree_path_free (path);
       if (level == tree_model_sort->root)
-      {
-        /* Root level is not cleaned up in increment stamp */
-        gtk_tree_model_sort_free_level(tree_model_sort, tree_model_sort->root);
-        tree_model_sort->root = NULL;
-      }
+	{
+	  gtk_tree_model_sort_free_level (tree_model_sort, 
+					  tree_model_sort->root);
+	   tree_model_sort->root = NULL;
+	}
       return;
     }
 
@@ -1260,15 +1262,20 @@
       SortLevel *parent_level = level->parent_level;
       SortElt *parent_elt = level->parent_elt;
       /* We were at zero -- time to decrement the zero_ref_count val */
+      do
+	{
+	  if (parent_elt)
+	    parent_elt->zero_ref_count--;
+	  else
+	    tree_model_sort->zero_ref_count--;
 
-      while (parent_level && parent_elt)
-      {
-  	    parent_elt->zero_ref_count--;
+	  if (parent_level)
+	    {
 	      parent_elt = parent_level->parent_elt;
 	      parent_level = parent_level->parent_level;
-      }
-
-      tree_model_sort->zero_ref_count--;
+	    }
+	}
+      while (parent_level);
     }
 }
 
@@ -1287,10 +1294,10 @@
   g_return_if_fail (GTK_TREE_MODEL_SORT (tree_model)->stamp == iter->stamp);
 
   if (propagate_unref)
-  {
-    GET_CHILD_ITER (tree_model, &child_iter, iter);
-    gtk_tree_model_unref_node (GTK_TREE_MODEL_SORT (tree_model)->child_model, &child_iter);
-  }
+    {
+      GET_CHILD_ITER (tree_model, &child_iter, iter);
+      gtk_tree_model_unref_node (GTK_TREE_MODEL_SORT (tree_model)->child_model, &child_iter);
+    }
 
   level = iter->user_data;
   elt = iter->user_data2;
@@ -1631,6 +1638,8 @@
   if (level->array->len < 1 && !((SortElt *)level->array->data)->children)
     return;
 
+  level->ref_count++;
+
   /* Set up data */
   data.tree_model_sort = tree_model_sort;
   if (level->parent_elt)
@@ -1752,6 +1761,8 @@
     }
 
   g_free (new_order);
+
+  level->ref_count--;
 }
 
 static void
@@ -2309,7 +2320,8 @@
       parent_level = parent_level->parent_level;
     }
 
-  tree_model_sort->zero_ref_count++;
+  if (new_level != tree_model_sort->root)
+    tree_model_sort->zero_ref_count++;
 
   for (i = 0; i < length; i++)
     {
@@ -2345,26 +2357,32 @@
 
   g_assert (sort_level);
 
-  for (i = 0; i < sort_level->array->len; i++)
-    {
-      if (g_array_index (sort_level->array, SortElt, i).children)
-	gtk_tree_model_sort_free_level (tree_model_sort, 
-					SORT_LEVEL(g_array_index (sort_level->array, SortElt, i).children));
-    }
-
   if (sort_level->ref_count == 0)
     {
       SortLevel *parent_level = sort_level->parent_level;
       SortElt *parent_elt = sort_level->parent_elt;
 
-      while (parent_level && parent_elt)
-      {
-  	    parent_elt->zero_ref_count--;
+      do
+	{
+	  if (parent_elt)
+	    parent_elt->zero_ref_count--;
+	  else
+	    tree_model_sort->zero_ref_count--;
+
+	  if (parent_level)
+	    {
 	      parent_elt = parent_level->parent_elt;
 	      parent_level = parent_level->parent_level;
 	    }
+	}
+      while (parent_level);
+    }
 
-	    tree_model_sort->zero_ref_count--;
+  for (i = 0; i < sort_level->array->len; i++)
+    {
+      if (g_array_index (sort_level->array, SortElt, i).children)
+	gtk_tree_model_sort_free_level (tree_model_sort,
+					SORT_LEVEL (g_array_index (sort_level->array, SortElt, i).children));
     }
 
   if (sort_level->parent_elt)
